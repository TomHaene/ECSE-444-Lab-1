
Lab1-Tom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a48  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006c08  08006c08  00016c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007054  08007054  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007054  08007054  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007054  08007054  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800705c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  08007238  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007238  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab55  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f4  00000000  00000000  0002ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d83  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087b3  00000000  00000000  00057bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbd99  00000000  00000000  000603ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0015c147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  0015c20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002323  00000000  00000000  0015eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006bf0 	.word	0x08006bf0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08006bf0 	.word	0x08006bf0

08000200 <kalmanfilter_single_asm>:
.global kalmanfilter_single_asm



kalmanfilter_single_asm:
	push {R4, LR}
 8000200:	b510      	push	{r4, lr}
	vpush {S4-S10} //Note the syntax difference when pushing a range of registers
 8000202:	ed2d 2a07 	vpush	{s4-s10}
	VLDR.F32 S1, [R0]  //q
 8000206:	edd0 0a00 	vldr	s1, [r0]
	VLDR.F32 S2, [R0, #4] //r
 800020a:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.F32 S3, [R0, #8]   //x
 800020e:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.F32 S4, [R0, #12]   //p
 8000212:	ed90 2a03 	vldr	s4, [r0, #12]
	VLDR.F32 S5, [R0, #16]   //k
 8000216:	edd0 2a04 	vldr	s5, [r0, #16]

@Registers used: R2, R3,

VADD.F32 S4, S4, S1  @ p = p + q
 800021a:	ee32 2a20 	vadd.f32	s4, s4, s1

VADD.F32 S6, S4, S2  @ p + r
 800021e:	ee32 3a01 	vadd.f32	s6, s4, s2

VDIV.F32 S5, S4, S6 @ k = p / (p + r)
 8000222:	eec2 2a03 	vdiv.f32	s5, s4, s6

VSUB.F32 S7, S0, S3 @ (measurement - x)
 8000226:	ee70 3a61 	vsub.f32	s7, s0, s3

VMUL.F32 S8, S5, S7 @ k * (measurement - x)
 800022a:	ee22 4aa3 	vmul.f32	s8, s5, s7

VADD.F32 S3, S3, S8 @ x + k*(measurement - x)
 800022e:	ee71 1a84 	vadd.f32	s3, s3, s8


VMOV.F32 S10, #1
 8000232:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
VSUB.F32 S9, S10, S5 @1 - k
 8000236:	ee75 4a62 	vsub.f32	s9, s10, s5

VMUL.F32 S4, S9, S4 @ (1 - k) * p
 800023a:	ee24 2a82 	vmul.f32	s4, s9, s4



VMRS R3, FPSCR
 800023e:	eef1 3a10 	vmrs	r3, fpscr


LDR R4, =0x0000000F //Checking last four bits
 8000242:	f04f 040f 	mov.w	r4, #15
AND R4, R3, R4
 8000246:	401c      	ands	r4, r3
CMP R4, #0
 8000248:	2c00      	cmp	r4, #0
//If R4 is more than 0 it means at least one of the flags is 1
BGT overflow_handler
 800024a:	dc0a      	bgt.n	8000262 <overflow_handler>

	VSTR.F32 S1, [R0]  //q
 800024c:	edc0 0a00 	vstr	s1, [r0]
	VSTR.F32 S2, [R0, #4] //r
 8000250:	ed80 1a01 	vstr	s2, [r0, #4]
	VSTR.F32 S3, [R0, #8]   //x
 8000254:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR.F32 S4, [R0, #12]   //p
 8000258:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR.F32 S5, [R0, #16]   //k
 800025c:	edc0 2a04 	vstr	s5, [r0, #16]
B end
 8000260:	e005      	b.n	800026e <end>

08000262 <overflow_handler>:


overflow_handler:
	//Will just return 1 if error
	@ALso need to reset the FCSCR now
	LDR R6, =0xFFFFFFF0
 8000262:	f06f 060f 	mvn.w	r6, #15
	// Move the value 0 into another general-purpose register (R7)
	AND R3, R3, R6
 8000266:	4033      	ands	r3, r6
	VMSR FPSCR, R3
 8000268:	eee1 3a10 	vmsr	fpscr, r3
	MOV R0, #1
 800026c:	2001      	movs	r0, #1

0800026e <end>:


end:
	vpop {S4-S10}
 800026e:	ecbd 2a07 	vpop	{s4-s10}
	pop {R4, PC}
 8000272:	bd10      	pop	{r4, pc}

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <calculateDifference>:
#include "arm_math.h"


void calculateDifference(float* inputArray, float* outputArray, float* differenceArray, int size){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < size; i++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e016      	b.n	8000d3a <calculateDifference+0x42>
	        differenceArray[i] = inputArray[i] - outputArray[i];
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	ed93 7a00 	vldr	s14, [r3]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	4413      	add	r3, r2
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d30:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++) {
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbe4      	blt.n	8000d0c <calculateDifference+0x14>
	    }

}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <calculateStats>:

void calculateStats(const float* differenceArray, int size, float *average, float *stdDev) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
    float sum = 0.0, variance = 0.0;
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]

    // Calculate average
    for (int i = 0; i < size; ++i) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e00e      	b.n	8000d8e <calculateStats+0x3e>
    	sum += differenceArray[i];
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d84:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < size; ++i) {
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbec      	blt.n	8000d70 <calculateStats+0x20>
    }
    *average = sum / size;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8000da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a00 	vstr	s15, [r3]

    // Calculate variance
    for (int i = 0; i < size; ++i) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e020      	b.n	8000df6 <calculateStats+0xa6>
        variance += (differenceArray[i] - *average) * (differenceArray[i] - *average);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edd3 6a00 	vldr	s13, [r3]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < size; ++i) {
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	3301      	adds	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbda      	blt.n	8000db4 <calculateStats+0x64>
    }
    variance /= size;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e08:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e10:	edc7 7a06 	vstr	s15, [r7, #24]

    // Calculate standard deviation
    *stdDev = sqrt(variance);
 8000e14:	69b8      	ldr	r0, [r7, #24]
 8000e16:	f7ff fbef 	bl	80005f8 <__aeabi_f2d>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	ec43 2b10 	vmov	d0, r2, r3
 8000e22:	f005 fde5 	bl	80069f0 <sqrt>
 8000e26:	ec53 2b10 	vmov	r2, r3, d0
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff ff13 	bl	8000c58 <__aeabi_d2f>
 8000e32:	4602      	mov	r2, r0
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <calculateCorrelation>:


float calculateCorrelation(const float* x, const float* y, int size) {
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
    float sumX = 0.0, sumY = 0.0, sumXY = 0.0;
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    float squareSumX = 0.0, squareSumY = 0.0;
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < size; ++i) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	e056      	b.n	8000f1e <calculateCorrelation+0xde>
        // Sum of elements of array X.
        sumX = sumX + x[i];
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        // Sum of elements of array Y.
        sumY = sumY + y[i];
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        // Sum of X[i] * Y[i].
        sumXY = sumXY + x[i] * y[i];
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        // Sum of square of array elements.
        squareSumX = squareSumX + x[i] * x[i];
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	edc7 7a08 	vstr	s15, [r7, #32]
        squareSumY = squareSumY + y[i] * y[i];
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	ed93 7a00 	vldr	s14, [r3]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < size; ++i) {
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dba4      	blt.n	8000e70 <calculateCorrelation+0x30>
    }

    // Use correlation formula
    float corr = (size * sumXY - sumX * sumY) /
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f38:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f48:	ee17 0a90 	vmov	r0, s15
 8000f4c:	f7ff fb54 	bl	80005f8 <__aeabi_f2d>
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
                 (sqrt((size * squareSumX - sumX * sumX) * (size * squareSumY - sumY * sumY)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	ee17 0a90 	vmov	r0, s15
 8000f98:	f7ff fb2e 	bl	80005f8 <__aeabi_f2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	ec43 2b10 	vmov	d0, r2, r3
 8000fa4:	f005 fd24 	bl	80069f0 <sqrt>
 8000fa8:	ec53 2b10 	vmov	r2, r3, d0
    float corr = (size * sumXY - sumX * sumY) /
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	f7ff fca4 	bl	80008fc <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fe4c 	bl	8000c58 <__aeabi_d2f>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	617b      	str	r3, [r7, #20]
    return corr;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	ee07 3a90 	vmov	s15, r3
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}

08000fd4 <convolution>:


void convolution(const float* x, const float* h, int N, float result[]) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
    int totalLength = 2 * N - 1; // Length of the convolution result for vectors of the same size
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]

    // Initialize result array
    for (int i = 0; i < totalLength; ++i) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e009      	b.n	8001004 <convolution+0x30>
        result[i] = 0;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < totalLength; ++i) {
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <convolution+0x1c>
    }

    // Compute the convolution
    for (int i = 0; i < N; ++i) {
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	e02c      	b.n	800106c <convolution+0x98>
        for (int j = 0; j < N; ++j) { // Use N again since both vectors are the same length
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e022      	b.n	800105e <convolution+0x8a>
            result[i + j] += x[i] * h[j];
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	edd3 6a00 	vldr	s13, [r3]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; ++j) { // Use N again since both vectors are the same length
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbd8      	blt.n	8001018 <convolution+0x44>
    for (int i = 0; i < N; ++i) {
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbce      	blt.n	8001012 <convolution+0x3e>
        }
    }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <compute_error_dsp>:

//DSP stats------------------------------------

void compute_error_dsp(float *reference_lst, float *tracked_lst, float *error, size_t length)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	603b      	str	r3, [r7, #0]
  arm_sub_f32(reference_lst, tracked_lst, error, length);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f002 fdfc 	bl	8003c94 <arm_sub_f32>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <compute_mean_dsp>:

float compute_mean_dsp(float *array, size_t length)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  float mean;
  arm_mean_f32(array, length, &mean);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	461a      	mov	r2, r3
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f002 fb14 	bl	80036e4 <arm_mean_f32>
  return mean;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	ee07 3a90 	vmov	s15, r3
}
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <compute_stddev_dsp>:


float compute_stddev_dsp(float *array, size_t length, int is_sample)
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  float stddev;
  arm_std_f32(array, length, &stddev);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	461a      	mov	r2, r3
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f002 fa75 	bl	80035d0 <arm_std_f32>

  // Adjust for sample standard deviation if needed
  if (is_sample && length > 1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02d      	beq.n	8001148 <compute_stddev_dsp+0x7c>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d92a      	bls.n	8001148 <compute_stddev_dsp+0x7c>
  {
    stddev *= sqrt((float)length / (length - 1));
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3b01      	subs	r3, #1
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001108:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800110c:	ee16 0a90 	vmov	r0, s13
 8001110:	f7ff fa72 	bl	80005f8 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	ec43 2b10 	vmov	d0, r2, r3
 800111c:	f005 fc68 	bl	80069f0 <sqrt>
 8001120:	ec55 4b10 	vmov	r4, r5, d0
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fa66 	bl	80005f8 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fab8 	bl	80006a8 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd8a 	bl	8000c58 <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	617b      	str	r3, [r7, #20]
  }

  return stddev;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bdb0      	pop	{r4, r5, r7, pc}

08001158 <compute_correlation_dsp>:

float compute_correlation_dsp(float *x, float *y, int size)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b090      	sub	sp, #64	; 0x40
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  float sumX = 0.0f, sumY = 0.0f, sumXY = 0.0f;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  float squareSumX = 0.0f, squareSumY = 0.0f;
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  float dotResult, sqrtResult;

  // Sum of elements of arrays X and Y, and their squares
  for (int i = 0; i < size; ++i)
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001186:	e042      	b.n	800120e <compute_correlation_dsp+0xb6>
  {
    sumX += x[i];
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sumY += y[i];
 80011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	4413      	add	r3, r2
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    squareSumX += x[i] * x[i];
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    squareSumY += y[i] * y[i];
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	4413      	add	r3, r2
 80011e8:	ed93 7a00 	vldr	s14, [r3]
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	4413      	add	r3, r2
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (int i = 0; i < size; ++i)
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	3301      	adds	r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800120e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	dbb8      	blt.n	8001188 <compute_correlation_dsp+0x30>
  }

  // Dot product of X and Y for sumXY
  arm_dot_prod_f32(x, y, size, &sumXY);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f002 fdec 	bl	8003dfc <arm_dot_prod_f32>

  // Calculating the correlation coefficient
  float numerator = size * sumXY - sumX * sumY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001236:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800123a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800123e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001246:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  float denominator;

  arm_sqrt_f32((size * squareSumX - sumX * sumX) * (size * squareSumY - sumY * sumY), &sqrtResult);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001254:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001260:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001272:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001276:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800127a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800127e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001282:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128a:	edc7 7a07 	vstr	s15, [r7, #28]
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001294:	edd7 7a07 	vldr	s15, [r7, #28]
 8001298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	db09      	blt.n	80012b6 <compute_correlation_dsp+0x15e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80012a2:	ed97 0a07 	vldr	s0, [r7, #28]
 80012a6:	f005 fbcf 	bl	8006a48 <sqrtf>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80012b4:	e004      	b.n	80012c0 <compute_correlation_dsp+0x168>
    }
    else
    {
      *pOut = 0.0f;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80012be:	bf00      	nop
  denominator = sqrtResult;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (denominator == 0.0f)
 80012c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d0:	d102      	bne.n	80012d8 <compute_correlation_dsp+0x180>
  {
    return 0; // Handle division by zero if necessary
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e008      	b.n	80012ea <compute_correlation_dsp+0x192>
  }

  float corr = numerator / denominator;
 80012d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80012dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e4:	edc7 7a08 	vstr	s15, [r7, #32]
  return corr;
 80012e8:	6a3b      	ldr	r3, [r7, #32]
}
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	3740      	adds	r7, #64	; 0x40
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <compute_convolution_dsp>:

void compute_convolution_dsp(const float *x, int N, const float *h, int M, float *result)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  int totalLength = N + M - 1; // Length of the convolution result is correctly calculated as N+M-1
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	4413      	add	r3, r2
 800130c:	3b01      	subs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]

  // Ensure result is zero-initialized if not already done so by the caller
  for (int i = 0; i < totalLength; ++i)
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e009      	b.n	800132a <compute_convolution_dsp+0x32>
  {
    result[i] = 0.0f;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	6a3a      	ldr	r2, [r7, #32]
 800131c:	4413      	add	r3, r2
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < totalLength; ++i)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf1      	blt.n	8001316 <compute_convolution_dsp+0x1e>
  }

  // Perform convolution
  arm_conv_f32(x, N, h, M, result);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f002 fa0e 	bl	8003760 <arm_conv_f32>
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001354:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001358:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001368:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800136c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001374:	e000      	b.n	8001378 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001376:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001378:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f9      	beq.n	8001376 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001382:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <kalmanfilter_ASM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int kalmanfilter_ASM(float* inputArray, float* outputArray, kalman_state* myState, int size){
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	603b      	str	r3, [r7, #0]
	int result;
	for (uint32_t i = 0; i < size ; i++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e01a      	b.n	80013e4 <kalmanfilter_ASM+0x4a>
		  	result = kalmanfilter_single_asm(myState, inputArray[i]);  // Kalman algorithm in assembly
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb0 0a67 	vmov.f32	s0, s15
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7fe ff1e 	bl	8000200 <kalmanfilter_single_asm>
 80013c4:	6138      	str	r0, [r7, #16]
		  	if (result == 1){
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <kalmanfilter_ASM+0x36>
		  		return 1; //Error code
 80013cc:	2301      	movs	r3, #1
 80013ce:	e00e      	b.n	80013ee <kalmanfilter_ASM+0x54>
		  	}
		  	outputArray[i] = myState->x;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6892      	ldr	r2, [r2, #8]
 80013dc:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < size ; i++){
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3e0      	bcc.n	80013ae <kalmanfilter_ASM+0x14>
	      }

	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <Kalmanfilter_C>:




int Kalmanfilter_C(float* InputArray, float* OutputArray, kalman_state* kstate, int Length){
 80013f6:	b480      	push	{r7}
 80013f8:	b08b      	sub	sp, #44	; 0x2c
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
	//Since I have the pointer to the struct I need to use the arrow operator to get fields
		 // Guard against null pointers.
		  if (InputArray == NULL || OutputArray == NULL || kstate == NULL || Length <= 0){
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <Kalmanfilter_C+0x26>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <Kalmanfilter_C+0x26>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <Kalmanfilter_C+0x26>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dc02      	bgt.n	8001422 <Kalmanfilter_C+0x2c>
		    return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	e071      	b.n	8001506 <Kalmanfilter_C+0x110>
		  }

		  uint32_t fpscrValue;
		  uint32_t bitmask = 0x0000000F;
 8001422:	230f      	movs	r3, #15
 8001424:	61fb      	str	r3, [r7, #28]
		  uint32_t resetBitmask = 0xFFFFFFE0;
 8001426:	f06f 031f 	mvn.w	r3, #31
 800142a:	61bb      	str	r3, [r7, #24]
		  uint32_t result;

		  for (int i = 0; i < Length; i++){
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	e05a      	b.n	80014e8 <Kalmanfilter_C+0xf2>

		    kstate->p = kstate->p + kstate->q;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed93 7a03 	vldr	s14, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edc3 7a03 	vstr	s15, [r3, #12]
		    kstate->k = kstate->p / (kstate->p + kstate->r);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 6a03 	vldr	s13, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed93 7a03 	vldr	s14, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edd3 7a01 	vldr	s15, [r3, #4]
 800145a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	edc3 7a04 	vstr	s15, [r3, #16]
		    kstate->x = kstate->x + kstate->k * (InputArray[i] - kstate->x);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ed93 7a02 	vldr	s14, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 6a04 	vldr	s13, [r3, #16]
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	ed93 6a00 	vldr	s12, [r3]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edd3 7a02 	vldr	s15, [r3, #8]
 8001486:	ee76 7a67 	vsub.f32	s15, s12, s15
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a02 	vstr	s15, [r3, #8]
		    kstate->p = (1 - kstate->k) * kstate->p;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a04 	vldr	s15, [r3, #16]
 800149e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edc3 7a03 	vstr	s15, [r3, #12]
		    OutputArray[i] = kstate->x;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6892      	ldr	r2, [r2, #8]
 80014c2:	601a      	str	r2, [r3, #0]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80014c4:	eef1 3a10 	vmrs	r3, fpscr


			fpscrValue = __get_FPSCR();
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
		    result = fpscrValue & bitmask;
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4013      	ands	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]

		    //Check if the result is non-zero
		    //I also allow bit 4 to be set because that can happen in C but doesn't mean there was
		    //a exception
		    if (result != 0 && result != 16) {
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <Kalmanfilter_C+0xec>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d001      	beq.n	80014e2 <Kalmanfilter_C+0xec>

		    	return 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	e011      	b.n	8001506 <Kalmanfilter_C+0x110>
		  for (int i = 0; i < Length; i++){
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	3301      	adds	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dba0      	blt.n	8001432 <Kalmanfilter_C+0x3c>
		    }
		  }
		  //After each iteration, set the relevant bits of the FPSCR to zero
		  result = fpscrValue & resetBitmask;
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
#endif
#else
  (void)fpscr;
#endif
}
 8001502:	bf00      	nop
		  __set_FPSCR(result);
		  return 0;
 8001504:	2300      	movs	r3, #0
	}
 8001506:	4618      	mov	r0, r3
 8001508:	372c      	adds	r7, #44	; 0x2c
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <Kalmanfilter_DSP>:



// CMSIS DSP implementation.
int Kalmanfilter_DSP(float *InputArray, float *OutputArray, kalman_state *kstate, int Length)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b092      	sub	sp, #72	; 0x48
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
  // Guard against null pointers.
  if (InputArray == NULL || OutputArray == NULL || kstate == NULL || Length <= 0)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <Kalmanfilter_DSP+0x26>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <Kalmanfilter_DSP+0x26>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <Kalmanfilter_DSP+0x26>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	dc02      	bgt.n	800153e <Kalmanfilter_DSP+0x2c>
  {
    return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	e0a8      	b.n	8001690 <Kalmanfilter_DSP+0x17e>
  }


  uint32_t fpscrValue;
  uint32_t bitmask = 0x0000000F;
 800153e:	230f      	movs	r3, #15
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t resetBitmask = 0xFFFFFFE0;
 8001542:	f06f 031f 	mvn.w	r3, #31
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t fpscr_result;


  for (int i = 0; i < Length; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
 800154c:	e090      	b.n	8001670 <Kalmanfilter_DSP+0x15e>
  {
    // Use single-element arrays to hold scalar values
    float32_t p_array[1] = {kstate->p};
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
    float32_t q_array[1] = {kstate->q};
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t r_array[1] = {kstate->r};
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t result[1];

    // p = p + q (scalar addition using single-element arrays)
    p_array[0] = kstate->p;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_array[0] = kstate->q;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    r_array[0] = kstate->r;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    arm_add_f32(p_array, q_array, result, 1);
 8001572:	f107 0220 	add.w	r2, r7, #32
 8001576:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800157a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800157e:	2301      	movs	r3, #1
 8001580:	f002 fc94 	bl	8003eac <arm_add_f32>
    kstate->p = result[0]; // Update p with the result
 8001584:	6a3a      	ldr	r2, [r7, #32]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60da      	str	r2, [r3, #12]

    // TODO? k = p / (p + r), since no division in CMSIS-DSP
    kstate->k = kstate->p / (kstate->p + kstate->r);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	ed93 7a03 	vldr	s14, [r3, #12]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	edd3 7a01 	vldr	s15, [r3, #4]
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate x = x + k * (InputArray[i] - x) using CMSIS-DSP
    float32_t input_minus_x_array[1] = {InputArray[i] - kstate->x};
 80015aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	edc7 7a07 	vstr	s15, [r7, #28]
    float32_t k_array[1] = {kstate->k};
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	61bb      	str	r3, [r7, #24]

    p_array[0] = kstate->p;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_array[0] = kstate->q;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    r_array[0] = kstate->r;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    arm_mult_f32(k_array, input_minus_x_array, result, 1); // k * (input - x)
 80015dc:	f107 0220 	add.w	r2, r7, #32
 80015e0:	f107 011c 	add.w	r1, r7, #28
 80015e4:	f107 0018 	add.w	r0, r7, #24
 80015e8:	2301      	movs	r3, #1
 80015ea:	f002 fbad 	bl	8003d48 <arm_mult_f32>
    kstate->x += result[0];                                // Update x with the result
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update error covariance: p = (1 - k) * p using CMSIS-DSP
    float32_t one_minus_k_array[1] = {1.0f - kstate->k};
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a04 	vldr	s15, [r3, #16]
 8001608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001610:	edc7 7a05 	vstr	s15, [r7, #20]
    p_array[0] = kstate->p;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_array[0] = kstate->q;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    r_array[0] = kstate->r;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    arm_mult_f32(one_minus_k_array, p_array, result, 1); // (1 - k) * p
 8001626:	f107 0220 	add.w	r2, r7, #32
 800162a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800162e:	f107 0014 	add.w	r0, r7, #20
 8001632:	2301      	movs	r3, #1
 8001634:	f002 fb88 	bl	8003d48 <arm_mult_f32>
    kstate->p = result[0];                               // Update p with the result
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60da      	str	r2, [r3, #12]

    // Store the updated estimate in the output array
    OutputArray[i] = kstate->x;
 800163e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	4413      	add	r3, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	601a      	str	r2, [r3, #0]
  return __builtin_arm_get_fpscr();
 800164c:	eef1 3a10 	vmrs	r3, fpscr

    fpscrValue = __get_FPSCR();
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
    fpscr_result = fpscrValue & bitmask;
 8001652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001656:	4013      	ands	r3, r2
 8001658:	637b      	str	r3, [r7, #52]	; 0x34

    //Check if the result is non-zero
    //I also allow bit 4 to be set because that can happen in C but doesn't mean there was
    //a exception
    if (fpscr_result != 0 && fpscr_result != 16) {
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <Kalmanfilter_DSP+0x158>
 8001660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001662:	2b10      	cmp	r3, #16
 8001664:	d001      	beq.n	800166a <Kalmanfilter_DSP+0x158>

    	return 1;
 8001666:	2301      	movs	r3, #1
 8001668:	e012      	b.n	8001690 <Kalmanfilter_DSP+0x17e>
  for (int i = 0; i < Length; i++)
 800166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166c:	3301      	adds	r3, #1
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
 8001670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	f6ff af6a 	blt.w	800154e <Kalmanfilter_DSP+0x3c>
    }


  }
  fpscr_result = fpscrValue & resetBitmask;
 800167a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800167c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167e:	4013      	ands	r3, r2
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
 8001682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  __builtin_arm_set_fpscr(fpscr);
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	eee1 3a10 	vmsr	fpscr, r3
}
 800168c:	bf00      	nop
 __set_FPSCR(fpscr_result);

  // Success.
  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3748      	adds	r7, #72	; 0x48
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <initialize_output>:


void initialize_output(float* arr, int n){
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	for (int i =0; i<n; i++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e009      	b.n	80016bc <initialize_output+0x24>
		arr[i] = 0.0;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
	for (int i =0; i<n; i++){
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf1      	blt.n	80016a8 <initialize_output+0x10>
	}
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d8:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80016dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80016de:	f000 feb8 	bl	8002452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e2:	f000 fd11 	bl	8002108 <SystemClock_Config>
*/

  //int size = sizeof(TEST_ARRAY) / sizeof(TEST_ARRAY[0]);


  float TEST_ARRAY[] = {0,2,3,5,4,5,6,4,5,4,5,5,5};
 80016e6:	4be9      	ldr	r3, [pc, #932]	; (8001a8c <main+0x3b8>)
 80016e8:	f507 75a4 	add.w	r5, r7, #328	; 0x148
 80016ec:	461c      	mov	r4, r3
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	602b      	str	r3, [r5, #0]
  int size = sizeof(TEST_ARRAY) / sizeof(TEST_ARRAY[0]);
 80016fe:	230d      	movs	r3, #13
 8001700:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4


  kalman_state ASM_state;
  ASM_state.q = 0.1;
 8001704:	4be2      	ldr	r3, [pc, #904]	; (8001a90 <main+0x3bc>)
 8001706:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  ASM_state.r = 0.1;
 800170a:	4be1      	ldr	r3, [pc, #900]	; (8001a90 <main+0x3bc>)
 800170c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  ASM_state.p = 0.1;
 8001710:	4bdf      	ldr	r3, [pc, #892]	; (8001a90 <main+0x3bc>)
 8001712:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  ASM_state.x = 5.0;
 8001716:	4bdf      	ldr	r3, [pc, #892]	; (8001a94 <main+0x3c0>)
 8001718:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  ASM_state.k = 0.0;
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  float asm_output[size];
 8001724:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001728:	1e4b      	subs	r3, r1, #1
 800172a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800172e:	460a      	mov	r2, r1
 8001730:	2300      	movs	r3, #0
 8001732:	4690      	mov	r8, r2
 8001734:	4699      	mov	r9, r3
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001742:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001746:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800174a:	460a      	mov	r2, r1
 800174c:	2300      	movs	r3, #0
 800174e:	4692      	mov	sl, r2
 8001750:	469b      	mov	fp, r3
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800175e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001762:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001766:	460b      	mov	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	3307      	adds	r3, #7
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	ebad 0d03 	sub.w	sp, sp, r3
 8001774:	ab02      	add	r3, sp, #8
 8001776:	3303      	adds	r3, #3
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  initialize_output(asm_output, size);
 8001780:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001784:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 8001788:	f7ff ff86 	bl	8001698 <initialize_output>

  kalman_state C_state;
  C_state.q = 0.1;
 800178c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001790:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001794:	4bbe      	ldr	r3, [pc, #760]	; (8001a90 <main+0x3bc>)
 8001796:	6013      	str	r3, [r2, #0]
  C_state.r = 0.1;
 8001798:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800179c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80017a0:	4bbb      	ldr	r3, [pc, #748]	; (8001a90 <main+0x3bc>)
 80017a2:	6053      	str	r3, [r2, #4]
  C_state.p = 0.1;
 80017a4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80017a8:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80017ac:	4bb8      	ldr	r3, [pc, #736]	; (8001a90 <main+0x3bc>)
 80017ae:	60d3      	str	r3, [r2, #12]
  C_state.x = 5.0;
 80017b0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80017b4:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80017b8:	4bb6      	ldr	r3, [pc, #728]	; (8001a94 <main+0x3c0>)
 80017ba:	6093      	str	r3, [r2, #8]
  C_state.k = 0.0;
 80017bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80017c0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	6113      	str	r3, [r2, #16]
  float c_output[size];
 80017ca:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80017ce:	1e4b      	subs	r3, r1, #1
 80017d0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80017d4:	460a      	mov	r2, r1
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80017dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80017ec:	4628      	mov	r0, r5
 80017ee:	0143      	lsls	r3, r0, #5
 80017f0:	4620      	mov	r0, r4
 80017f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017f6:	4620      	mov	r0, r4
 80017f8:	0142      	lsls	r2, r0, #5
 80017fa:	460a      	mov	r2, r1
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001812:	4628      	mov	r0, r5
 8001814:	0143      	lsls	r3, r0, #5
 8001816:	4620      	mov	r0, r4
 8001818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800181c:	4620      	mov	r0, r4
 800181e:	0142      	lsls	r2, r0, #5
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	3307      	adds	r3, #7
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	ebad 0d03 	sub.w	sp, sp, r3
 800182e:	ab02      	add	r3, sp, #8
 8001830:	3303      	adds	r3, #3
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  initialize_output(c_output, size);
 800183a:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 800183e:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001842:	f7ff ff29 	bl	8001698 <initialize_output>


  kalman_state CMSIS_state;
  CMSIS_state.q = 0.1;
 8001846:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800184a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800184e:	4b90      	ldr	r3, [pc, #576]	; (8001a90 <main+0x3bc>)
 8001850:	6013      	str	r3, [r2, #0]
  CMSIS_state.r = 0.1;
 8001852:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001856:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800185a:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <main+0x3bc>)
 800185c:	6053      	str	r3, [r2, #4]
  CMSIS_state.p = 0.1;
 800185e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001862:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8001866:	4b8a      	ldr	r3, [pc, #552]	; (8001a90 <main+0x3bc>)
 8001868:	60d3      	str	r3, [r2, #12]
  CMSIS_state.x = 5.0;
 800186a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800186e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8001872:	4b88      	ldr	r3, [pc, #544]	; (8001a94 <main+0x3c0>)
 8001874:	6093      	str	r3, [r2, #8]
  CMSIS_state.k = 0.0;
 8001876:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800187a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	6113      	str	r3, [r2, #16]
  float cmsis_output[size];
 8001884:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001888:	1e4b      	subs	r3, r1, #1
 800188a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800188e:	460a      	mov	r2, r1
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018a6:	4628      	mov	r0, r5
 80018a8:	0143      	lsls	r3, r0, #5
 80018aa:	4620      	mov	r0, r4
 80018ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018b0:	4620      	mov	r0, r4
 80018b2:	0142      	lsls	r2, r0, #5
 80018b4:	460a      	mov	r2, r1
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80018bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80018cc:	4628      	mov	r0, r5
 80018ce:	0143      	lsls	r3, r0, #5
 80018d0:	4620      	mov	r0, r4
 80018d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018d6:	4620      	mov	r0, r4
 80018d8:	0142      	lsls	r2, r0, #5
 80018da:	460b      	mov	r3, r1
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	3307      	adds	r3, #7
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	ebad 0d03 	sub.w	sp, sp, r3
 80018e8:	ab02      	add	r3, sp, #8
 80018ea:	3303      	adds	r3, #3
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  initialize_output(cmsis_output, size);
 80018f4:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80018f8:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80018fc:	f7ff fecc 	bl	8001698 <initialize_output>


  	float asm_average_usingc;
  	float asm_stdDev_usingc;
  	float asm_diffArray_usingc[size];
 8001900:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001904:	1e4b      	subs	r3, r1, #1
 8001906:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800190a:	460a      	mov	r2, r1
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8001912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001922:	4628      	mov	r0, r5
 8001924:	0143      	lsls	r3, r0, #5
 8001926:	4620      	mov	r0, r4
 8001928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800192c:	4620      	mov	r0, r4
 800192e:	0142      	lsls	r2, r0, #5
 8001930:	460a      	mov	r2, r1
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8001938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001948:	4628      	mov	r0, r5
 800194a:	0143      	lsls	r3, r0, #5
 800194c:	4620      	mov	r0, r4
 800194e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001952:	4620      	mov	r0, r4
 8001954:	0142      	lsls	r2, r0, #5
 8001956:	460b      	mov	r3, r1
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	3307      	adds	r3, #7
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	ebad 0d03 	sub.w	sp, sp, r3
 8001964:	ab02      	add	r3, sp, #8
 8001966:	3303      	adds	r3, #3
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	float c_average_usingc;
  	float c_stdDev_usingc;
  	float c_diffArray_usingc[size];
 8001970:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001974:	1e4b      	subs	r3, r1, #1
 8001976:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800197a:	460a      	mov	r2, r1
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001992:	4628      	mov	r0, r5
 8001994:	0143      	lsls	r3, r0, #5
 8001996:	4620      	mov	r0, r4
 8001998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800199c:	4620      	mov	r0, r4
 800199e:	0142      	lsls	r2, r0, #5
 80019a0:	460a      	mov	r2, r1
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80019b8:	4628      	mov	r0, r5
 80019ba:	0143      	lsls	r3, r0, #5
 80019bc:	4620      	mov	r0, r4
 80019be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c2:	4620      	mov	r0, r4
 80019c4:	0142      	lsls	r2, r0, #5
 80019c6:	460b      	mov	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	3307      	adds	r3, #7
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	ebad 0d03 	sub.w	sp, sp, r3
 80019d4:	ab02      	add	r3, sp, #8
 80019d6:	3303      	adds	r3, #3
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c


	float cmsis_average_usingc;
  	float cmsis_stdDev_usingc;
  	float cmsis_diffArray_usingc[size];
 80019e0:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80019e4:	1e4b      	subs	r3, r1, #1
 80019e6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80019ea:	460a      	mov	r2, r1
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80019f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001a02:	4628      	mov	r0, r5
 8001a04:	0143      	lsls	r3, r0, #5
 8001a06:	4620      	mov	r0, r4
 8001a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	0142      	lsls	r2, r0, #5
 8001a10:	460a      	mov	r2, r1
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a28:	4628      	mov	r0, r5
 8001a2a:	0143      	lsls	r3, r0, #5
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a32:	4620      	mov	r0, r4
 8001a34:	0142      	lsls	r2, r0, #5
 8001a36:	460b      	mov	r3, r1
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	3307      	adds	r3, #7
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	ebad 0d03 	sub.w	sp, sp, r3
 8001a44:	ab02      	add	r3, sp, #8
 8001a46:	3303      	adds	r3, #3
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224


  	kalman_state testState;
  	testState.q = 0.0;
 8001a50:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a54:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	6013      	str	r3, [r2, #0]
  	testState.r = 0.0;
 8001a5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a62:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	6053      	str	r3, [r2, #4]
  	testState.p = 0.0;
 8001a6c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a70:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	60d3      	str	r3, [r2, #12]
  	testState.x = 5.0;
 8001a7a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a7e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <main+0x3c0>)
 8001a84:	6093      	str	r3, [r2, #8]
  	testState.k = 0.0;
 8001a86:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a8a:	e005      	b.n	8001a98 <main+0x3c4>
 8001a8c:	08006c08 	.word	0x08006c08
 8001a90:	3dcccccd 	.word	0x3dcccccd
 8001a94:	40a00000 	.word	0x40a00000
 8001a98:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	6113      	str	r3, [r2, #16]

  	ITM_Port32(31) = 1;
 8001aa2:	4aec      	ldr	r2, [pc, #944]	; (8001e54 <main+0x780>)
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
  	kalmanfilter_ASM(TEST_ARRAY , asm_output, &ASM_state, size);
 8001aa8:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8001aac:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001ab0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ab4:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001ab8:	f7ff fc6f 	bl	800139a <kalmanfilter_ASM>
  	ITM_Port32(31) = 2;
 8001abc:	4ae5      	ldr	r2, [pc, #916]	; (8001e54 <main+0x780>)
 8001abe:	2302      	movs	r3, #2
 8001ac0:	6013      	str	r3, [r2, #0]

  	//ASM run time: 3.214200ms - 3.097717ms = 0.116483ms

  	ITM_Port32(31) = 3;
 8001ac2:	4ae4      	ldr	r2, [pc, #912]	; (8001e54 <main+0x780>)
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	6013      	str	r3, [r2, #0]
  	Kalmanfilter_C(TEST_ARRAY, c_output, &C_state, size);
 8001ac8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001acc:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001ad0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ad4:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001ad8:	f7ff fc8d 	bl	80013f6 <Kalmanfilter_C>
  	ITM_Port32(31) = 4;
 8001adc:	4add      	ldr	r2, [pc, #884]	; (8001e54 <main+0x780>)
 8001ade:	2304      	movs	r3, #4
 8001ae0:	6013      	str	r3, [r2, #0]

  	//C run time: 3.334383ms - 3.214300ms = 0.120083ms

  	ITM_Port32(31) = 5;
 8001ae2:	4adc      	ldr	r2, [pc, #880]	; (8001e54 <main+0x780>)
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	6013      	str	r3, [r2, #0]
  	Kalmanfilter_DSP(TEST_ARRAY, cmsis_output, &CMSIS_state, size);
 8001ae8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001aec:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001af0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001af4:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8001af8:	f7ff fd0b 	bl	8001512 <Kalmanfilter_DSP>
  	ITM_Port32(31) = 6;
 8001afc:	4ad5      	ldr	r2, [pc, #852]	; (8001e54 <main+0x780>)
 8001afe:	2306      	movs	r3, #6
 8001b00:	6013      	str	r3, [r2, #0]


//Doing analysis using plain C--------------------------------(Below)

//Calculating tracking difference using plain C stats function
  	calculateDifference(TEST_ARRAY, asm_output, asm_diffArray_usingc, size);
 8001b02:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001b06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b0a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001b0e:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001b12:	f7ff f8f1 	bl	8000cf8 <calculateDifference>
	calculateDifference(TEST_ARRAY, c_output, c_diffArray_usingc, size);
 8001b16:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b1e:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001b22:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001b26:	f7ff f8e7 	bl	8000cf8 <calculateDifference>
	calculateDifference(TEST_ARRAY, cmsis_output, cmsis_diffArray_usingc, size);
 8001b2a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001b2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b32:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8001b36:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8001b3a:	f7ff f8dd 	bl	8000cf8 <calculateDifference>


//Calculating average and std deviation using plain C stats function
  	calculateStats(asm_diffArray_usingc, size, &asm_average_usingc, &asm_stdDev_usingc);
 8001b3e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b42:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001b46:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001b4a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001b4e:	f7ff f8ff 	bl	8000d50 <calculateStats>
  	calculateStats(c_diffArray_usingc, size, &c_average_usingc, &c_stdDev_usingc);
 8001b52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b56:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001b5a:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001b5e:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001b62:	f7ff f8f5 	bl	8000d50 <calculateStats>
  	calculateStats(cmsis_diffArray_usingc, size, &cmsis_average_usingc, &cmsis_stdDev_usingc);
 8001b66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b6a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001b6e:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001b72:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8001b76:	f7ff f8eb 	bl	8000d50 <calculateStats>


//Calculating correlation using plain C stats function
  	float asm_correlation_usingc = calculateCorrelation(TEST_ARRAY, asm_output, size);
 8001b7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b7e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001b82:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f95a 	bl	8000e40 <calculateCorrelation>
 8001b8c:	ed87 0a7c 	vstr	s0, [r7, #496]	; 0x1f0
  	float c_correlation_usingc = calculateCorrelation(TEST_ARRAY, c_output, size);
 8001b90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b94:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001b98:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f94f 	bl	8000e40 <calculateCorrelation>
 8001ba2:	ed87 0a7b 	vstr	s0, [r7, #492]	; 0x1ec
  	float cmsis_correlation_usingc = calculateCorrelation(TEST_ARRAY, cmsis_output, size);
 8001ba6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001baa:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001bae:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f944 	bl	8000e40 <calculateCorrelation>
 8001bb8:	ed87 0a7a 	vstr	s0, [r7, #488]	; 0x1e8


//Calculating convolution using plain C stats function

  	float asm_convolution_vector[(2* size) -1];
 8001bbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	1e59      	subs	r1, r3, #1
 8001bc4:	1e4b      	subs	r3, r1, #1
 8001bc6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bca:	460a      	mov	r2, r1
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001be2:	4628      	mov	r0, r5
 8001be4:	0143      	lsls	r3, r0, #5
 8001be6:	4620      	mov	r0, r4
 8001be8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bec:	4620      	mov	r0, r4
 8001bee:	0142      	lsls	r2, r0, #5
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001c08:	4628      	mov	r0, r5
 8001c0a:	0143      	lsls	r3, r0, #5
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c12:	4620      	mov	r0, r4
 8001c14:	0142      	lsls	r2, r0, #5
 8001c16:	460b      	mov	r3, r1
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3307      	adds	r3, #7
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	ebad 0d03 	sub.w	sp, sp, r3
 8001c24:	ab02      	add	r3, sp, #8
 8001c26:	3303      	adds	r3, #3
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  	float c_convolution_vector[(2* size) -1];
 8001c30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	1e59      	subs	r1, r3, #1
 8001c38:	1e4b      	subs	r3, r1, #1
 8001c3a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c3e:	460a      	mov	r2, r1
 8001c40:	2300      	movs	r3, #0
 8001c42:	67ba      	str	r2, [r7, #120]	; 0x78
 8001c44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c52:	4628      	mov	r0, r5
 8001c54:	0143      	lsls	r3, r0, #5
 8001c56:	4620      	mov	r0, r4
 8001c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	0142      	lsls	r2, r0, #5
 8001c60:	460a      	mov	r2, r1
 8001c62:	2300      	movs	r3, #0
 8001c64:	673a      	str	r2, [r7, #112]	; 0x70
 8001c66:	677b      	str	r3, [r7, #116]	; 0x74
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001c74:	4628      	mov	r0, r5
 8001c76:	0143      	lsls	r3, r0, #5
 8001c78:	4620      	mov	r0, r4
 8001c7a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c7e:	4620      	mov	r0, r4
 8001c80:	0142      	lsls	r2, r0, #5
 8001c82:	460b      	mov	r3, r1
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3307      	adds	r3, #7
 8001c88:	08db      	lsrs	r3, r3, #3
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c90:	ab02      	add	r3, sp, #8
 8001c92:	3303      	adds	r3, #3
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  	float cmsis_convolution_vector[(2* size) -1];
 8001c9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	1e59      	subs	r1, r3, #1
 8001ca4:	1e4b      	subs	r3, r1, #1
 8001ca6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001caa:	460a      	mov	r2, r1
 8001cac:	2300      	movs	r3, #0
 8001cae:	66ba      	str	r2, [r7, #104]	; 0x68
 8001cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	0143      	lsls	r3, r0, #5
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc8:	4620      	mov	r0, r4
 8001cca:	0142      	lsls	r2, r0, #5
 8001ccc:	460a      	mov	r2, r1
 8001cce:	2300      	movs	r3, #0
 8001cd0:	663a      	str	r2, [r7, #96]	; 0x60
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	0143      	lsls	r3, r0, #5
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cea:	4620      	mov	r0, r4
 8001cec:	0142      	lsls	r2, r0, #5
 8001cee:	460b      	mov	r3, r1
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	ebad 0d03 	sub.w	sp, sp, r3
 8001cfc:	ab02      	add	r3, sp, #8
 8001cfe:	3303      	adds	r3, #3
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

  	convolution(TEST_ARRAY, asm_output, size, asm_convolution_vector);
 8001d08:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001d0c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d10:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001d14:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001d18:	f7ff f95c 	bl	8000fd4 <convolution>
  	convolution(TEST_ARRAY, c_output, size, c_convolution_vector);
 8001d1c:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001d20:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001d24:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001d28:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001d2c:	f7ff f952 	bl	8000fd4 <convolution>
  	convolution(TEST_ARRAY, cmsis_output, size, cmsis_convolution_vector);
 8001d30:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001d34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d38:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001d3c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8001d40:	f7ff f948 	bl	8000fd4 <convolution>



  	float asm_average_usingcmsis;
  	float asm_stdDev_usingcmsis;
  	float asm_diffArray_usingcmsis[size];
 8001d44:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001d48:	1e4b      	subs	r3, r1, #1
 8001d4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001d4e:	460a      	mov	r2, r1
 8001d50:	2300      	movs	r3, #0
 8001d52:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001d62:	4628      	mov	r0, r5
 8001d64:	0143      	lsls	r3, r0, #5
 8001d66:	4620      	mov	r0, r4
 8001d68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	0142      	lsls	r2, r0, #5
 8001d70:	460a      	mov	r2, r1
 8001d72:	2300      	movs	r3, #0
 8001d74:	653a      	str	r2, [r7, #80]	; 0x50
 8001d76:	657b      	str	r3, [r7, #84]	; 0x54
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001d84:	4628      	mov	r0, r5
 8001d86:	0143      	lsls	r3, r0, #5
 8001d88:	4620      	mov	r0, r4
 8001d8a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d8e:	4620      	mov	r0, r4
 8001d90:	0142      	lsls	r2, r0, #5
 8001d92:	460b      	mov	r3, r1
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	3307      	adds	r3, #7
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001da0:	ab02      	add	r3, sp, #8
 8001da2:	3303      	adds	r3, #3
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
  	float asm_convolution_vector_usingcmsis[(2*size) -1];
 8001dac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	1e59      	subs	r1, r3, #1
 8001db4:	1e4b      	subs	r3, r1, #1
 8001db6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dba:	460a      	mov	r2, r1
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001dce:	4628      	mov	r0, r5
 8001dd0:	0143      	lsls	r3, r0, #5
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dd8:	4620      	mov	r0, r4
 8001dda:	0142      	lsls	r2, r0, #5
 8001ddc:	460a      	mov	r2, r1
 8001dde:	2300      	movs	r3, #0
 8001de0:	643a      	str	r2, [r7, #64]	; 0x40
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001df0:	4628      	mov	r0, r5
 8001df2:	0143      	lsls	r3, r0, #5
 8001df4:	4620      	mov	r0, r4
 8001df6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	0142      	lsls	r2, r0, #5
 8001dfe:	460b      	mov	r3, r1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	3307      	adds	r3, #7
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	ebad 0d03 	sub.w	sp, sp, r3
 8001e0c:	ab02      	add	r3, sp, #8
 8001e0e:	3303      	adds	r3, #3
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0


  	float c_average_usingcmsis;
  	float c_stdDev_usingcmsis;
  	float c_diffArray_usingcmsis[size];
 8001e18:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001e1c:	1e4b      	subs	r3, r1, #1
 8001e1e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e22:	460a      	mov	r2, r1
 8001e24:	2300      	movs	r3, #0
 8001e26:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001e36:	4628      	mov	r0, r5
 8001e38:	0143      	lsls	r3, r0, #5
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e40:	4620      	mov	r0, r4
 8001e42:	0142      	lsls	r2, r0, #5
 8001e44:	460a      	mov	r2, r1
 8001e46:	2300      	movs	r3, #0
 8001e48:	633a      	str	r2, [r7, #48]	; 0x30
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	e002      	b.n	8001e58 <main+0x784>
 8001e52:	bf00      	nop
 8001e54:	e000007c 	.word	0xe000007c
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e60:	4628      	mov	r0, r5
 8001e62:	0143      	lsls	r3, r0, #5
 8001e64:	4620      	mov	r0, r4
 8001e66:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	0142      	lsls	r2, r0, #5
 8001e6e:	460b      	mov	r3, r1
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	3307      	adds	r3, #7
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	ebad 0d03 	sub.w	sp, sp, r3
 8001e7c:	ab02      	add	r3, sp, #8
 8001e7e:	3303      	adds	r3, #3
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float c_convolution_vector_usingcmsis[(2*size) - 1];
 8001e88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	1e4b      	subs	r3, r1, #1
 8001e92:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001e96:	460a      	mov	r2, r1
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001eaa:	4628      	mov	r0, r5
 8001eac:	0143      	lsls	r3, r0, #5
 8001eae:	4620      	mov	r0, r4
 8001eb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	0142      	lsls	r2, r0, #5
 8001eb8:	460a      	mov	r2, r1
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623a      	str	r2, [r7, #32]
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ecc:	4628      	mov	r0, r5
 8001ece:	0143      	lsls	r3, r0, #5
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	0142      	lsls	r2, r0, #5
 8001eda:	460b      	mov	r3, r1
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	3307      	adds	r3, #7
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee8:	ab02      	add	r3, sp, #8
 8001eea:	3303      	adds	r3, #3
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0



  	float cmsis_average_usingcmsis;
  	float cmsis_stdDev_usingcmsis;
  	float cmsis_diffArray_usingcmsis[size];
 8001ef4:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001ef8:	1e4b      	subs	r3, r1, #1
 8001efa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001efe:	460a      	mov	r2, r1
 8001f00:	2300      	movs	r3, #0
 8001f02:	61ba      	str	r2, [r7, #24]
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f12:	4628      	mov	r0, r5
 8001f14:	0143      	lsls	r3, r0, #5
 8001f16:	4620      	mov	r0, r4
 8001f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	0142      	lsls	r2, r0, #5
 8001f20:	460a      	mov	r2, r1
 8001f22:	2300      	movs	r3, #0
 8001f24:	613a      	str	r2, [r7, #16]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f34:	4628      	mov	r0, r5
 8001f36:	0143      	lsls	r3, r0, #5
 8001f38:	4620      	mov	r0, r4
 8001f3a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f3e:	4620      	mov	r0, r4
 8001f40:	0142      	lsls	r2, r0, #5
 8001f42:	460b      	mov	r3, r1
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3307      	adds	r3, #7
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	ebad 0d03 	sub.w	sp, sp, r3
 8001f50:	ab02      	add	r3, sp, #8
 8001f52:	3303      	adds	r3, #3
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float cmsis_convolution_vector_usingcmsis[(2*size)- 1];
 8001f5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	1e59      	subs	r1, r3, #1
 8001f64:	1e4b      	subs	r3, r1, #1
 8001f66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f7e:	4628      	mov	r0, r5
 8001f80:	0143      	lsls	r3, r0, #5
 8001f82:	4620      	mov	r0, r4
 8001f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f88:	4620      	mov	r0, r4
 8001f8a:	0142      	lsls	r2, r0, #5
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603a      	str	r2, [r7, #0]
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	0143      	lsls	r3, r0, #5
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001faa:	4620      	mov	r0, r4
 8001fac:	0142      	lsls	r2, r0, #5
 8001fae:	460b      	mov	r3, r1
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fbc:	ab02      	add	r3, sp, #8
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0



  	//Calculating tracking difference using CMSIS stats function
  	compute_error_dsp(TEST_ARRAY, asm_output, asm_diffArray_usingcmsis, size);
 8001fc8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fcc:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001fd0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8001fd4:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001fd8:	f7ff f853 	bl	8001082 <compute_error_dsp>
	compute_error_dsp(TEST_ARRAY, c_output, c_diffArray_usingcmsis, size);
 8001fdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fe0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001fe4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fe8:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001fec:	f7ff f849 	bl	8001082 <compute_error_dsp>
	compute_error_dsp(TEST_ARRAY, cmsis_output, cmsis_diffArray_usingcmsis, size);
 8001ff0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ff4:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001ff8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001ffc:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8002000:	f7ff f83f 	bl	8001082 <compute_error_dsp>


	//Calculating average using CMSIS stats function
	asm_average_usingcmsis = compute_mean_dsp(asm_diffArray_usingcmsis, size);
 8002004:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002008:	4619      	mov	r1, r3
 800200a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800200e:	f7ff f849 	bl	80010a4 <compute_mean_dsp>
 8002012:	ed87 0a67 	vstr	s0, [r7, #412]	; 0x19c
	c_average_usingcmsis = compute_mean_dsp(c_diffArray_usingcmsis, size);
 8002016:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800201a:	4619      	mov	r1, r3
 800201c:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002020:	f7ff f840 	bl	80010a4 <compute_mean_dsp>
 8002024:	ed87 0a66 	vstr	s0, [r7, #408]	; 0x198
	cmsis_average_usingcmsis = compute_mean_dsp(cmsis_diffArray_usingcmsis, size);
 8002028:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800202c:	4619      	mov	r1, r3
 800202e:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8002032:	f7ff f837 	bl	80010a4 <compute_mean_dsp>
 8002036:	ed87 0a65 	vstr	s0, [r7, #404]	; 0x194

	//Calculating std dev using CMSIS stats function
	asm_stdDev_usingcmsis = compute_stddev_dsp(asm_diffArray_usingcmsis, size, 0 );
 800203a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002046:	f7ff f841 	bl	80010cc <compute_stddev_dsp>
 800204a:	ed87 0a64 	vstr	s0, [r7, #400]	; 0x190
	c_stdDev_usingcmsis = compute_stddev_dsp(c_diffArray_usingcmsis, size, 0 );
 800204e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800205a:	f7ff f837 	bl	80010cc <compute_stddev_dsp>
 800205e:	ed87 0a63 	vstr	s0, [r7, #396]	; 0x18c
	cmsis_stdDev_usingcmsis = compute_stddev_dsp(cmsis_diffArray_usingcmsis, size, 0 );
 8002062:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002066:	2200      	movs	r2, #0
 8002068:	4619      	mov	r1, r3
 800206a:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 800206e:	f7ff f82d 	bl	80010cc <compute_stddev_dsp>
 8002072:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188

	//Calculating correlation using CMSIS stats function
	float asm_correlation = compute_correlation_dsp(TEST_ARRAY, asm_output, size);
 8002076:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800207a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800207e:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f868 	bl	8001158 <compute_correlation_dsp>
 8002088:	ed87 0a61 	vstr	s0, [r7, #388]	; 0x184
	float c_correlation= compute_correlation_dsp(TEST_ARRAY, c_output, size);
 800208c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002090:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8002094:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f85d 	bl	8001158 <compute_correlation_dsp>
 800209e:	ed87 0a60 	vstr	s0, [r7, #384]	; 0x180
	float cmsis_correlation = compute_correlation_dsp(TEST_ARRAY, cmsis_output, size);
 80020a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020a6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80020aa:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f852 	bl	8001158 <compute_correlation_dsp>
 80020b4:	ed87 0a5f 	vstr	s0, [r7, #380]	; 0x17c


	//Calculating convolution using CMSIS stats function
	compute_convolution_dsp(TEST_ARRAY, size,asm_output, size, asm_convolution_vector_usingcmsis);
 80020b8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80020bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020c6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80020ca:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80020ce:	f7ff f913 	bl	80012f8 <compute_convolution_dsp>
	compute_convolution_dsp(TEST_ARRAY, size,c_output, size, c_convolution_vector_usingcmsis);
 80020d2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80020d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e0:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80020e4:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 80020e8:	f7ff f906 	bl	80012f8 <compute_convolution_dsp>
	compute_convolution_dsp(TEST_ARRAY, size,cmsis_output, size, cmsis_convolution_vector_usingcmsis);
 80020ec:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80020f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020fa:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80020fe:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8002102:	f7ff f8f9 	bl	80012f8 <compute_convolution_dsp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002106:	e7fe      	b.n	8002106 <main+0xa32>

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b096      	sub	sp, #88	; 0x58
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	2244      	movs	r2, #68	; 0x44
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f001 ff4c 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800212a:	2000      	movs	r0, #0
 800212c:	f000 fb0c 	bl	8002748 <HAL_PWREx_ControlVoltageScaling>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002136:	f000 f854 	bl	80021e2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800213a:	2310      	movs	r3, #16
 800213c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002146:	2360      	movs	r3, #96	; 0x60
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800214a:	2302      	movs	r3, #2
 800214c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800214e:	2301      	movs	r3, #1
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002156:	233c      	movs	r3, #60	; 0x3c
 8002158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800215a:	2302      	movs	r3, #2
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800215e:	2302      	movs	r3, #2
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002162:	2302      	movs	r3, #2
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fb90 	bl	8002890 <HAL_RCC_OscConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002176:	f000 f834 	bl	80021e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800217a:	230f      	movs	r3, #15
 800217c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217e:	2303      	movs	r3, #3
 8002180:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	2105      	movs	r1, #5
 8002192:	4618      	mov	r0, r3
 8002194:	f000 ff96 	bl	80030c4 <HAL_RCC_ClockConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800219e:	f000 f820 	bl	80021e2 <Error_Handler>
  }
}
 80021a2:	bf00      	nop
 80021a4:	3758      	adds	r7, #88	; 0x58
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e009      	b.n	80021d0 <_write+0x26>
 {
	ITM_SendChar(*ptr++);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	60ba      	str	r2, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f8c1 	bl	800134c <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3301      	adds	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dbf1      	blt.n	80021bc <_write+0x12>

 }
 return len;
 80021d8:	687b      	ldr	r3, [r7, #4]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021e6:	b672      	cpsid	i
}
 80021e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ea:	e7fe      	b.n	80021ea <Error_Handler+0x8>

080021ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_MspInit+0x44>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_MspInit+0x44>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6613      	str	r3, [r2, #96]	; 0x60
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_MspInit+0x44>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_MspInit+0x44>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_MspInit+0x44>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_MspInit+0x44>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <NMI_Handler+0x4>

0800223a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002280:	f000 f93c 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a2:	f001 fe5d 	bl	8003f60 <__errno>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
  return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffe7 	bl	8002298 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ca:	e7fe      	b.n	80022ca <_exit+0x12>

080022cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e00a      	b.n	80022f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022de:	f3af 8000 	nop.w
 80022e2:	4601      	mov	r1, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	b2ca      	uxtb	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf0      	blt.n	80022de <_read+0x12>
  }

  return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232e:	605a      	str	r2, [r3, #4]
  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_isatty>:

int _isatty(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f001 fdde 	bl	8003f60 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200a0000 	.word	0x200a0000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	200001f8 	.word	0x200001f8
 80023d8:	20000210 	.word	0x20000210

080023dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002404:	f7ff ffea 	bl	80023dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <LoopForever+0x6>)
  ldr r1, =_edata
 800240a:	490d      	ldr	r1, [pc, #52]	; (8002440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <LoopForever+0xe>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <LoopForever+0x16>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242e:	f001 fd9d 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002432:	f7ff f94f 	bl	80016d4 <main>

08002436 <LoopForever>:

LoopForever:
    b LoopForever
 8002436:	e7fe      	b.n	8002436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002438:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002444:	0800705c 	.word	0x0800705c
  ldr r2, =_sbss
 8002448:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800244c:	20000210 	.word	0x20000210

08002450 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_IRQHandler>

08002452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f000 f91f 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002462:	2000      	movs	r0, #0
 8002464:	f000 f80e 	bl	8002484 <HAL_InitTick>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e001      	b.n	8002478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002474:	f7ff feba 	bl	80021ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002478:	79fb      	ldrb	r3, [r7, #7]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_InitTick+0x6c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_InitTick+0x70>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_InitTick+0x6c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f91d 	bl	80026ee <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d809      	bhi.n	80024d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 f8f5 	bl	80026b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_InitTick+0x74>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e007      	b.n	80024e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e004      	b.n	80024e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e001      	b.n	80024e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008
 8002520:	200001fc 	.word	0x200001fc

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200001fc 	.word	0x200001fc

0800253c <__NVIC_SetPriorityGrouping>:
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_SetPriority>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <SysTick_Config>:
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f7ff ff8e 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff47 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026c8:	f7ff ff5c 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff8e 	bl	80025f4 <NVIC_EncodePriority>
 80026d8:	4602      	mov	r2, r0
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff5d 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffb0 	bl	800265c <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_PWREx_GetVoltageRange+0x3c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002718:	d102      	bne.n	8002720 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800271a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800271e:	e00b      	b.n	8002738 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272e:	d102      	bne.n	8002736 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002734:	e000      	b.n	8002738 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002736:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000

08002748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d141      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002756:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d131      	bne.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276a:	4a46      	ldr	r2, [pc, #280]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277c:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2232      	movs	r2, #50	; 0x32
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	4a3f      	ldr	r2, [pc, #252]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	0c9b      	lsrs	r3, r3, #18
 8002796:	3301      	adds	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800279a:	e002      	b.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3b01      	subs	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d102      	bne.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f2      	bne.n	800279c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	d158      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e057      	b.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027c8:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027d8:	e04d      	b.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e0:	d141      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d131      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f6:	4a23      	ldr	r2, [pc, #140]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002808:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2232      	movs	r2, #50	; 0x32
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	3301      	adds	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002826:	e002      	b.n	800282e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3b01      	subs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d102      	bne.n	8002842 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f2      	bne.n	8002828 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d112      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e011      	b.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002864:	e007      	b.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002874:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40007000 	.word	0x40007000
 8002888:	20000000 	.word	0x20000000
 800288c:	431bde83 	.word	0x431bde83

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f000 bc08 	b.w	80030b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a4:	4b96      	ldr	r3, [pc, #600]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ae:	4b94      	ldr	r3, [pc, #592]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80e4 	beq.w	8002a8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_OscConfig+0x4c>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	f040 808b 	bne.w	80029ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 8087 	bne.w	80029ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028dc:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x64>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e3df      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_RCC_OscConfig+0x7e>
 8002904:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290c:	e005      	b.n	800291a <HAL_RCC_OscConfig+0x8a>
 800290e:	4b7c      	ldr	r3, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291a:	4293      	cmp	r3, r2
 800291c:	d223      	bcs.n	8002966 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd94 	bl	8003450 <RCC_SetFlashLatencyFromMSIRange>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e3c0      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002932:	4b73      	ldr	r3, [pc, #460]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a72      	ldr	r2, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b70      	ldr	r3, [pc, #448]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	496d      	ldr	r1, [pc, #436]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002950:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	4968      	ldr	r1, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
 8002964:	e025      	b.n	80029b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002966:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4960      	ldr	r1, [pc, #384]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002984:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	495b      	ldr	r1, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fd54 	bl	8003450 <RCC_SetFlashLatencyFromMSIRange>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e380      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b2:	f000 fcc1 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	4950      	ldr	r1, [pc, #320]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_RCC_OscConfig+0x278>)
 80029d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_RCC_OscConfig+0x27c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd54 	bl	8002484 <HAL_InitTick>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d052      	beq.n	8002a8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	e364      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d032      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fe:	f7ff fd91 	bl	8002524 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a06:	f7ff fd8d 	bl	8002524 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e34d      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4930      	ldr	r1, [pc, #192]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	492b      	ldr	r1, [pc, #172]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e01a      	b.n	8002a8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a64:	f7ff fd5e 	bl	8002524 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6c:	f7ff fd5a 	bl	8002524 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e31a      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1dc>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d073      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x21c>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d063      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d15f      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e2f7      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x24c>
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e025      	b.n	8002b28 <HAL_RCC_OscConfig+0x298>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae4:	d114      	bne.n	8002b10 <HAL_RCC_OscConfig+0x280>
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a02      	ldr	r2, [pc, #8]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e013      	b.n	8002b28 <HAL_RCC_OscConfig+0x298>
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08006c3c 	.word	0x08006c3c
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	4ba0      	ldr	r3, [pc, #640]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a9f      	ldr	r2, [pc, #636]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b9d      	ldr	r3, [pc, #628]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a9c      	ldr	r2, [pc, #624]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7ff fcf8 	bl	8002524 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7ff fcf4 	bl	8002524 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e2b4      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2a8>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff fce4 	bl	8002524 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7ff fce0 	bl	8002524 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e2a0      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d0>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d060      	beq.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x310>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d116      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x328>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e27d      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4973      	ldr	r1, [pc, #460]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	e040      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6e      	ldr	r2, [pc, #440]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7ff fc9f 	bl	8002524 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7ff fc9b 	bl	8002524 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e25b      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	4b65      	ldr	r3, [pc, #404]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b62      	ldr	r3, [pc, #392]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	495f      	ldr	r1, [pc, #380]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5c      	ldr	r2, [pc, #368]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7ff fc7b 	bl	8002524 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7ff fc77 	bl	8002524 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e237      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4b4b      	ldr	r3, [pc, #300]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6a:	4a4a      	ldr	r2, [pc, #296]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7ff fc56 	bl	8002524 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7ff fc52 	bl	8002524 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e212      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3ec>
 8002c9c:	e01b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7ff fc39 	bl	8002524 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7ff fc35 	bl	8002524 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1f5      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ef      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a6 	beq.w	8002e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002d00:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7ff fbfc 	bl	8002524 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7ff fbf8 	bl	8002524 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1b8      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d8>
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d66:	e029      	b.n	8002dbc <HAL_RCC_OscConfig+0x52c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d115      	bne.n	8002d9c <HAL_RCC_OscConfig+0x50c>
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x52c>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	4b9d      	ldr	r3, [pc, #628]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	4a9c      	ldr	r2, [pc, #624]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dac:	4b99      	ldr	r3, [pc, #612]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	4a98      	ldr	r2, [pc, #608]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7ff fbae 	bl	8002524 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7ff fbaa 	bl	8002524 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e168      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	4b8c      	ldr	r3, [pc, #560]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ed      	beq.n	8002dcc <HAL_RCC_OscConfig+0x53c>
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7ff fb97 	bl	8002524 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7ff fb93 	bl	8002524 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e151      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e10:	4b80      	ldr	r3, [pc, #512]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ed      	bne.n	8002dfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a7a      	ldr	r2, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e44:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e4a:	4a72      	ldr	r2, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7ff fb66 	bl	8002524 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5c:	f7ff fb62 	bl	8002524 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e122      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e6e:	4b69      	ldr	r3, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <HAL_RCC_OscConfig+0x5cc>
 8002e7c:	e01b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e84:	4a63      	ldr	r2, [pc, #396]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7ff fb49 	bl	8002524 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e96:	f7ff fb45 	bl	8002524 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e105      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea8:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80f9 	beq.w	80030b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f040 80cf 	bne.w	8003068 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eca:	4b52      	ldr	r3, [pc, #328]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d12c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d123      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d11b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d113      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d109      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d071      	beq.n	800301c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d068      	beq.n	8003010 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f3e:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0ac      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f66:	f7ff fadd 	bl	8002524 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7ff fad9 	bl	8002524 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e099      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_RCC_OscConfig+0x788>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa6:	0212      	lsls	r2, r2, #8
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0552      	lsls	r2, r2, #21
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fba:	0852      	lsrs	r2, r2, #1
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	0652      	lsls	r2, r2, #25
 8002fc0:	4311      	orrs	r1, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc6:	06d2      	lsls	r2, r2, #27
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	4912      	ldr	r1, [pc, #72]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe8:	f7ff fa9c 	bl	8002524 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7ff fa98 	bl	8002524 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e058      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_RCC_OscConfig+0x784>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300e:	e050      	b.n	80030b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04f      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
 8003014:	40021000 	.word	0x40021000
 8003018:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d144      	bne.n	80030b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 800302e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a20      	ldr	r2, [pc, #128]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003040:	f7ff fa70 	bl	8002524 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7ff fa6c 	bl	8002524 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e02c      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x7b8>
 8003066:	e024      	b.n	80030b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d01f      	beq.n	80030ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 8003074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7ff fa53 	bl	8002524 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7ff fa4f 	bl	8002524 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e00f      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	4905      	ldr	r1, [pc, #20]	; (80030bc <HAL_RCC_OscConfig+0x82c>)
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_OscConfig+0x830>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	60cb      	str	r3, [r1, #12]
 80030ac:	e001      	b.n	80030b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	feeefffc 	.word	0xfeeefffc

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e11d      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b90      	ldr	r3, [pc, #576]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b8d      	ldr	r3, [pc, #564]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	498b      	ldr	r1, [pc, #556]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b89      	ldr	r3, [pc, #548]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e105      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b7e      	ldr	r3, [pc, #504]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	497b      	ldr	r1, [pc, #492]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d079      	beq.n	800323a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d11e      	bne.n	800318c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b75      	ldr	r3, [pc, #468]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0dc      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800315e:	f000 f9d1 	bl	8003504 <RCC_GetSysClockFreqFromPLLSource>
 8003162:	4603      	mov	r3, r0
 8003164:	4a70      	ldr	r2, [pc, #448]	; (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d946      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800316a:	4b6e      	ldr	r3, [pc, #440]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d140      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003176:	4b6b      	ldr	r3, [pc, #428]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317e:	4a69      	ldr	r2, [pc, #420]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003184:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e035      	b.n	80031f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003194:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0b9      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0ad      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031bc:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0a5      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80031cc:	f000 f8b4 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a55      	ldr	r2, [pc, #340]	; (8003328 <HAL_RCC_ClockConfig+0x264>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d90f      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031d8:	4b52      	ldr	r3, [pc, #328]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031e4:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80031ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 0203 	bic.w	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4947      	ldr	r1, [pc, #284]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320a:	f7ff f98b 	bl	8002524 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003210:	e00a      	b.n	8003228 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003212:	f7ff f987 	bl	8002524 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e077      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 020c 	and.w	r2, r3, #12
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	429a      	cmp	r2, r3
 8003238:	d1eb      	bne.n	8003212 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d105      	bne.n	800324c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a37      	ldr	r2, [pc, #220]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003264:	429a      	cmp	r2, r3
 8003266:	d208      	bcs.n	800327a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	492b      	ldr	r1, [pc, #172]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d210      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003288:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 020f 	bic.w	r2, r3, #15
 8003290:	4923      	ldr	r1, [pc, #140]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_ClockConfig+0x25c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e036      	b.n	8003318 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4918      	ldr	r1, [pc, #96]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4910      	ldr	r1, [pc, #64]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e8:	f000 f826 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_ClockConfig+0x260>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <HAL_RCC_ClockConfig+0x268>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x26c>)
 8003306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_ClockConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f8b9 	bl	8002484 <HAL_InitTick>
 8003312:	4603      	mov	r3, r0
 8003314:	73fb      	strb	r3, [r7, #15]

  return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40022000 	.word	0x40022000
 8003324:	40021000 	.word	0x40021000
 8003328:	04c4b400 	.word	0x04c4b400
 800332c:	08006c3c 	.word	0x08006c3c
 8003330:	20000000 	.word	0x20000000
 8003334:	20000004 	.word	0x20000004

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x34>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d121      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d11e      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e005      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003394:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_GetSysClockFreq+0x110>)
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e004      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_RCC_GetSysClockFreq+0x114>)
 80033be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d134      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0xa6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d003      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xac>
 80033dc:	e005      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCC_GetSysClockFreq+0x110>)
 80033e0:	617b      	str	r3, [r7, #20]
      break;
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_GetSysClockFreq+0x114>)
 80033e6:	617b      	str	r3, [r7, #20]
      break;
 80033e8:	e002      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	617b      	str	r3, [r7, #20]
      break;
 80033ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	fb03 f202 	mul.w	r2, r3, r2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0e5b      	lsrs	r3, r3, #25
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	3301      	adds	r3, #1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003430:	69bb      	ldr	r3, [r7, #24]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	08006c4c 	.word	0x08006c4c
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200

08003450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003468:	f7ff f94e 	bl	8002708 <HAL_PWREx_GetVoltageRange>
 800346c:	6178      	str	r0, [r7, #20]
 800346e:	e014      	b.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	4b22      	ldr	r3, [pc, #136]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	4a21      	ldr	r2, [pc, #132]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	6593      	str	r3, [r2, #88]	; 0x58
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003488:	f7ff f93e 	bl	8002708 <HAL_PWREx_GetVoltageRange>
 800348c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d10b      	bne.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d913      	bls.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2ba0      	cmp	r3, #160	; 0xa0
 80034ac:	d902      	bls.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ae:	2302      	movs	r3, #2
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e00d      	b.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b4:	2301      	movs	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e00a      	b.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b7f      	cmp	r3, #127	; 0x7f
 80034be:	d902      	bls.n	80034c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80034c0:	2302      	movs	r3, #2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e004      	b.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b70      	cmp	r3, #112	; 0x70
 80034ca:	d101      	bne.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034cc:	2301      	movs	r3, #1
 80034ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 020f 	bic.w	r2, r3, #15
 80034d8:	4909      	ldr	r1, [pc, #36]	; (8003500 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d001      	beq.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	40022000 	.word	0x40022000

08003504 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d00b      	beq.n	8003532 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d825      	bhi.n	800356c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d008      	beq.n	8003538 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d11f      	bne.n	800356c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800352e:	613b      	str	r3, [r7, #16]
    break;
 8003530:	e01f      	b.n	8003572 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003534:	613b      	str	r3, [r7, #16]
    break;
 8003536:	e01c      	b.n	8003572 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e005      	b.n	8003560 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003560:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	613b      	str	r3, [r7, #16]
    break;
 800356a:	e002      	b.n	8003572 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
    break;
 8003570:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	3301      	adds	r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	fb03 f202 	mul.w	r2, r3, r2
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0e5b      	lsrs	r3, r3, #25
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80035b2:	683b      	ldr	r3, [r7, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40021000 	.word	0x40021000
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	08006c4c 	.word	0x08006c4c

080035d0 <arm_std_f32>:
 80035d0:	2901      	cmp	r1, #1
 80035d2:	d97d      	bls.n	80036d0 <arm_std_f32+0x100>
 80035d4:	b530      	push	{r4, r5, lr}
 80035d6:	ed2d 8b02 	vpush	{d8}
 80035da:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80036e0 <arm_std_f32+0x110>
 80035de:	088d      	lsrs	r5, r1, #2
 80035e0:	b083      	sub	sp, #12
 80035e2:	eef0 4a47 	vmov.f32	s9, s14
 80035e6:	d028      	beq.n	800363a <arm_std_f32+0x6a>
 80035e8:	f100 0310 	add.w	r3, r0, #16
 80035ec:	462c      	mov	r4, r5
 80035ee:	ed53 7a04 	vldr	s15, [r3, #-16]
 80035f2:	ed13 5a03 	vldr	s10, [r3, #-12]
 80035f6:	ed53 5a02 	vldr	s11, [r3, #-8]
 80035fa:	ed13 6a01 	vldr	s12, [r3, #-4]
 80035fe:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003602:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8003606:	ee36 7a87 	vadd.f32	s14, s13, s14
 800360a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800360e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8003612:	ee76 6a87 	vadd.f32	s13, s13, s14
 8003616:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800361a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800361e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8003622:	ee26 7a06 	vmul.f32	s14, s12, s12
 8003626:	3c01      	subs	r4, #1
 8003628:	ee77 4a86 	vadd.f32	s9, s15, s12
 800362c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003630:	f103 0310 	add.w	r3, r3, #16
 8003634:	d1db      	bne.n	80035ee <arm_std_f32+0x1e>
 8003636:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800363a:	f011 0303 	ands.w	r3, r1, #3
 800363e:	d01b      	beq.n	8003678 <arm_std_f32+0xa8>
 8003640:	edd0 7a00 	vldr	s15, [r0]
 8003644:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003648:	3b01      	subs	r3, #1
 800364a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800364e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003652:	d011      	beq.n	8003678 <arm_std_f32+0xa8>
 8003654:	edd0 7a01 	vldr	s15, [r0, #4]
 8003658:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800365c:	2b01      	cmp	r3, #1
 800365e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003662:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003666:	d007      	beq.n	8003678 <arm_std_f32+0xa8>
 8003668:	edd0 7a02 	vldr	s15, [r0, #8]
 800366c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003670:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003674:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003678:	ee07 1a90 	vmov	s15, r1
 800367c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003680:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003684:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8003688:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 800368c:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8003690:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8003694:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8003698:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800369c:	ee30 0a66 	vsub.f32	s0, s0, s13
 80036a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	db0c      	blt.n	80036c4 <arm_std_f32+0xf4>
 80036aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80036b6:	d40e      	bmi.n	80036d6 <arm_std_f32+0x106>
 80036b8:	ed82 8a00 	vstr	s16, [r2]
 80036bc:	b003      	add	sp, #12
 80036be:	ecbd 8b02 	vpop	{d8}
 80036c2:	bd30      	pop	{r4, r5, pc}
 80036c4:	2300      	movs	r3, #0
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	b003      	add	sp, #12
 80036ca:	ecbd 8b02 	vpop	{d8}
 80036ce:	bd30      	pop	{r4, r5, pc}
 80036d0:	2300      	movs	r3, #0
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4770      	bx	lr
 80036d6:	9201      	str	r2, [sp, #4]
 80036d8:	f003 f9b6 	bl	8006a48 <sqrtf>
 80036dc:	9a01      	ldr	r2, [sp, #4]
 80036de:	e7eb      	b.n	80036b8 <arm_std_f32+0xe8>
 80036e0:	00000000 	.word	0x00000000

080036e4 <arm_mean_f32>:
 80036e4:	b430      	push	{r4, r5}
 80036e6:	088d      	lsrs	r5, r1, #2
 80036e8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800375c <arm_mean_f32+0x78>
 80036ec:	d018      	beq.n	8003720 <arm_mean_f32+0x3c>
 80036ee:	f100 0310 	add.w	r3, r0, #16
 80036f2:	462c      	mov	r4, r5
 80036f4:	ed53 5a04 	vldr	s11, [r3, #-16]
 80036f8:	ed13 6a03 	vldr	s12, [r3, #-12]
 80036fc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8003700:	ed13 7a01 	vldr	s14, [r3, #-4]
 8003704:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003708:	3c01      	subs	r4, #1
 800370a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800370e:	f103 0310 	add.w	r3, r3, #16
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800371a:	d1eb      	bne.n	80036f4 <arm_mean_f32+0x10>
 800371c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8003720:	f011 0303 	ands.w	r3, r1, #3
 8003724:	d00f      	beq.n	8003746 <arm_mean_f32+0x62>
 8003726:	ed90 7a00 	vldr	s14, [r0]
 800372a:	3b01      	subs	r3, #1
 800372c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003730:	d009      	beq.n	8003746 <arm_mean_f32+0x62>
 8003732:	ed90 7a01 	vldr	s14, [r0, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800373c:	bf1c      	itt	ne
 800373e:	ed90 7a02 	vldrne	s14, [r0, #8]
 8003742:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8003746:	ee07 1a10 	vmov	s14, r1
 800374a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800374e:	bc30      	pop	{r4, r5}
 8003750:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003754:	edc2 6a00 	vstr	s13, [r2]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	00000000 	.word	0x00000000

08003760 <arm_conv_f32>:
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	b08b      	sub	sp, #44	; 0x2c
 8003766:	4299      	cmp	r1, r3
 8003768:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800376a:	d205      	bcs.n	8003778 <arm_conv_f32+0x18>
 800376c:	4606      	mov	r6, r0
 800376e:	460c      	mov	r4, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	4632      	mov	r2, r6
 8003776:	4623      	mov	r3, r4
 8003778:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800377c:	3101      	adds	r1, #1
 800377e:	1ac9      	subs	r1, r1, r3
 8003780:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003784:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003788:	9101      	str	r1, [sp, #4]
 800378a:	1e59      	subs	r1, r3, #1
 800378c:	eb02 070b 	add.w	r7, r2, fp
 8003790:	f000 8277 	beq.w	8003c82 <arm_conv_f32+0x522>
 8003794:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003a54 <arm_conv_f32+0x2f4>
 8003798:	f102 0904 	add.w	r9, r2, #4
 800379c:	46aa      	mov	sl, r5
 800379e:	4680      	mov	r8, r0
 80037a0:	2401      	movs	r4, #1
 80037a2:	f014 0603 	ands.w	r6, r4, #3
 80037a6:	d01b      	beq.n	80037e0 <arm_conv_f32+0x80>
 80037a8:	ed92 7a00 	vldr	s14, [r2]
 80037ac:	edd8 6a00 	vldr	s13, [r8]
 80037b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037b4:	3e01      	subs	r6, #1
 80037b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ba:	d011      	beq.n	80037e0 <arm_conv_f32+0x80>
 80037bc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80037c0:	edd8 6a01 	vldr	s13, [r8, #4]
 80037c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037c8:	2e01      	cmp	r6, #1
 80037ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ce:	d007      	beq.n	80037e0 <arm_conv_f32+0x80>
 80037d0:	ed98 7a02 	vldr	s14, [r8, #8]
 80037d4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80037d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037e0:	3401      	adds	r4, #1
 80037e2:	42a3      	cmp	r3, r4
 80037e4:	ecea 7a01 	vstmia	sl!, {s15}
 80037e8:	464a      	mov	r2, r9
 80037ea:	d03a      	beq.n	8003862 <arm_conv_f32+0x102>
 80037ec:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80037f0:	f000 824c 	beq.w	8003c8c <arm_conv_f32+0x52c>
 80037f4:	f100 0210 	add.w	r2, r0, #16
 80037f8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80037fc:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003a54 <arm_conv_f32+0x2f4>
 8003800:	eb02 0c08 	add.w	ip, r2, r8
 8003804:	f1a9 0610 	sub.w	r6, r9, #16
 8003808:	ed12 7a04 	vldr	s14, [r2, #-16]
 800380c:	edd6 3a04 	vldr	s7, [r6, #16]
 8003810:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003814:	ed96 4a03 	vldr	s8, [r6, #12]
 8003818:	ed52 6a02 	vldr	s13, [r2, #-8]
 800381c:	edd6 4a02 	vldr	s9, [r6, #8]
 8003820:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003824:	ed96 5a01 	vldr	s10, [r6, #4]
 8003828:	ee27 7a23 	vmul.f32	s14, s14, s7
 800382c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003834:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003838:	ee76 7a27 	vadd.f32	s15, s12, s15
 800383c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003844:	3210      	adds	r2, #16
 8003846:	4594      	cmp	ip, r2
 8003848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384c:	f1a6 0610 	sub.w	r6, r6, #16
 8003850:	d1da      	bne.n	8003808 <arm_conv_f32+0xa8>
 8003852:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8003856:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800385a:	4480      	add	r8, r0
 800385c:	f109 0904 	add.w	r9, r9, #4
 8003860:	e79f      	b.n	80037a2 <arm_conv_f32+0x42>
 8003862:	2b03      	cmp	r3, #3
 8003864:	445d      	add	r5, fp
 8003866:	f240 80e9 	bls.w	8003a3c <arm_conv_f32+0x2dc>
 800386a:	9b01      	ldr	r3, [sp, #4]
 800386c:	089a      	lsrs	r2, r3, #2
 800386e:	9202      	str	r2, [sp, #8]
 8003870:	f000 8203 	beq.w	8003c7a <arm_conv_f32+0x51a>
 8003874:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8003878:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	f004 0603 	and.w	r6, r4, #3
 8003882:	9203      	str	r2, [sp, #12]
 8003884:	f1a3 0a10 	sub.w	sl, r3, #16
 8003888:	f1a3 020c 	sub.w	r2, r3, #12
 800388c:	3b08      	subs	r3, #8
 800388e:	9204      	str	r2, [sp, #16]
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	f106 39ff 	add.w	r9, r6, #4294967295
 8003896:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800389a:	9a03      	ldr	r2, [sp, #12]
 800389c:	f100 0c1c 	add.w	ip, r0, #28
 80038a0:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80038a4:	464c      	mov	r4, r9
 80038a6:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80038aa:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80038ae:	f1a7 0310 	sub.w	r3, r7, #16
 80038b2:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80038b6:	eb05 0b02 	add.w	fp, r5, r2
 80038ba:	461f      	mov	r7, r3
 80038bc:	3510      	adds	r5, #16
 80038be:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8003a54 <arm_conv_f32+0x2f4>
 80038c2:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80038c6:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80038ca:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80038ce:	eeb0 5a46 	vmov.f32	s10, s12
 80038d2:	eef0 4a46 	vmov.f32	s9, s12
 80038d6:	eef0 5a46 	vmov.f32	s11, s12
 80038da:	463a      	mov	r2, r7
 80038dc:	4663      	mov	r3, ip
 80038de:	4641      	mov	r1, r8
 80038e0:	edd2 6a04 	vldr	s13, [r2, #16]
 80038e4:	ed13 0a04 	vldr	s0, [r3, #-16]
 80038e8:	ed92 7a03 	vldr	s14, [r2, #12]
 80038ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80038f0:	edd2 0a01 	vldr	s1, [r2, #4]
 80038f4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80038f8:	ee62 3a26 	vmul.f32	s7, s4, s13
 80038fc:	ee61 2a26 	vmul.f32	s5, s2, s13
 8003900:	ed13 1a03 	vldr	s2, [r3, #-12]
 8003904:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003908:	ee21 4a87 	vmul.f32	s8, s3, s14
 800390c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8003910:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003914:	ee22 3a07 	vmul.f32	s6, s4, s14
 8003918:	ed53 1a02 	vldr	s3, [r3, #-8]
 800391c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8003920:	ee36 6a86 	vadd.f32	s12, s13, s12
 8003924:	ee60 3a07 	vmul.f32	s7, s0, s14
 8003928:	ee27 7a01 	vmul.f32	s14, s14, s2
 800392c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8003930:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003934:	ee74 2a22 	vadd.f32	s5, s8, s5
 8003938:	ee60 4a27 	vmul.f32	s9, s0, s15
 800393c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8003940:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003944:	ed13 2a01 	vldr	s4, [r3, #-4]
 8003948:	ee21 5a27 	vmul.f32	s10, s2, s15
 800394c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8003950:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003958:	ee34 4a22 	vadd.f32	s8, s8, s5
 800395c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8003960:	ee21 3a20 	vmul.f32	s6, s2, s1
 8003964:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003968:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800396c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8003970:	3901      	subs	r1, #1
 8003972:	f1a2 0210 	sub.w	r2, r2, #16
 8003976:	ee75 5a84 	vadd.f32	s11, s11, s8
 800397a:	ee73 4a24 	vadd.f32	s9, s6, s9
 800397e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8003982:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003986:	f103 0310 	add.w	r3, r3, #16
 800398a:	d1a9      	bne.n	80038e0 <arm_conv_f32+0x180>
 800398c:	eb0a 030c 	add.w	r3, sl, ip
 8003990:	2e00      	cmp	r6, #0
 8003992:	d042      	beq.n	8003a1a <arm_conv_f32+0x2ba>
 8003994:	edde 7a00 	vldr	s15, [lr]
 8003998:	ed93 4a00 	vldr	s8, [r3]
 800399c:	ee61 6a27 	vmul.f32	s13, s2, s15
 80039a0:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80039a4:	ee22 7a27 	vmul.f32	s14, s4, s15
 80039a8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80039ac:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80039b0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80039b4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80039b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80039bc:	eb09 030c 	add.w	r3, r9, ip
 80039c0:	b35c      	cbz	r4, 8003a1a <arm_conv_f32+0x2ba>
 80039c2:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80039c6:	edd3 6a00 	vldr	s13, [r3]
 80039ca:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80039ce:	ee22 3a27 	vmul.f32	s6, s4, s15
 80039d2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80039d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039da:	2c01      	cmp	r4, #1
 80039dc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80039e0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80039e4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80039e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80039ec:	eb00 030c 	add.w	r3, r0, ip
 80039f0:	d013      	beq.n	8003a1a <arm_conv_f32+0x2ba>
 80039f2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80039f6:	edd3 3a00 	vldr	s7, [r3]
 80039fa:	ee62 7a07 	vmul.f32	s15, s4, s14
 80039fe:	ee27 4a04 	vmul.f32	s8, s14, s8
 8003a02:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003a06:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003a0a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003a0e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003a12:	ee35 5a26 	vadd.f32	s10, s10, s13
 8003a16:	ee36 6a07 	vadd.f32	s12, s12, s14
 8003a1a:	45ab      	cmp	fp, r5
 8003a1c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8003a20:	ed45 4a03 	vstr	s9, [r5, #-12]
 8003a24:	ed05 5a02 	vstr	s10, [r5, #-8]
 8003a28:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003a2c:	f10c 0c10 	add.w	ip, ip, #16
 8003a30:	f105 0310 	add.w	r3, r5, #16
 8003a34:	f000 809e 	beq.w	8003b74 <arm_conv_f32+0x414>
 8003a38:	461d      	mov	r5, r3
 8003a3a:	e740      	b.n	80038be <arm_conv_f32+0x15e>
 8003a3c:	9a01      	ldr	r2, [sp, #4]
 8003a3e:	46ac      	mov	ip, r5
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	d037      	beq.n	8003ab4 <arm_conv_f32+0x354>
 8003a44:	9a01      	ldr	r2, [sp, #4]
 8003a46:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8003a54 <arm_conv_f32+0x2f4>
 8003a4a:	0096      	lsls	r6, r2, #2
 8003a4c:	eb05 0c06 	add.w	ip, r5, r6
 8003a50:	4604      	mov	r4, r0
 8003a52:	e021      	b.n	8003a98 <arm_conv_f32+0x338>
 8003a54:	00000000 	.word	0x00000000
 8003a58:	edd7 7a00 	vldr	s15, [r7]
 8003a5c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a64:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003a68:	b189      	cbz	r1, 8003a8e <arm_conv_f32+0x32e>
 8003a6a:	ed17 7a01 	vldr	s14, [r7, #-4]
 8003a6e:	edd4 6a01 	vldr	s13, [r4, #4]
 8003a72:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a7c:	d007      	beq.n	8003a8e <arm_conv_f32+0x32e>
 8003a7e:	ed94 7a02 	vldr	s14, [r4, #8]
 8003a82:	ed57 6a02 	vldr	s13, [r7, #-8]
 8003a86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a8e:	ece5 7a01 	vstmia	r5!, {s15}
 8003a92:	4565      	cmp	r5, ip
 8003a94:	4614      	mov	r4, r2
 8003a96:	d00a      	beq.n	8003aae <arm_conv_f32+0x34e>
 8003a98:	4622      	mov	r2, r4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1dc      	bne.n	8003a58 <arm_conv_f32+0x2f8>
 8003a9e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8003a54 <arm_conv_f32+0x2f4>
 8003aa2:	ece5 7a01 	vstmia	r5!, {s15}
 8003aa6:	1d22      	adds	r2, r4, #4
 8003aa8:	4565      	cmp	r5, ip
 8003aaa:	4614      	mov	r4, r2
 8003aac:	d1f4      	bne.n	8003a98 <arm_conv_f32+0x338>
 8003aae:	4430      	add	r0, r6
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d059      	beq.n	8003b68 <arm_conv_f32+0x408>
 8003ab4:	088d      	lsrs	r5, r1, #2
 8003ab6:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8003a54 <arm_conv_f32+0x2f4>
 8003aba:	d058      	beq.n	8003b6e <arm_conv_f32+0x40e>
 8003abc:	f100 0210 	add.w	r2, r0, #16
 8003ac0:	f1a7 0310 	sub.w	r3, r7, #16
 8003ac4:	462c      	mov	r4, r5
 8003ac6:	ed52 6a04 	vldr	s13, [r2, #-16]
 8003aca:	edd3 3a04 	vldr	s7, [r3, #16]
 8003ace:	ed12 7a03 	vldr	s14, [r2, #-12]
 8003ad2:	ed93 4a03 	vldr	s8, [r3, #12]
 8003ad6:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003ada:	edd3 4a02 	vldr	s9, [r3, #8]
 8003ade:	ed12 6a01 	vldr	s12, [r2, #-4]
 8003ae2:	ed93 5a01 	vldr	s10, [r3, #4]
 8003ae6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003aea:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003aee:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003af2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003af6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003afa:	ee66 6a05 	vmul.f32	s13, s12, s10
 8003afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b02:	3c01      	subs	r4, #1
 8003b04:	f102 0210 	add.w	r2, r2, #16
 8003b08:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8003b0c:	f1a3 0310 	sub.w	r3, r3, #16
 8003b10:	d1d9      	bne.n	8003ac6 <arm_conv_f32+0x366>
 8003b12:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8003b16:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8003b1a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8003b1e:	f011 0203 	ands.w	r2, r1, #3
 8003b22:	d01b      	beq.n	8003b5c <arm_conv_f32+0x3fc>
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ed95 7a00 	vldr	s14, [r5]
 8003b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b30:	3a01      	subs	r2, #1
 8003b32:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003b36:	d011      	beq.n	8003b5c <arm_conv_f32+0x3fc>
 8003b38:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003b3c:	ed95 7a01 	vldr	s14, [r5, #4]
 8003b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b44:	2a01      	cmp	r2, #1
 8003b46:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003b4a:	d007      	beq.n	8003b5c <arm_conv_f32+0x3fc>
 8003b4c:	edd5 7a02 	vldr	s15, [r5, #8]
 8003b50:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b58:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003b5c:	3901      	subs	r1, #1
 8003b5e:	ecec 5a01 	vstmia	ip!, {s11}
 8003b62:	f100 0004 	add.w	r0, r0, #4
 8003b66:	d1a5      	bne.n	8003ab4 <arm_conv_f32+0x354>
 8003b68:	b00b      	add	sp, #44	; 0x2c
 8003b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4605      	mov	r5, r0
 8003b72:	e7d4      	b.n	8003b1e <arm_conv_f32+0x3be>
 8003b74:	9b02      	ldr	r3, [sp, #8]
 8003b76:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	9302      	str	r3, [sp, #8]
 8003b7e:	9b03      	ldr	r3, [sp, #12]
 8003b80:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8003b84:	4403      	add	r3, r0
 8003b86:	465d      	mov	r5, fp
 8003b88:	469e      	mov	lr, r3
 8003b8a:	9b01      	ldr	r3, [sp, #4]
 8003b8c:	f013 0c03 	ands.w	ip, r3, #3
 8003b90:	d075      	beq.n	8003c7e <arm_conv_f32+0x51e>
 8003b92:	9b02      	ldr	r3, [sp, #8]
 8003b94:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8003b98:	f004 0403 	and.w	r4, r4, #3
 8003b9c:	f104 3bff 	add.w	fp, r4, #4294967295
 8003ba0:	f103 0801 	add.w	r8, r3, #1
 8003ba4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8003ba8:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8003bac:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8003bb0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003bb4:	f1a7 0210 	sub.w	r2, r7, #16
 8003bb8:	4618      	mov	r0, r3
 8003bba:	465b      	mov	r3, fp
 8003bbc:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8003bc0:	468b      	mov	fp, r1
 8003bc2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4617      	mov	r7, r2
 8003bca:	461c      	mov	r4, r3
 8003bcc:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8003a54 <arm_conv_f32+0x2f4>
 8003bd0:	f10e 0210 	add.w	r2, lr, #16
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	4656      	mov	r6, sl
 8003bd8:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003bdc:	edd3 3a04 	vldr	s7, [r3, #16]
 8003be0:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003be4:	ed93 4a03 	vldr	s8, [r3, #12]
 8003be8:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003bec:	edd3 4a02 	vldr	s9, [r3, #8]
 8003bf0:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003bf4:	ed93 5a01 	vldr	s10, [r3, #4]
 8003bf8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003bfc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c04:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003c08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003c0c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c14:	3e01      	subs	r6, #1
 8003c16:	f102 0210 	add.w	r2, r2, #16
 8003c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1e:	f1a3 0310 	sub.w	r3, r3, #16
 8003c22:	d1d9      	bne.n	8003bd8 <arm_conv_f32+0x478>
 8003c24:	4486      	add	lr, r0
 8003c26:	b1d1      	cbz	r1, 8003c5e <arm_conv_f32+0x4fe>
 8003c28:	ed99 7a00 	vldr	s14, [r9]
 8003c2c:	edde 6a00 	vldr	s13, [lr]
 8003c30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c38:	b18c      	cbz	r4, 8003c5e <arm_conv_f32+0x4fe>
 8003c3a:	ed19 7a01 	vldr	s14, [r9, #-4]
 8003c3e:	edde 6a01 	vldr	s13, [lr, #4]
 8003c42:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c46:	2c01      	cmp	r4, #1
 8003c48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c4c:	d007      	beq.n	8003c5e <arm_conv_f32+0x4fe>
 8003c4e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8003c52:	ed59 6a02 	vldr	s13, [r9, #-8]
 8003c56:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c5e:	ece5 7a01 	vstmia	r5!, {s15}
 8003c62:	4565      	cmp	r5, ip
 8003c64:	46c6      	mov	lr, r8
 8003c66:	f108 0804 	add.w	r8, r8, #4
 8003c6a:	d1af      	bne.n	8003bcc <arm_conv_f32+0x46c>
 8003c6c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8003c70:	4659      	mov	r1, fp
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003c78:	e71c      	b.n	8003ab4 <arm_conv_f32+0x354>
 8003c7a:	4686      	mov	lr, r0
 8003c7c:	e785      	b.n	8003b8a <arm_conv_f32+0x42a>
 8003c7e:	46ac      	mov	ip, r5
 8003c80:	e7f7      	b.n	8003c72 <arm_conv_f32+0x512>
 8003c82:	9a01      	ldr	r2, [sp, #4]
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	f47f aedd 	bne.w	8003a44 <arm_conv_f32+0x2e4>
 8003c8a:	e76d      	b.n	8003b68 <arm_conv_f32+0x408>
 8003c8c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8003a54 <arm_conv_f32+0x2f4>
 8003c90:	4680      	mov	r8, r0
 8003c92:	e5e3      	b.n	800385c <arm_conv_f32+0xfc>

08003c94 <arm_sub_f32>:
 8003c94:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003c98:	b4f0      	push	{r4, r5, r6, r7}
 8003c9a:	d033      	beq.n	8003d04 <arm_sub_f32+0x70>
 8003c9c:	f100 0610 	add.w	r6, r0, #16
 8003ca0:	f101 0510 	add.w	r5, r1, #16
 8003ca4:	f102 0410 	add.w	r4, r2, #16
 8003ca8:	4667      	mov	r7, ip
 8003caa:	ed15 7a04 	vldr	s14, [r5, #-16]
 8003cae:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cb6:	3f01      	subs	r7, #1
 8003cb8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003cbc:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003cc0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cc8:	f106 0610 	add.w	r6, r6, #16
 8003ccc:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003cd0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003cd4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8003cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cdc:	f105 0510 	add.w	r5, r5, #16
 8003ce0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003ce4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003ce8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cf0:	f104 0410 	add.w	r4, r4, #16
 8003cf4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003cf8:	d1d7      	bne.n	8003caa <arm_sub_f32+0x16>
 8003cfa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8003cfe:	4420      	add	r0, r4
 8003d00:	4421      	add	r1, r4
 8003d02:	4422      	add	r2, r4
 8003d04:	f013 0303 	ands.w	r3, r3, #3
 8003d08:	d01b      	beq.n	8003d42 <arm_sub_f32+0xae>
 8003d0a:	edd0 7a00 	vldr	s15, [r0]
 8003d0e:	ed91 7a00 	vldr	s14, [r1]
 8003d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d16:	3b01      	subs	r3, #1
 8003d18:	edc2 7a00 	vstr	s15, [r2]
 8003d1c:	d011      	beq.n	8003d42 <arm_sub_f32+0xae>
 8003d1e:	edd0 7a01 	vldr	s15, [r0, #4]
 8003d22:	ed91 7a01 	vldr	s14, [r1, #4]
 8003d26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	edc2 7a01 	vstr	s15, [r2, #4]
 8003d30:	d007      	beq.n	8003d42 <arm_sub_f32+0xae>
 8003d32:	edd0 7a02 	vldr	s15, [r0, #8]
 8003d36:	ed91 7a02 	vldr	s14, [r1, #8]
 8003d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d3e:	edc2 7a02 	vstr	s15, [r2, #8]
 8003d42:	bcf0      	pop	{r4, r5, r6, r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop

08003d48 <arm_mult_f32>:
 8003d48:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003d4c:	b4f0      	push	{r4, r5, r6, r7}
 8003d4e:	d033      	beq.n	8003db8 <arm_mult_f32+0x70>
 8003d50:	f100 0610 	add.w	r6, r0, #16
 8003d54:	f101 0510 	add.w	r5, r1, #16
 8003d58:	f102 0410 	add.w	r4, r2, #16
 8003d5c:	4667      	mov	r7, ip
 8003d5e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8003d62:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d6a:	3f01      	subs	r7, #1
 8003d6c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003d70:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003d74:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d7c:	f106 0610 	add.w	r6, r6, #16
 8003d80:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003d84:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003d88:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8003d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d90:	f105 0510 	add.w	r5, r5, #16
 8003d94:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003d98:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003d9c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da4:	f104 0410 	add.w	r4, r4, #16
 8003da8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003dac:	d1d7      	bne.n	8003d5e <arm_mult_f32+0x16>
 8003dae:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8003db2:	4420      	add	r0, r4
 8003db4:	4421      	add	r1, r4
 8003db6:	4422      	add	r2, r4
 8003db8:	f013 0303 	ands.w	r3, r3, #3
 8003dbc:	d01b      	beq.n	8003df6 <arm_mult_f32+0xae>
 8003dbe:	edd1 7a00 	vldr	s15, [r1]
 8003dc2:	ed90 7a00 	vldr	s14, [r0]
 8003dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	edc2 7a00 	vstr	s15, [r2]
 8003dd0:	d011      	beq.n	8003df6 <arm_mult_f32+0xae>
 8003dd2:	edd0 7a01 	vldr	s15, [r0, #4]
 8003dd6:	ed91 7a01 	vldr	s14, [r1, #4]
 8003dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	edc2 7a01 	vstr	s15, [r2, #4]
 8003de4:	d007      	beq.n	8003df6 <arm_mult_f32+0xae>
 8003de6:	edd0 7a02 	vldr	s15, [r0, #8]
 8003dea:	ed91 7a02 	vldr	s14, [r1, #8]
 8003dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df2:	edc2 7a02 	vstr	s15, [r2, #8]
 8003df6:	bcf0      	pop	{r4, r5, r6, r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <arm_dot_prod_f32>:
 8003dfc:	b4f0      	push	{r4, r5, r6, r7}
 8003dfe:	0897      	lsrs	r7, r2, #2
 8003e00:	eddf 5a29 	vldr	s11, [pc, #164]	; 8003ea8 <arm_dot_prod_f32+0xac>
 8003e04:	d02d      	beq.n	8003e62 <arm_dot_prod_f32+0x66>
 8003e06:	f100 0510 	add.w	r5, r0, #16
 8003e0a:	f101 0410 	add.w	r4, r1, #16
 8003e0e:	463e      	mov	r6, r7
 8003e10:	ed55 6a04 	vldr	s13, [r5, #-16]
 8003e14:	ed54 3a04 	vldr	s7, [r4, #-16]
 8003e18:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003e1c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003e20:	ed55 7a02 	vldr	s15, [r5, #-8]
 8003e24:	ed54 4a02 	vldr	s9, [r4, #-8]
 8003e28:	ed15 6a01 	vldr	s12, [r5, #-4]
 8003e2c:	ed14 5a01 	vldr	s10, [r4, #-4]
 8003e30:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003e34:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003e38:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003e3c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003e40:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003e44:	ee66 6a05 	vmul.f32	s13, s12, s10
 8003e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e4c:	3e01      	subs	r6, #1
 8003e4e:	f105 0510 	add.w	r5, r5, #16
 8003e52:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8003e56:	f104 0410 	add.w	r4, r4, #16
 8003e5a:	d1d9      	bne.n	8003e10 <arm_dot_prod_f32+0x14>
 8003e5c:	013f      	lsls	r7, r7, #4
 8003e5e:	4438      	add	r0, r7
 8003e60:	4439      	add	r1, r7
 8003e62:	f012 0203 	ands.w	r2, r2, #3
 8003e66:	d01b      	beq.n	8003ea0 <arm_dot_prod_f32+0xa4>
 8003e68:	edd1 7a00 	vldr	s15, [r1]
 8003e6c:	ed90 7a00 	vldr	s14, [r0]
 8003e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e74:	3a01      	subs	r2, #1
 8003e76:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003e7a:	d011      	beq.n	8003ea0 <arm_dot_prod_f32+0xa4>
 8003e7c:	edd1 7a01 	vldr	s15, [r1, #4]
 8003e80:	ed90 7a01 	vldr	s14, [r0, #4]
 8003e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e88:	2a01      	cmp	r2, #1
 8003e8a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003e8e:	d007      	beq.n	8003ea0 <arm_dot_prod_f32+0xa4>
 8003e90:	edd0 7a02 	vldr	s15, [r0, #8]
 8003e94:	ed91 7a02 	vldr	s14, [r1, #8]
 8003e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e9c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003ea0:	edc3 5a00 	vstr	s11, [r3]
 8003ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	00000000 	.word	0x00000000

08003eac <arm_add_f32>:
 8003eac:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003eb0:	b4f0      	push	{r4, r5, r6, r7}
 8003eb2:	d033      	beq.n	8003f1c <arm_add_f32+0x70>
 8003eb4:	f100 0610 	add.w	r6, r0, #16
 8003eb8:	f101 0510 	add.w	r5, r1, #16
 8003ebc:	f102 0410 	add.w	r4, r2, #16
 8003ec0:	4667      	mov	r7, ip
 8003ec2:	ed15 7a04 	vldr	s14, [r5, #-16]
 8003ec6:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ece:	3f01      	subs	r7, #1
 8003ed0:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003ed4:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003ed8:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ee0:	f106 0610 	add.w	r6, r6, #16
 8003ee4:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003ee8:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003eec:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8003ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ef4:	f105 0510 	add.w	r5, r5, #16
 8003ef8:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003efc:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003f00:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f08:	f104 0410 	add.w	r4, r4, #16
 8003f0c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003f10:	d1d7      	bne.n	8003ec2 <arm_add_f32+0x16>
 8003f12:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8003f16:	4420      	add	r0, r4
 8003f18:	4421      	add	r1, r4
 8003f1a:	4422      	add	r2, r4
 8003f1c:	f013 0303 	ands.w	r3, r3, #3
 8003f20:	d01b      	beq.n	8003f5a <arm_add_f32+0xae>
 8003f22:	edd1 7a00 	vldr	s15, [r1]
 8003f26:	ed90 7a00 	vldr	s14, [r0]
 8003f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	edc2 7a00 	vstr	s15, [r2]
 8003f34:	d011      	beq.n	8003f5a <arm_add_f32+0xae>
 8003f36:	edd0 7a01 	vldr	s15, [r0, #4]
 8003f3a:	ed91 7a01 	vldr	s14, [r1, #4]
 8003f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	edc2 7a01 	vstr	s15, [r2, #4]
 8003f48:	d007      	beq.n	8003f5a <arm_add_f32+0xae>
 8003f4a:	edd0 7a02 	vldr	s15, [r0, #8]
 8003f4e:	ed91 7a02 	vldr	s14, [r1, #8]
 8003f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f56:	edc2 7a02 	vstr	s15, [r2, #8]
 8003f5a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	; (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	2000000c 	.word	0x2000000c

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4d0d      	ldr	r5, [pc, #52]	; (8003fa4 <__libc_init_array+0x38>)
 8003f70:	4c0d      	ldr	r4, [pc, #52]	; (8003fa8 <__libc_init_array+0x3c>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	2600      	movs	r6, #0
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	4d0b      	ldr	r5, [pc, #44]	; (8003fac <__libc_init_array+0x40>)
 8003f7e:	4c0c      	ldr	r4, [pc, #48]	; (8003fb0 <__libc_init_array+0x44>)
 8003f80:	f002 fe36 	bl	8006bf0 <_init>
 8003f84:	1b64      	subs	r4, r4, r5
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	2600      	movs	r6, #0
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	08007054 	.word	0x08007054
 8003fa8:	08007054 	.word	0x08007054
 8003fac:	08007054 	.word	0x08007054
 8003fb0:	08007058 	.word	0x08007058

08003fb4 <memset>:
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <__cvt>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	ec55 4b10 	vmov	r4, r5, d0
 8003fcc:	2d00      	cmp	r5, #0
 8003fce:	460e      	mov	r6, r1
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	462b      	mov	r3, r5
 8003fd4:	bfbb      	ittet	lt
 8003fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003fda:	461d      	movlt	r5, r3
 8003fdc:	2300      	movge	r3, #0
 8003fde:	232d      	movlt	r3, #45	; 0x2d
 8003fe0:	700b      	strb	r3, [r1, #0]
 8003fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fe4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fe8:	4691      	mov	r9, r2
 8003fea:	f023 0820 	bic.w	r8, r3, #32
 8003fee:	bfbc      	itt	lt
 8003ff0:	4622      	movlt	r2, r4
 8003ff2:	4614      	movlt	r4, r2
 8003ff4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ff8:	d005      	beq.n	8004006 <__cvt+0x42>
 8003ffa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ffe:	d100      	bne.n	8004002 <__cvt+0x3e>
 8004000:	3601      	adds	r6, #1
 8004002:	2102      	movs	r1, #2
 8004004:	e000      	b.n	8004008 <__cvt+0x44>
 8004006:	2103      	movs	r1, #3
 8004008:	ab03      	add	r3, sp, #12
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	ab02      	add	r3, sp, #8
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	ec45 4b10 	vmov	d0, r4, r5
 8004014:	4653      	mov	r3, sl
 8004016:	4632      	mov	r2, r6
 8004018:	f000 fcca 	bl	80049b0 <_dtoa_r>
 800401c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004020:	4607      	mov	r7, r0
 8004022:	d102      	bne.n	800402a <__cvt+0x66>
 8004024:	f019 0f01 	tst.w	r9, #1
 8004028:	d022      	beq.n	8004070 <__cvt+0xac>
 800402a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800402e:	eb07 0906 	add.w	r9, r7, r6
 8004032:	d110      	bne.n	8004056 <__cvt+0x92>
 8004034:	783b      	ldrb	r3, [r7, #0]
 8004036:	2b30      	cmp	r3, #48	; 0x30
 8004038:	d10a      	bne.n	8004050 <__cvt+0x8c>
 800403a:	2200      	movs	r2, #0
 800403c:	2300      	movs	r3, #0
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc fd99 	bl	8000b78 <__aeabi_dcmpeq>
 8004046:	b918      	cbnz	r0, 8004050 <__cvt+0x8c>
 8004048:	f1c6 0601 	rsb	r6, r6, #1
 800404c:	f8ca 6000 	str.w	r6, [sl]
 8004050:	f8da 3000 	ldr.w	r3, [sl]
 8004054:	4499      	add	r9, r3
 8004056:	2200      	movs	r2, #0
 8004058:	2300      	movs	r3, #0
 800405a:	4620      	mov	r0, r4
 800405c:	4629      	mov	r1, r5
 800405e:	f7fc fd8b 	bl	8000b78 <__aeabi_dcmpeq>
 8004062:	b108      	cbz	r0, 8004068 <__cvt+0xa4>
 8004064:	f8cd 900c 	str.w	r9, [sp, #12]
 8004068:	2230      	movs	r2, #48	; 0x30
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	454b      	cmp	r3, r9
 800406e:	d307      	bcc.n	8004080 <__cvt+0xbc>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004074:	1bdb      	subs	r3, r3, r7
 8004076:	4638      	mov	r0, r7
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	b004      	add	sp, #16
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	1c59      	adds	r1, r3, #1
 8004082:	9103      	str	r1, [sp, #12]
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e7f0      	b.n	800406a <__cvt+0xa6>

08004088 <__exponent>:
 8004088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800408a:	4603      	mov	r3, r0
 800408c:	2900      	cmp	r1, #0
 800408e:	bfb8      	it	lt
 8004090:	4249      	neglt	r1, r1
 8004092:	f803 2b02 	strb.w	r2, [r3], #2
 8004096:	bfb4      	ite	lt
 8004098:	222d      	movlt	r2, #45	; 0x2d
 800409a:	222b      	movge	r2, #43	; 0x2b
 800409c:	2909      	cmp	r1, #9
 800409e:	7042      	strb	r2, [r0, #1]
 80040a0:	dd2a      	ble.n	80040f8 <__exponent+0x70>
 80040a2:	f10d 0407 	add.w	r4, sp, #7
 80040a6:	46a4      	mov	ip, r4
 80040a8:	270a      	movs	r7, #10
 80040aa:	46a6      	mov	lr, r4
 80040ac:	460a      	mov	r2, r1
 80040ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80040b2:	fb07 1516 	mls	r5, r7, r6, r1
 80040b6:	3530      	adds	r5, #48	; 0x30
 80040b8:	2a63      	cmp	r2, #99	; 0x63
 80040ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80040be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040c2:	4631      	mov	r1, r6
 80040c4:	dcf1      	bgt.n	80040aa <__exponent+0x22>
 80040c6:	3130      	adds	r1, #48	; 0x30
 80040c8:	f1ae 0502 	sub.w	r5, lr, #2
 80040cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040d0:	1c44      	adds	r4, r0, #1
 80040d2:	4629      	mov	r1, r5
 80040d4:	4561      	cmp	r1, ip
 80040d6:	d30a      	bcc.n	80040ee <__exponent+0x66>
 80040d8:	f10d 0209 	add.w	r2, sp, #9
 80040dc:	eba2 020e 	sub.w	r2, r2, lr
 80040e0:	4565      	cmp	r5, ip
 80040e2:	bf88      	it	hi
 80040e4:	2200      	movhi	r2, #0
 80040e6:	4413      	add	r3, r2
 80040e8:	1a18      	subs	r0, r3, r0
 80040ea:	b003      	add	sp, #12
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040f6:	e7ed      	b.n	80040d4 <__exponent+0x4c>
 80040f8:	2330      	movs	r3, #48	; 0x30
 80040fa:	3130      	adds	r1, #48	; 0x30
 80040fc:	7083      	strb	r3, [r0, #2]
 80040fe:	70c1      	strb	r1, [r0, #3]
 8004100:	1d03      	adds	r3, r0, #4
 8004102:	e7f1      	b.n	80040e8 <__exponent+0x60>

08004104 <_printf_float>:
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	ed2d 8b02 	vpush	{d8}
 800410c:	b08d      	sub	sp, #52	; 0x34
 800410e:	460c      	mov	r4, r1
 8004110:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004114:	4616      	mov	r6, r2
 8004116:	461f      	mov	r7, r3
 8004118:	4605      	mov	r5, r0
 800411a:	f001 fa37 	bl	800558c <_localeconv_r>
 800411e:	f8d0 a000 	ldr.w	sl, [r0]
 8004122:	4650      	mov	r0, sl
 8004124:	f7fc f8a6 	bl	8000274 <strlen>
 8004128:	2300      	movs	r3, #0
 800412a:	930a      	str	r3, [sp, #40]	; 0x28
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	f8d8 3000 	ldr.w	r3, [r8]
 8004134:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004138:	3307      	adds	r3, #7
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	f103 0208 	add.w	r2, r3, #8
 8004142:	f8c8 2000 	str.w	r2, [r8]
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800414e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004156:	9307      	str	r3, [sp, #28]
 8004158:	f8cd 8018 	str.w	r8, [sp, #24]
 800415c:	ee08 0a10 	vmov	s16, r0
 8004160:	4b9f      	ldr	r3, [pc, #636]	; (80043e0 <_printf_float+0x2dc>)
 8004162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	f7fc fd37 	bl	8000bdc <__aeabi_dcmpun>
 800416e:	bb88      	cbnz	r0, 80041d4 <_printf_float+0xd0>
 8004170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <_printf_float+0x2dc>)
 8004176:	f04f 32ff 	mov.w	r2, #4294967295
 800417a:	f7fc fd11 	bl	8000ba0 <__aeabi_dcmple>
 800417e:	bb48      	cbnz	r0, 80041d4 <_printf_float+0xd0>
 8004180:	2200      	movs	r2, #0
 8004182:	2300      	movs	r3, #0
 8004184:	4640      	mov	r0, r8
 8004186:	4649      	mov	r1, r9
 8004188:	f7fc fd00 	bl	8000b8c <__aeabi_dcmplt>
 800418c:	b110      	cbz	r0, 8004194 <_printf_float+0x90>
 800418e:	232d      	movs	r3, #45	; 0x2d
 8004190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004194:	4b93      	ldr	r3, [pc, #588]	; (80043e4 <_printf_float+0x2e0>)
 8004196:	4894      	ldr	r0, [pc, #592]	; (80043e8 <_printf_float+0x2e4>)
 8004198:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800419c:	bf94      	ite	ls
 800419e:	4698      	movls	r8, r3
 80041a0:	4680      	movhi	r8, r0
 80041a2:	2303      	movs	r3, #3
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	9b05      	ldr	r3, [sp, #20]
 80041a8:	f023 0204 	bic.w	r2, r3, #4
 80041ac:	6022      	str	r2, [r4, #0]
 80041ae:	f04f 0900 	mov.w	r9, #0
 80041b2:	9700      	str	r7, [sp, #0]
 80041b4:	4633      	mov	r3, r6
 80041b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f9d8 	bl	8004570 <_printf_common>
 80041c0:	3001      	adds	r0, #1
 80041c2:	f040 8090 	bne.w	80042e6 <_printf_float+0x1e2>
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	b00d      	add	sp, #52	; 0x34
 80041cc:	ecbd 8b02 	vpop	{d8}
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	4642      	mov	r2, r8
 80041d6:	464b      	mov	r3, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	4649      	mov	r1, r9
 80041dc:	f7fc fcfe 	bl	8000bdc <__aeabi_dcmpun>
 80041e0:	b140      	cbz	r0, 80041f4 <_printf_float+0xf0>
 80041e2:	464b      	mov	r3, r9
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bfbc      	itt	lt
 80041e8:	232d      	movlt	r3, #45	; 0x2d
 80041ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041ee:	487f      	ldr	r0, [pc, #508]	; (80043ec <_printf_float+0x2e8>)
 80041f0:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <_printf_float+0x2ec>)
 80041f2:	e7d1      	b.n	8004198 <_printf_float+0x94>
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041fa:	9206      	str	r2, [sp, #24]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	d13f      	bne.n	8004280 <_printf_float+0x17c>
 8004200:	2306      	movs	r3, #6
 8004202:	6063      	str	r3, [r4, #4]
 8004204:	9b05      	ldr	r3, [sp, #20]
 8004206:	6861      	ldr	r1, [r4, #4]
 8004208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800420c:	2300      	movs	r3, #0
 800420e:	9303      	str	r3, [sp, #12]
 8004210:	ab0a      	add	r3, sp, #40	; 0x28
 8004212:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004216:	ab09      	add	r3, sp, #36	; 0x24
 8004218:	ec49 8b10 	vmov	d0, r8, r9
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6022      	str	r2, [r4, #0]
 8004220:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004224:	4628      	mov	r0, r5
 8004226:	f7ff fecd 	bl	8003fc4 <__cvt>
 800422a:	9b06      	ldr	r3, [sp, #24]
 800422c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800422e:	2b47      	cmp	r3, #71	; 0x47
 8004230:	4680      	mov	r8, r0
 8004232:	d108      	bne.n	8004246 <_printf_float+0x142>
 8004234:	1cc8      	adds	r0, r1, #3
 8004236:	db02      	blt.n	800423e <_printf_float+0x13a>
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	4299      	cmp	r1, r3
 800423c:	dd41      	ble.n	80042c2 <_printf_float+0x1be>
 800423e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004242:	fa5f fb8b 	uxtb.w	fp, fp
 8004246:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800424a:	d820      	bhi.n	800428e <_printf_float+0x18a>
 800424c:	3901      	subs	r1, #1
 800424e:	465a      	mov	r2, fp
 8004250:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004254:	9109      	str	r1, [sp, #36]	; 0x24
 8004256:	f7ff ff17 	bl	8004088 <__exponent>
 800425a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425c:	1813      	adds	r3, r2, r0
 800425e:	2a01      	cmp	r2, #1
 8004260:	4681      	mov	r9, r0
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	dc02      	bgt.n	800426c <_printf_float+0x168>
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	07d2      	lsls	r2, r2, #31
 800426a:	d501      	bpl.n	8004270 <_printf_float+0x16c>
 800426c:	3301      	adds	r3, #1
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004274:	2b00      	cmp	r3, #0
 8004276:	d09c      	beq.n	80041b2 <_printf_float+0xae>
 8004278:	232d      	movs	r3, #45	; 0x2d
 800427a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427e:	e798      	b.n	80041b2 <_printf_float+0xae>
 8004280:	9a06      	ldr	r2, [sp, #24]
 8004282:	2a47      	cmp	r2, #71	; 0x47
 8004284:	d1be      	bne.n	8004204 <_printf_float+0x100>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1bc      	bne.n	8004204 <_printf_float+0x100>
 800428a:	2301      	movs	r3, #1
 800428c:	e7b9      	b.n	8004202 <_printf_float+0xfe>
 800428e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004292:	d118      	bne.n	80042c6 <_printf_float+0x1c2>
 8004294:	2900      	cmp	r1, #0
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	dd0b      	ble.n	80042b2 <_printf_float+0x1ae>
 800429a:	6121      	str	r1, [r4, #16]
 800429c:	b913      	cbnz	r3, 80042a4 <_printf_float+0x1a0>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	07d0      	lsls	r0, r2, #31
 80042a2:	d502      	bpl.n	80042aa <_printf_float+0x1a6>
 80042a4:	3301      	adds	r3, #1
 80042a6:	440b      	add	r3, r1
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80042ac:	f04f 0900 	mov.w	r9, #0
 80042b0:	e7de      	b.n	8004270 <_printf_float+0x16c>
 80042b2:	b913      	cbnz	r3, 80042ba <_printf_float+0x1b6>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	07d2      	lsls	r2, r2, #31
 80042b8:	d501      	bpl.n	80042be <_printf_float+0x1ba>
 80042ba:	3302      	adds	r3, #2
 80042bc:	e7f4      	b.n	80042a8 <_printf_float+0x1a4>
 80042be:	2301      	movs	r3, #1
 80042c0:	e7f2      	b.n	80042a8 <_printf_float+0x1a4>
 80042c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80042c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c8:	4299      	cmp	r1, r3
 80042ca:	db05      	blt.n	80042d8 <_printf_float+0x1d4>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	6121      	str	r1, [r4, #16]
 80042d0:	07d8      	lsls	r0, r3, #31
 80042d2:	d5ea      	bpl.n	80042aa <_printf_float+0x1a6>
 80042d4:	1c4b      	adds	r3, r1, #1
 80042d6:	e7e7      	b.n	80042a8 <_printf_float+0x1a4>
 80042d8:	2900      	cmp	r1, #0
 80042da:	bfd4      	ite	le
 80042dc:	f1c1 0202 	rsble	r2, r1, #2
 80042e0:	2201      	movgt	r2, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	e7e0      	b.n	80042a8 <_printf_float+0x1a4>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	055a      	lsls	r2, r3, #21
 80042ea:	d407      	bmi.n	80042fc <_printf_float+0x1f8>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	4642      	mov	r2, r8
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	d12c      	bne.n	8004354 <_printf_float+0x250>
 80042fa:	e764      	b.n	80041c6 <_printf_float+0xc2>
 80042fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004300:	f240 80e0 	bls.w	80044c4 <_printf_float+0x3c0>
 8004304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	f7fc fc34 	bl	8000b78 <__aeabi_dcmpeq>
 8004310:	2800      	cmp	r0, #0
 8004312:	d034      	beq.n	800437e <_printf_float+0x27a>
 8004314:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <_printf_float+0x2f0>)
 8004316:	2301      	movs	r3, #1
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f af51 	beq.w	80041c6 <_printf_float+0xc2>
 8004324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004328:	429a      	cmp	r2, r3
 800432a:	db02      	blt.n	8004332 <_printf_float+0x22e>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	07d8      	lsls	r0, r3, #31
 8004330:	d510      	bpl.n	8004354 <_printf_float+0x250>
 8004332:	ee18 3a10 	vmov	r3, s16
 8004336:	4652      	mov	r2, sl
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	f43f af41 	beq.w	80041c6 <_printf_float+0xc2>
 8004344:	f04f 0800 	mov.w	r8, #0
 8004348:	f104 091a 	add.w	r9, r4, #26
 800434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	4543      	cmp	r3, r8
 8004352:	dc09      	bgt.n	8004368 <_printf_float+0x264>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	079b      	lsls	r3, r3, #30
 8004358:	f100 8105 	bmi.w	8004566 <_printf_float+0x462>
 800435c:	68e0      	ldr	r0, [r4, #12]
 800435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004360:	4298      	cmp	r0, r3
 8004362:	bfb8      	it	lt
 8004364:	4618      	movlt	r0, r3
 8004366:	e730      	b.n	80041ca <_printf_float+0xc6>
 8004368:	2301      	movs	r3, #1
 800436a:	464a      	mov	r2, r9
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af27 	beq.w	80041c6 <_printf_float+0xc2>
 8004378:	f108 0801 	add.w	r8, r8, #1
 800437c:	e7e6      	b.n	800434c <_printf_float+0x248>
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc39      	bgt.n	80043f8 <_printf_float+0x2f4>
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <_printf_float+0x2f0>)
 8004386:	2301      	movs	r3, #1
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	f43f af19 	beq.w	80041c6 <_printf_float+0xc2>
 8004394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004398:	4313      	orrs	r3, r2
 800439a:	d102      	bne.n	80043a2 <_printf_float+0x29e>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	07d9      	lsls	r1, r3, #31
 80043a0:	d5d8      	bpl.n	8004354 <_printf_float+0x250>
 80043a2:	ee18 3a10 	vmov	r3, s16
 80043a6:	4652      	mov	r2, sl
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	f43f af09 	beq.w	80041c6 <_printf_float+0xc2>
 80043b4:	f04f 0900 	mov.w	r9, #0
 80043b8:	f104 0a1a 	add.w	sl, r4, #26
 80043bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043be:	425b      	negs	r3, r3
 80043c0:	454b      	cmp	r3, r9
 80043c2:	dc01      	bgt.n	80043c8 <_printf_float+0x2c4>
 80043c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c6:	e792      	b.n	80042ee <_printf_float+0x1ea>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4652      	mov	r2, sl
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f aef7 	beq.w	80041c6 <_printf_float+0xc2>
 80043d8:	f109 0901 	add.w	r9, r9, #1
 80043dc:	e7ee      	b.n	80043bc <_printf_float+0x2b8>
 80043de:	bf00      	nop
 80043e0:	7fefffff 	.word	0x7fefffff
 80043e4:	08006c80 	.word	0x08006c80
 80043e8:	08006c84 	.word	0x08006c84
 80043ec:	08006c8c 	.word	0x08006c8c
 80043f0:	08006c88 	.word	0x08006c88
 80043f4:	08006c90 	.word	0x08006c90
 80043f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bfa8      	it	ge
 8004400:	461a      	movge	r2, r3
 8004402:	2a00      	cmp	r2, #0
 8004404:	4691      	mov	r9, r2
 8004406:	dc37      	bgt.n	8004478 <_printf_float+0x374>
 8004408:	f04f 0b00 	mov.w	fp, #0
 800440c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004410:	f104 021a 	add.w	r2, r4, #26
 8004414:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004416:	9305      	str	r3, [sp, #20]
 8004418:	eba3 0309 	sub.w	r3, r3, r9
 800441c:	455b      	cmp	r3, fp
 800441e:	dc33      	bgt.n	8004488 <_printf_float+0x384>
 8004420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004424:	429a      	cmp	r2, r3
 8004426:	db3b      	blt.n	80044a0 <_printf_float+0x39c>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d438      	bmi.n	80044a0 <_printf_float+0x39c>
 800442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004430:	9a05      	ldr	r2, [sp, #20]
 8004432:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004434:	1a9a      	subs	r2, r3, r2
 8004436:	eba3 0901 	sub.w	r9, r3, r1
 800443a:	4591      	cmp	r9, r2
 800443c:	bfa8      	it	ge
 800443e:	4691      	movge	r9, r2
 8004440:	f1b9 0f00 	cmp.w	r9, #0
 8004444:	dc35      	bgt.n	80044b2 <_printf_float+0x3ae>
 8004446:	f04f 0800 	mov.w	r8, #0
 800444a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800444e:	f104 0a1a 	add.w	sl, r4, #26
 8004452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	eba3 0309 	sub.w	r3, r3, r9
 800445c:	4543      	cmp	r3, r8
 800445e:	f77f af79 	ble.w	8004354 <_printf_float+0x250>
 8004462:	2301      	movs	r3, #1
 8004464:	4652      	mov	r2, sl
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	f43f aeaa 	beq.w	80041c6 <_printf_float+0xc2>
 8004472:	f108 0801 	add.w	r8, r8, #1
 8004476:	e7ec      	b.n	8004452 <_printf_float+0x34e>
 8004478:	4613      	mov	r3, r2
 800447a:	4631      	mov	r1, r6
 800447c:	4642      	mov	r2, r8
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	d1c0      	bne.n	8004408 <_printf_float+0x304>
 8004486:	e69e      	b.n	80041c6 <_printf_float+0xc2>
 8004488:	2301      	movs	r3, #1
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	9205      	str	r2, [sp, #20]
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f ae97 	beq.w	80041c6 <_printf_float+0xc2>
 8004498:	9a05      	ldr	r2, [sp, #20]
 800449a:	f10b 0b01 	add.w	fp, fp, #1
 800449e:	e7b9      	b.n	8004414 <_printf_float+0x310>
 80044a0:	ee18 3a10 	vmov	r3, s16
 80044a4:	4652      	mov	r2, sl
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	47b8      	blx	r7
 80044ac:	3001      	adds	r0, #1
 80044ae:	d1be      	bne.n	800442e <_printf_float+0x32a>
 80044b0:	e689      	b.n	80041c6 <_printf_float+0xc2>
 80044b2:	9a05      	ldr	r2, [sp, #20]
 80044b4:	464b      	mov	r3, r9
 80044b6:	4442      	add	r2, r8
 80044b8:	4631      	mov	r1, r6
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	d1c1      	bne.n	8004446 <_printf_float+0x342>
 80044c2:	e680      	b.n	80041c6 <_printf_float+0xc2>
 80044c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044c6:	2a01      	cmp	r2, #1
 80044c8:	dc01      	bgt.n	80044ce <_printf_float+0x3ca>
 80044ca:	07db      	lsls	r3, r3, #31
 80044cc:	d538      	bpl.n	8004540 <_printf_float+0x43c>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4642      	mov	r2, r8
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	f43f ae74 	beq.w	80041c6 <_printf_float+0xc2>
 80044de:	ee18 3a10 	vmov	r3, s16
 80044e2:	4652      	mov	r2, sl
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f ae6b 	beq.w	80041c6 <_printf_float+0xc2>
 80044f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044f4:	2200      	movs	r2, #0
 80044f6:	2300      	movs	r3, #0
 80044f8:	f7fc fb3e 	bl	8000b78 <__aeabi_dcmpeq>
 80044fc:	b9d8      	cbnz	r0, 8004536 <_printf_float+0x432>
 80044fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004500:	f108 0201 	add.w	r2, r8, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	d10e      	bne.n	800452e <_printf_float+0x42a>
 8004510:	e659      	b.n	80041c6 <_printf_float+0xc2>
 8004512:	2301      	movs	r3, #1
 8004514:	4652      	mov	r2, sl
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae52 	beq.w	80041c6 <_printf_float+0xc2>
 8004522:	f108 0801 	add.w	r8, r8, #1
 8004526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	4543      	cmp	r3, r8
 800452c:	dcf1      	bgt.n	8004512 <_printf_float+0x40e>
 800452e:	464b      	mov	r3, r9
 8004530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004534:	e6dc      	b.n	80042f0 <_printf_float+0x1ec>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f104 0a1a 	add.w	sl, r4, #26
 800453e:	e7f2      	b.n	8004526 <_printf_float+0x422>
 8004540:	2301      	movs	r3, #1
 8004542:	4642      	mov	r2, r8
 8004544:	e7df      	b.n	8004506 <_printf_float+0x402>
 8004546:	2301      	movs	r3, #1
 8004548:	464a      	mov	r2, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae38 	beq.w	80041c6 <_printf_float+0xc2>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800455e:	1a5b      	subs	r3, r3, r1
 8004560:	4543      	cmp	r3, r8
 8004562:	dcf0      	bgt.n	8004546 <_printf_float+0x442>
 8004564:	e6fa      	b.n	800435c <_printf_float+0x258>
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	f104 0919 	add.w	r9, r4, #25
 800456e:	e7f4      	b.n	800455a <_printf_float+0x456>

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4616      	mov	r6, r2
 8004576:	4699      	mov	r9, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfb8      	it	lt
 8004584:	4613      	movlt	r3, r2
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800458c:	4607      	mov	r7, r0
 800458e:	460c      	mov	r4, r1
 8004590:	b10a      	cbz	r2, 8004596 <_printf_common+0x26>
 8004592:	3301      	adds	r3, #1
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	0699      	lsls	r1, r3, #26
 800459a:	bf42      	ittt	mi
 800459c:	6833      	ldrmi	r3, [r6, #0]
 800459e:	3302      	addmi	r3, #2
 80045a0:	6033      	strmi	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	f015 0506 	ands.w	r5, r5, #6
 80045a8:	d106      	bne.n	80045b8 <_printf_common+0x48>
 80045aa:	f104 0a19 	add.w	sl, r4, #25
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	dc26      	bgt.n	8004606 <_printf_common+0x96>
 80045b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045bc:	1e13      	subs	r3, r2, #0
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	bf18      	it	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	0692      	lsls	r2, r2, #26
 80045c6:	d42b      	bmi.n	8004620 <_printf_common+0xb0>
 80045c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045cc:	4649      	mov	r1, r9
 80045ce:	4638      	mov	r0, r7
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d01e      	beq.n	8004614 <_printf_common+0xa4>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	68e5      	ldr	r5, [r4, #12]
 80045da:	6832      	ldr	r2, [r6, #0]
 80045dc:	f003 0306 	and.w	r3, r3, #6
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	bf08      	it	eq
 80045e4:	1aad      	subeq	r5, r5, r2
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	bf0c      	ite	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	2500      	movne	r5, #0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bfc4      	itt	gt
 80045f6:	1a9b      	subgt	r3, r3, r2
 80045f8:	18ed      	addgt	r5, r5, r3
 80045fa:	2600      	movs	r6, #0
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xc8>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xa8>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4649      	mov	r1, r9
 800460c:	4638      	mov	r0, r7
 800460e:	47c0      	blx	r8
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xac>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c6      	b.n	80045ae <_printf_common+0x3e>
 8004620:	18e1      	adds	r1, r4, r3
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	2030      	movs	r0, #48	; 0x30
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462a:	4422      	add	r2, r4
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004634:	3302      	adds	r3, #2
 8004636:	e7c7      	b.n	80045c8 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa4>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x8e>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	7e0f      	ldrb	r7, [r1, #24]
 8004652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004654:	2f78      	cmp	r7, #120	; 0x78
 8004656:	4691      	mov	r9, r2
 8004658:	4680      	mov	r8, r0
 800465a:	460c      	mov	r4, r1
 800465c:	469a      	mov	sl, r3
 800465e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	; 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d8 	beq.w	800481e <_printf_i+0x1d2>
 800466e:	2f58      	cmp	r7, #88	; 0x58
 8004670:	f000 80a3 	beq.w	80047ba <_printf_i+0x16e>
 8004674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a101      	add	r1, pc, #4	; (adr r1, 800468c <_printf_i+0x40>)
 8004688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	08004805 	.word	0x08004805
 80046bc:	08004729 	.word	0x08004729
 80046c0:	080047e7 	.word	0x080047e7
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004827 	.word	0x08004827
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047ef 	.word	0x080047ef
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	602a      	str	r2, [r5, #0]
 80046ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a3      	b.n	8004840 <_printf_i+0x1f4>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	6829      	ldr	r1, [r5, #0]
 80046fc:	0606      	lsls	r6, r0, #24
 80046fe:	f101 0304 	add.w	r3, r1, #4
 8004702:	d50a      	bpl.n	800471a <_printf_i+0xce>
 8004704:	680e      	ldr	r6, [r1, #0]
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	2e00      	cmp	r6, #0
 800470a:	da03      	bge.n	8004714 <_printf_i+0xc8>
 800470c:	232d      	movs	r3, #45	; 0x2d
 800470e:	4276      	negs	r6, r6
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004714:	485e      	ldr	r0, [pc, #376]	; (8004890 <_printf_i+0x244>)
 8004716:	230a      	movs	r3, #10
 8004718:	e019      	b.n	800474e <_printf_i+0x102>
 800471a:	680e      	ldr	r6, [r1, #0]
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004722:	bf18      	it	ne
 8004724:	b236      	sxthne	r6, r6
 8004726:	e7ef      	b.n	8004708 <_printf_i+0xbc>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	6029      	str	r1, [r5, #0]
 8004730:	0601      	lsls	r1, r0, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xec>
 8004734:	681e      	ldr	r6, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0xf2>
 8004738:	0646      	lsls	r6, r0, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xe8>
 800473c:	881e      	ldrh	r6, [r3, #0]
 800473e:	4854      	ldr	r0, [pc, #336]	; (8004890 <_printf_i+0x244>)
 8004740:	2f6f      	cmp	r7, #111	; 0x6f
 8004742:	bf0c      	ite	eq
 8004744:	2308      	moveq	r3, #8
 8004746:	230a      	movne	r3, #10
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474e:	6865      	ldr	r5, [r4, #4]
 8004750:	60a5      	str	r5, [r4, #8]
 8004752:	2d00      	cmp	r5, #0
 8004754:	bfa2      	ittt	ge
 8004756:	6821      	ldrge	r1, [r4, #0]
 8004758:	f021 0104 	bicge.w	r1, r1, #4
 800475c:	6021      	strge	r1, [r4, #0]
 800475e:	b90e      	cbnz	r6, 8004764 <_printf_i+0x118>
 8004760:	2d00      	cmp	r5, #0
 8004762:	d04d      	beq.n	8004800 <_printf_i+0x1b4>
 8004764:	4615      	mov	r5, r2
 8004766:	fbb6 f1f3 	udiv	r1, r6, r3
 800476a:	fb03 6711 	mls	r7, r3, r1, r6
 800476e:	5dc7      	ldrb	r7, [r0, r7]
 8004770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004774:	4637      	mov	r7, r6
 8004776:	42bb      	cmp	r3, r7
 8004778:	460e      	mov	r6, r1
 800477a:	d9f4      	bls.n	8004766 <_printf_i+0x11a>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x14c>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07de      	lsls	r6, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x14c>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6861      	ldr	r1, [r4, #4]
 800478a:	4299      	cmp	r1, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	; 0x30
 8004790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004794:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004798:	1b52      	subs	r2, r2, r5
 800479a:	6122      	str	r2, [r4, #16]
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	464b      	mov	r3, r9
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fee2 	bl	8004570 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14c      	bne.n	800484a <_printf_i+0x1fe>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	4835      	ldr	r0, [pc, #212]	; (8004890 <_printf_i+0x244>)
 80047bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047c0:	6829      	ldr	r1, [r5, #0]
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047c8:	6029      	str	r1, [r5, #0]
 80047ca:	061d      	lsls	r5, r3, #24
 80047cc:	d514      	bpl.n	80047f8 <_printf_i+0x1ac>
 80047ce:	07df      	lsls	r7, r3, #31
 80047d0:	bf44      	itt	mi
 80047d2:	f043 0320 	orrmi.w	r3, r3, #32
 80047d6:	6023      	strmi	r3, [r4, #0]
 80047d8:	b91e      	cbnz	r6, 80047e2 <_printf_i+0x196>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f023 0320 	bic.w	r3, r3, #32
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	2310      	movs	r3, #16
 80047e4:	e7b0      	b.n	8004748 <_printf_i+0xfc>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f043 0320 	orr.w	r3, r3, #32
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	2378      	movs	r3, #120	; 0x78
 80047f0:	4828      	ldr	r0, [pc, #160]	; (8004894 <_printf_i+0x248>)
 80047f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f6:	e7e3      	b.n	80047c0 <_printf_i+0x174>
 80047f8:	0659      	lsls	r1, r3, #25
 80047fa:	bf48      	it	mi
 80047fc:	b2b6      	uxthmi	r6, r6
 80047fe:	e7e6      	b.n	80047ce <_printf_i+0x182>
 8004800:	4615      	mov	r5, r2
 8004802:	e7bb      	b.n	800477c <_printf_i+0x130>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	6826      	ldr	r6, [r4, #0]
 8004808:	6961      	ldr	r1, [r4, #20]
 800480a:	1d18      	adds	r0, r3, #4
 800480c:	6028      	str	r0, [r5, #0]
 800480e:	0635      	lsls	r5, r6, #24
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	d501      	bpl.n	8004818 <_printf_i+0x1cc>
 8004814:	6019      	str	r1, [r3, #0]
 8004816:	e002      	b.n	800481e <_printf_i+0x1d2>
 8004818:	0670      	lsls	r0, r6, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0x1c8>
 800481c:	8019      	strh	r1, [r3, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	4615      	mov	r5, r2
 8004824:	e7ba      	b.n	800479c <_printf_i+0x150>
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	602a      	str	r2, [r5, #0]
 800482c:	681d      	ldr	r5, [r3, #0]
 800482e:	6862      	ldr	r2, [r4, #4]
 8004830:	2100      	movs	r1, #0
 8004832:	4628      	mov	r0, r5
 8004834:	f7fb fd2c 	bl	8000290 <memchr>
 8004838:	b108      	cbz	r0, 800483e <_printf_i+0x1f2>
 800483a:	1b40      	subs	r0, r0, r5
 800483c:	6060      	str	r0, [r4, #4]
 800483e:	6863      	ldr	r3, [r4, #4]
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	2300      	movs	r3, #0
 8004844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004848:	e7a8      	b.n	800479c <_printf_i+0x150>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	462a      	mov	r2, r5
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d0ab      	beq.n	80047b0 <_printf_i+0x164>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	079b      	lsls	r3, r3, #30
 800485c:	d413      	bmi.n	8004886 <_printf_i+0x23a>
 800485e:	68e0      	ldr	r0, [r4, #12]
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	4298      	cmp	r0, r3
 8004864:	bfb8      	it	lt
 8004866:	4618      	movlt	r0, r3
 8004868:	e7a4      	b.n	80047b4 <_printf_i+0x168>
 800486a:	2301      	movs	r3, #1
 800486c:	4632      	mov	r2, r6
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	47d0      	blx	sl
 8004874:	3001      	adds	r0, #1
 8004876:	d09b      	beq.n	80047b0 <_printf_i+0x164>
 8004878:	3501      	adds	r5, #1
 800487a:	68e3      	ldr	r3, [r4, #12]
 800487c:	9903      	ldr	r1, [sp, #12]
 800487e:	1a5b      	subs	r3, r3, r1
 8004880:	42ab      	cmp	r3, r5
 8004882:	dcf2      	bgt.n	800486a <_printf_i+0x21e>
 8004884:	e7eb      	b.n	800485e <_printf_i+0x212>
 8004886:	2500      	movs	r5, #0
 8004888:	f104 0619 	add.w	r6, r4, #25
 800488c:	e7f5      	b.n	800487a <_printf_i+0x22e>
 800488e:	bf00      	nop
 8004890:	08006c92 	.word	0x08006c92
 8004894:	08006ca3 	.word	0x08006ca3

08004898 <quorem>:
 8004898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	6903      	ldr	r3, [r0, #16]
 800489e:	690c      	ldr	r4, [r1, #16]
 80048a0:	42a3      	cmp	r3, r4
 80048a2:	4607      	mov	r7, r0
 80048a4:	f2c0 8081 	blt.w	80049aa <quorem+0x112>
 80048a8:	3c01      	subs	r4, #1
 80048aa:	f101 0814 	add.w	r8, r1, #20
 80048ae:	f100 0514 	add.w	r5, r0, #20
 80048b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048c0:	3301      	adds	r3, #1
 80048c2:	429a      	cmp	r2, r3
 80048c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80048d0:	d331      	bcc.n	8004936 <quorem+0x9e>
 80048d2:	f04f 0e00 	mov.w	lr, #0
 80048d6:	4640      	mov	r0, r8
 80048d8:	46ac      	mov	ip, r5
 80048da:	46f2      	mov	sl, lr
 80048dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80048e0:	b293      	uxth	r3, r2
 80048e2:	fb06 e303 	mla	r3, r6, r3, lr
 80048e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ebaa 0303 	sub.w	r3, sl, r3
 80048f0:	f8dc a000 	ldr.w	sl, [ip]
 80048f4:	0c12      	lsrs	r2, r2, #16
 80048f6:	fa13 f38a 	uxtah	r3, r3, sl
 80048fa:	fb06 e202 	mla	r2, r6, r2, lr
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	9b00      	ldr	r3, [sp, #0]
 8004902:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004906:	b292      	uxth	r2, r2
 8004908:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800490c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004910:	f8bd 3000 	ldrh.w	r3, [sp]
 8004914:	4581      	cmp	r9, r0
 8004916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800491a:	f84c 3b04 	str.w	r3, [ip], #4
 800491e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004922:	d2db      	bcs.n	80048dc <quorem+0x44>
 8004924:	f855 300b 	ldr.w	r3, [r5, fp]
 8004928:	b92b      	cbnz	r3, 8004936 <quorem+0x9e>
 800492a:	9b01      	ldr	r3, [sp, #4]
 800492c:	3b04      	subs	r3, #4
 800492e:	429d      	cmp	r5, r3
 8004930:	461a      	mov	r2, r3
 8004932:	d32e      	bcc.n	8004992 <quorem+0xfa>
 8004934:	613c      	str	r4, [r7, #16]
 8004936:	4638      	mov	r0, r7
 8004938:	f001 f8c4 	bl	8005ac4 <__mcmp>
 800493c:	2800      	cmp	r0, #0
 800493e:	db24      	blt.n	800498a <quorem+0xf2>
 8004940:	3601      	adds	r6, #1
 8004942:	4628      	mov	r0, r5
 8004944:	f04f 0c00 	mov.w	ip, #0
 8004948:	f858 2b04 	ldr.w	r2, [r8], #4
 800494c:	f8d0 e000 	ldr.w	lr, [r0]
 8004950:	b293      	uxth	r3, r2
 8004952:	ebac 0303 	sub.w	r3, ip, r3
 8004956:	0c12      	lsrs	r2, r2, #16
 8004958:	fa13 f38e 	uxtah	r3, r3, lr
 800495c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004964:	b29b      	uxth	r3, r3
 8004966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800496a:	45c1      	cmp	r9, r8
 800496c:	f840 3b04 	str.w	r3, [r0], #4
 8004970:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004974:	d2e8      	bcs.n	8004948 <quorem+0xb0>
 8004976:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800497a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800497e:	b922      	cbnz	r2, 800498a <quorem+0xf2>
 8004980:	3b04      	subs	r3, #4
 8004982:	429d      	cmp	r5, r3
 8004984:	461a      	mov	r2, r3
 8004986:	d30a      	bcc.n	800499e <quorem+0x106>
 8004988:	613c      	str	r4, [r7, #16]
 800498a:	4630      	mov	r0, r6
 800498c:	b003      	add	sp, #12
 800498e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	3b04      	subs	r3, #4
 8004996:	2a00      	cmp	r2, #0
 8004998:	d1cc      	bne.n	8004934 <quorem+0x9c>
 800499a:	3c01      	subs	r4, #1
 800499c:	e7c7      	b.n	800492e <quorem+0x96>
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	3b04      	subs	r3, #4
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d1f0      	bne.n	8004988 <quorem+0xf0>
 80049a6:	3c01      	subs	r4, #1
 80049a8:	e7eb      	b.n	8004982 <quorem+0xea>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e7ee      	b.n	800498c <quorem+0xf4>
	...

080049b0 <_dtoa_r>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	ed2d 8b04 	vpush	{d8-d9}
 80049b8:	ec57 6b10 	vmov	r6, r7, d0
 80049bc:	b093      	sub	sp, #76	; 0x4c
 80049be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049c4:	9106      	str	r1, [sp, #24]
 80049c6:	ee10 aa10 	vmov	sl, s0
 80049ca:	4604      	mov	r4, r0
 80049cc:	9209      	str	r2, [sp, #36]	; 0x24
 80049ce:	930c      	str	r3, [sp, #48]	; 0x30
 80049d0:	46bb      	mov	fp, r7
 80049d2:	b975      	cbnz	r5, 80049f2 <_dtoa_r+0x42>
 80049d4:	2010      	movs	r0, #16
 80049d6:	f000 fddd 	bl	8005594 <malloc>
 80049da:	4602      	mov	r2, r0
 80049dc:	6260      	str	r0, [r4, #36]	; 0x24
 80049de:	b920      	cbnz	r0, 80049ea <_dtoa_r+0x3a>
 80049e0:	4ba7      	ldr	r3, [pc, #668]	; (8004c80 <_dtoa_r+0x2d0>)
 80049e2:	21ea      	movs	r1, #234	; 0xea
 80049e4:	48a7      	ldr	r0, [pc, #668]	; (8004c84 <_dtoa_r+0x2d4>)
 80049e6:	f001 fa75 	bl	8005ed4 <__assert_func>
 80049ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049ee:	6005      	str	r5, [r0, #0]
 80049f0:	60c5      	str	r5, [r0, #12]
 80049f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	b151      	cbz	r1, 8004a0e <_dtoa_r+0x5e>
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	604a      	str	r2, [r1, #4]
 80049fc:	2301      	movs	r3, #1
 80049fe:	4093      	lsls	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 fe1c 	bl	8005640 <_Bfree>
 8004a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	1e3b      	subs	r3, r7, #0
 8004a10:	bfaa      	itet	ge
 8004a12:	2300      	movge	r3, #0
 8004a14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004a18:	f8c8 3000 	strge.w	r3, [r8]
 8004a1c:	4b9a      	ldr	r3, [pc, #616]	; (8004c88 <_dtoa_r+0x2d8>)
 8004a1e:	bfbc      	itt	lt
 8004a20:	2201      	movlt	r2, #1
 8004a22:	f8c8 2000 	strlt.w	r2, [r8]
 8004a26:	ea33 030b 	bics.w	r3, r3, fp
 8004a2a:	d11b      	bne.n	8004a64 <_dtoa_r+0xb4>
 8004a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a38:	4333      	orrs	r3, r6
 8004a3a:	f000 8592 	beq.w	8005562 <_dtoa_r+0xbb2>
 8004a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a40:	b963      	cbnz	r3, 8004a5c <_dtoa_r+0xac>
 8004a42:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <_dtoa_r+0x2dc>)
 8004a44:	e022      	b.n	8004a8c <_dtoa_r+0xdc>
 8004a46:	4b92      	ldr	r3, [pc, #584]	; (8004c90 <_dtoa_r+0x2e0>)
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	9801      	ldr	r0, [sp, #4]
 8004a52:	b013      	add	sp, #76	; 0x4c
 8004a54:	ecbd 8b04 	vpop	{d8-d9}
 8004a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5c:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <_dtoa_r+0x2dc>)
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	3303      	adds	r3, #3
 8004a62:	e7f3      	b.n	8004a4c <_dtoa_r+0x9c>
 8004a64:	2200      	movs	r2, #0
 8004a66:	2300      	movs	r3, #0
 8004a68:	4650      	mov	r0, sl
 8004a6a:	4659      	mov	r1, fp
 8004a6c:	f7fc f884 	bl	8000b78 <__aeabi_dcmpeq>
 8004a70:	ec4b ab19 	vmov	d9, sl, fp
 8004a74:	4680      	mov	r8, r0
 8004a76:	b158      	cbz	r0, 8004a90 <_dtoa_r+0xe0>
 8004a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 856b 	beq.w	800555c <_dtoa_r+0xbac>
 8004a86:	4883      	ldr	r0, [pc, #524]	; (8004c94 <_dtoa_r+0x2e4>)
 8004a88:	6018      	str	r0, [r3, #0]
 8004a8a:	1e43      	subs	r3, r0, #1
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	e7df      	b.n	8004a50 <_dtoa_r+0xa0>
 8004a90:	ec4b ab10 	vmov	d0, sl, fp
 8004a94:	aa10      	add	r2, sp, #64	; 0x40
 8004a96:	a911      	add	r1, sp, #68	; 0x44
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f001 f8b9 	bl	8005c10 <__d2b>
 8004a9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004aa2:	ee08 0a10 	vmov	s16, r0
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	f000 8084 	beq.w	8004bb4 <_dtoa_r+0x204>
 8004aac:	ee19 3a90 	vmov	r3, s19
 8004ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004ab8:	4656      	mov	r6, sl
 8004aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004ac6:	4b74      	ldr	r3, [pc, #464]	; (8004c98 <_dtoa_r+0x2e8>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4630      	mov	r0, r6
 8004acc:	4639      	mov	r1, r7
 8004ace:	f7fb fc33 	bl	8000338 <__aeabi_dsub>
 8004ad2:	a365      	add	r3, pc, #404	; (adr r3, 8004c68 <_dtoa_r+0x2b8>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fde6 	bl	80006a8 <__aeabi_dmul>
 8004adc:	a364      	add	r3, pc, #400	; (adr r3, 8004c70 <_dtoa_r+0x2c0>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb fc2b 	bl	800033c <__adddf3>
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	4628      	mov	r0, r5
 8004aea:	460f      	mov	r7, r1
 8004aec:	f7fb fd72 	bl	80005d4 <__aeabi_i2d>
 8004af0:	a361      	add	r3, pc, #388	; (adr r3, 8004c78 <_dtoa_r+0x2c8>)
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f7fb fdd7 	bl	80006a8 <__aeabi_dmul>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4630      	mov	r0, r6
 8004b00:	4639      	mov	r1, r7
 8004b02:	f7fb fc1b 	bl	800033c <__adddf3>
 8004b06:	4606      	mov	r6, r0
 8004b08:	460f      	mov	r7, r1
 8004b0a:	f7fc f87d 	bl	8000c08 <__aeabi_d2iz>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	9000      	str	r0, [sp, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	4630      	mov	r0, r6
 8004b16:	4639      	mov	r1, r7
 8004b18:	f7fc f838 	bl	8000b8c <__aeabi_dcmplt>
 8004b1c:	b150      	cbz	r0, 8004b34 <_dtoa_r+0x184>
 8004b1e:	9800      	ldr	r0, [sp, #0]
 8004b20:	f7fb fd58 	bl	80005d4 <__aeabi_i2d>
 8004b24:	4632      	mov	r2, r6
 8004b26:	463b      	mov	r3, r7
 8004b28:	f7fc f826 	bl	8000b78 <__aeabi_dcmpeq>
 8004b2c:	b910      	cbnz	r0, 8004b34 <_dtoa_r+0x184>
 8004b2e:	9b00      	ldr	r3, [sp, #0]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	9b00      	ldr	r3, [sp, #0]
 8004b36:	2b16      	cmp	r3, #22
 8004b38:	d85a      	bhi.n	8004bf0 <_dtoa_r+0x240>
 8004b3a:	9a00      	ldr	r2, [sp, #0]
 8004b3c:	4b57      	ldr	r3, [pc, #348]	; (8004c9c <_dtoa_r+0x2ec>)
 8004b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	ec51 0b19 	vmov	r0, r1, d9
 8004b4a:	f7fc f81f 	bl	8000b8c <__aeabi_dcmplt>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d050      	beq.n	8004bf4 <_dtoa_r+0x244>
 8004b52:	9b00      	ldr	r3, [sp, #0]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b5e:	1b5d      	subs	r5, r3, r5
 8004b60:	1e6b      	subs	r3, r5, #1
 8004b62:	9305      	str	r3, [sp, #20]
 8004b64:	bf45      	ittet	mi
 8004b66:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b6a:	9304      	strmi	r3, [sp, #16]
 8004b6c:	2300      	movpl	r3, #0
 8004b6e:	2300      	movmi	r3, #0
 8004b70:	bf4c      	ite	mi
 8004b72:	9305      	strmi	r3, [sp, #20]
 8004b74:	9304      	strpl	r3, [sp, #16]
 8004b76:	9b00      	ldr	r3, [sp, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db3d      	blt.n	8004bf8 <_dtoa_r+0x248>
 8004b7c:	9b05      	ldr	r3, [sp, #20]
 8004b7e:	9a00      	ldr	r2, [sp, #0]
 8004b80:	920a      	str	r2, [sp, #40]	; 0x28
 8004b82:	4413      	add	r3, r2
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9307      	str	r3, [sp, #28]
 8004b8a:	9b06      	ldr	r3, [sp, #24]
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	f200 8089 	bhi.w	8004ca4 <_dtoa_r+0x2f4>
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	bfc4      	itt	gt
 8004b96:	3b04      	subgt	r3, #4
 8004b98:	9306      	strgt	r3, [sp, #24]
 8004b9a:	9b06      	ldr	r3, [sp, #24]
 8004b9c:	f1a3 0302 	sub.w	r3, r3, #2
 8004ba0:	bfcc      	ite	gt
 8004ba2:	2500      	movgt	r5, #0
 8004ba4:	2501      	movle	r5, #1
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	f200 8087 	bhi.w	8004cba <_dtoa_r+0x30a>
 8004bac:	e8df f003 	tbb	[pc, r3]
 8004bb0:	59383a2d 	.word	0x59383a2d
 8004bb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004bb8:	441d      	add	r5, r3
 8004bba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	bfc1      	itttt	gt
 8004bc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004bca:	fa0b f303 	lslgt.w	r3, fp, r3
 8004bce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004bd2:	bfda      	itte	le
 8004bd4:	f1c3 0320 	rsble	r3, r3, #32
 8004bd8:	fa06 f003 	lslle.w	r0, r6, r3
 8004bdc:	4318      	orrgt	r0, r3
 8004bde:	f7fb fce9 	bl	80005b4 <__aeabi_ui2d>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4606      	mov	r6, r0
 8004be6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004bea:	3d01      	subs	r5, #1
 8004bec:	930e      	str	r3, [sp, #56]	; 0x38
 8004bee:	e76a      	b.n	8004ac6 <_dtoa_r+0x116>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7b2      	b.n	8004b5a <_dtoa_r+0x1aa>
 8004bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004bf6:	e7b1      	b.n	8004b5c <_dtoa_r+0x1ac>
 8004bf8:	9b04      	ldr	r3, [sp, #16]
 8004bfa:	9a00      	ldr	r2, [sp, #0]
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	4253      	negs	r3, r2
 8004c02:	9307      	str	r3, [sp, #28]
 8004c04:	2300      	movs	r3, #0
 8004c06:	930a      	str	r3, [sp, #40]	; 0x28
 8004c08:	e7bf      	b.n	8004b8a <_dtoa_r+0x1da>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9308      	str	r3, [sp, #32]
 8004c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	dc55      	bgt.n	8004cc0 <_dtoa_r+0x310>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c1e:	e00c      	b.n	8004c3a <_dtoa_r+0x28a>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e7f3      	b.n	8004c0c <_dtoa_r+0x25c>
 8004c24:	2300      	movs	r3, #0
 8004c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c28:	9308      	str	r3, [sp, #32]
 8004c2a:	9b00      	ldr	r3, [sp, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	3301      	adds	r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	bfb8      	it	lt
 8004c38:	2301      	movlt	r3, #1
 8004c3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	6042      	str	r2, [r0, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	f102 0614 	add.w	r6, r2, #20
 8004c46:	429e      	cmp	r6, r3
 8004c48:	6841      	ldr	r1, [r0, #4]
 8004c4a:	d93d      	bls.n	8004cc8 <_dtoa_r+0x318>
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 fcb7 	bl	80055c0 <_Balloc>
 8004c52:	9001      	str	r0, [sp, #4]
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d13b      	bne.n	8004cd0 <_dtoa_r+0x320>
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <_dtoa_r+0x2f0>)
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c60:	e6c0      	b.n	80049e4 <_dtoa_r+0x34>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e7df      	b.n	8004c26 <_dtoa_r+0x276>
 8004c66:	bf00      	nop
 8004c68:	636f4361 	.word	0x636f4361
 8004c6c:	3fd287a7 	.word	0x3fd287a7
 8004c70:	8b60c8b3 	.word	0x8b60c8b3
 8004c74:	3fc68a28 	.word	0x3fc68a28
 8004c78:	509f79fb 	.word	0x509f79fb
 8004c7c:	3fd34413 	.word	0x3fd34413
 8004c80:	08006cc1 	.word	0x08006cc1
 8004c84:	08006cd8 	.word	0x08006cd8
 8004c88:	7ff00000 	.word	0x7ff00000
 8004c8c:	08006cbd 	.word	0x08006cbd
 8004c90:	08006cb4 	.word	0x08006cb4
 8004c94:	08006c91 	.word	0x08006c91
 8004c98:	3ff80000 	.word	0x3ff80000
 8004c9c:	08006dc8 	.word	0x08006dc8
 8004ca0:	08006d33 	.word	0x08006d33
 8004ca4:	2501      	movs	r5, #1
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9306      	str	r3, [sp, #24]
 8004caa:	9508      	str	r5, [sp, #32]
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2312      	movs	r3, #18
 8004cb8:	e7b0      	b.n	8004c1c <_dtoa_r+0x26c>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	9308      	str	r3, [sp, #32]
 8004cbe:	e7f5      	b.n	8004cac <_dtoa_r+0x2fc>
 8004cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cc6:	e7b8      	b.n	8004c3a <_dtoa_r+0x28a>
 8004cc8:	3101      	adds	r1, #1
 8004cca:	6041      	str	r1, [r0, #4]
 8004ccc:	0052      	lsls	r2, r2, #1
 8004cce:	e7b8      	b.n	8004c42 <_dtoa_r+0x292>
 8004cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd2:	9a01      	ldr	r2, [sp, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	2b0e      	cmp	r3, #14
 8004cda:	f200 809d 	bhi.w	8004e18 <_dtoa_r+0x468>
 8004cde:	2d00      	cmp	r5, #0
 8004ce0:	f000 809a 	beq.w	8004e18 <_dtoa_r+0x468>
 8004ce4:	9b00      	ldr	r3, [sp, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd32      	ble.n	8004d50 <_dtoa_r+0x3a0>
 8004cea:	4ab7      	ldr	r2, [pc, #732]	; (8004fc8 <_dtoa_r+0x618>)
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cf8:	9b00      	ldr	r3, [sp, #0]
 8004cfa:	05d8      	lsls	r0, r3, #23
 8004cfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004d00:	d516      	bpl.n	8004d30 <_dtoa_r+0x380>
 8004d02:	4bb2      	ldr	r3, [pc, #712]	; (8004fcc <_dtoa_r+0x61c>)
 8004d04:	ec51 0b19 	vmov	r0, r1, d9
 8004d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d0c:	f7fb fdf6 	bl	80008fc <__aeabi_ddiv>
 8004d10:	f007 070f 	and.w	r7, r7, #15
 8004d14:	4682      	mov	sl, r0
 8004d16:	468b      	mov	fp, r1
 8004d18:	2503      	movs	r5, #3
 8004d1a:	4eac      	ldr	r6, [pc, #688]	; (8004fcc <_dtoa_r+0x61c>)
 8004d1c:	b957      	cbnz	r7, 8004d34 <_dtoa_r+0x384>
 8004d1e:	4642      	mov	r2, r8
 8004d20:	464b      	mov	r3, r9
 8004d22:	4650      	mov	r0, sl
 8004d24:	4659      	mov	r1, fp
 8004d26:	f7fb fde9 	bl	80008fc <__aeabi_ddiv>
 8004d2a:	4682      	mov	sl, r0
 8004d2c:	468b      	mov	fp, r1
 8004d2e:	e028      	b.n	8004d82 <_dtoa_r+0x3d2>
 8004d30:	2502      	movs	r5, #2
 8004d32:	e7f2      	b.n	8004d1a <_dtoa_r+0x36a>
 8004d34:	07f9      	lsls	r1, r7, #31
 8004d36:	d508      	bpl.n	8004d4a <_dtoa_r+0x39a>
 8004d38:	4640      	mov	r0, r8
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d40:	f7fb fcb2 	bl	80006a8 <__aeabi_dmul>
 8004d44:	3501      	adds	r5, #1
 8004d46:	4680      	mov	r8, r0
 8004d48:	4689      	mov	r9, r1
 8004d4a:	107f      	asrs	r7, r7, #1
 8004d4c:	3608      	adds	r6, #8
 8004d4e:	e7e5      	b.n	8004d1c <_dtoa_r+0x36c>
 8004d50:	f000 809b 	beq.w	8004e8a <_dtoa_r+0x4da>
 8004d54:	9b00      	ldr	r3, [sp, #0]
 8004d56:	4f9d      	ldr	r7, [pc, #628]	; (8004fcc <_dtoa_r+0x61c>)
 8004d58:	425e      	negs	r6, r3
 8004d5a:	4b9b      	ldr	r3, [pc, #620]	; (8004fc8 <_dtoa_r+0x618>)
 8004d5c:	f006 020f 	and.w	r2, r6, #15
 8004d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	ec51 0b19 	vmov	r0, r1, d9
 8004d6c:	f7fb fc9c 	bl	80006a8 <__aeabi_dmul>
 8004d70:	1136      	asrs	r6, r6, #4
 8004d72:	4682      	mov	sl, r0
 8004d74:	468b      	mov	fp, r1
 8004d76:	2300      	movs	r3, #0
 8004d78:	2502      	movs	r5, #2
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d17a      	bne.n	8004e74 <_dtoa_r+0x4c4>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1d3      	bne.n	8004d2a <_dtoa_r+0x37a>
 8004d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8082 	beq.w	8004e8e <_dtoa_r+0x4de>
 8004d8a:	4b91      	ldr	r3, [pc, #580]	; (8004fd0 <_dtoa_r+0x620>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4650      	mov	r0, sl
 8004d90:	4659      	mov	r1, fp
 8004d92:	f7fb fefb 	bl	8000b8c <__aeabi_dcmplt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d079      	beq.n	8004e8e <_dtoa_r+0x4de>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d076      	beq.n	8004e8e <_dtoa_r+0x4de>
 8004da0:	9b02      	ldr	r3, [sp, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dd36      	ble.n	8004e14 <_dtoa_r+0x464>
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	4650      	mov	r0, sl
 8004daa:	4659      	mov	r1, fp
 8004dac:	1e5f      	subs	r7, r3, #1
 8004dae:	2200      	movs	r2, #0
 8004db0:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <_dtoa_r+0x624>)
 8004db2:	f7fb fc79 	bl	80006a8 <__aeabi_dmul>
 8004db6:	9e02      	ldr	r6, [sp, #8]
 8004db8:	4682      	mov	sl, r0
 8004dba:	468b      	mov	fp, r1
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7fb fc08 	bl	80005d4 <__aeabi_i2d>
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	465b      	mov	r3, fp
 8004dc8:	f7fb fc6e 	bl	80006a8 <__aeabi_dmul>
 8004dcc:	4b82      	ldr	r3, [pc, #520]	; (8004fd8 <_dtoa_r+0x628>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f7fb fab4 	bl	800033c <__adddf3>
 8004dd4:	46d0      	mov	r8, sl
 8004dd6:	46d9      	mov	r9, fp
 8004dd8:	4682      	mov	sl, r0
 8004dda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d158      	bne.n	8004e94 <_dtoa_r+0x4e4>
 8004de2:	4b7e      	ldr	r3, [pc, #504]	; (8004fdc <_dtoa_r+0x62c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f7fb faa5 	bl	8000338 <__aeabi_dsub>
 8004dee:	4652      	mov	r2, sl
 8004df0:	465b      	mov	r3, fp
 8004df2:	4680      	mov	r8, r0
 8004df4:	4689      	mov	r9, r1
 8004df6:	f7fb fee7 	bl	8000bc8 <__aeabi_dcmpgt>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f040 8295 	bne.w	800532a <_dtoa_r+0x97a>
 8004e00:	4652      	mov	r2, sl
 8004e02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e06:	4640      	mov	r0, r8
 8004e08:	4649      	mov	r1, r9
 8004e0a:	f7fb febf 	bl	8000b8c <__aeabi_dcmplt>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f040 8289 	bne.w	8005326 <_dtoa_r+0x976>
 8004e14:	ec5b ab19 	vmov	sl, fp, d9
 8004e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f2c0 8148 	blt.w	80050b0 <_dtoa_r+0x700>
 8004e20:	9a00      	ldr	r2, [sp, #0]
 8004e22:	2a0e      	cmp	r2, #14
 8004e24:	f300 8144 	bgt.w	80050b0 <_dtoa_r+0x700>
 8004e28:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <_dtoa_r+0x618>)
 8004e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f280 80d5 	bge.w	8004fe4 <_dtoa_r+0x634>
 8004e3a:	9b03      	ldr	r3, [sp, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f300 80d1 	bgt.w	8004fe4 <_dtoa_r+0x634>
 8004e42:	f040 826f 	bne.w	8005324 <_dtoa_r+0x974>
 8004e46:	4b65      	ldr	r3, [pc, #404]	; (8004fdc <_dtoa_r+0x62c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	f7fb fc2b 	bl	80006a8 <__aeabi_dmul>
 8004e52:	4652      	mov	r2, sl
 8004e54:	465b      	mov	r3, fp
 8004e56:	f7fb fead 	bl	8000bb4 <__aeabi_dcmpge>
 8004e5a:	9e03      	ldr	r6, [sp, #12]
 8004e5c:	4637      	mov	r7, r6
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f040 8245 	bne.w	80052ee <_dtoa_r+0x93e>
 8004e64:	9d01      	ldr	r5, [sp, #4]
 8004e66:	2331      	movs	r3, #49	; 0x31
 8004e68:	f805 3b01 	strb.w	r3, [r5], #1
 8004e6c:	9b00      	ldr	r3, [sp, #0]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	e240      	b.n	80052f6 <_dtoa_r+0x946>
 8004e74:	07f2      	lsls	r2, r6, #31
 8004e76:	d505      	bpl.n	8004e84 <_dtoa_r+0x4d4>
 8004e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e7c:	f7fb fc14 	bl	80006a8 <__aeabi_dmul>
 8004e80:	3501      	adds	r5, #1
 8004e82:	2301      	movs	r3, #1
 8004e84:	1076      	asrs	r6, r6, #1
 8004e86:	3708      	adds	r7, #8
 8004e88:	e777      	b.n	8004d7a <_dtoa_r+0x3ca>
 8004e8a:	2502      	movs	r5, #2
 8004e8c:	e779      	b.n	8004d82 <_dtoa_r+0x3d2>
 8004e8e:	9f00      	ldr	r7, [sp, #0]
 8004e90:	9e03      	ldr	r6, [sp, #12]
 8004e92:	e794      	b.n	8004dbe <_dtoa_r+0x40e>
 8004e94:	9901      	ldr	r1, [sp, #4]
 8004e96:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <_dtoa_r+0x618>)
 8004e98:	4431      	add	r1, r6
 8004e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8004e9c:	9908      	ldr	r1, [sp, #32]
 8004e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ea6:	2900      	cmp	r1, #0
 8004ea8:	d043      	beq.n	8004f32 <_dtoa_r+0x582>
 8004eaa:	494d      	ldr	r1, [pc, #308]	; (8004fe0 <_dtoa_r+0x630>)
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7fb fd25 	bl	80008fc <__aeabi_ddiv>
 8004eb2:	4652      	mov	r2, sl
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	f7fb fa3f 	bl	8000338 <__aeabi_dsub>
 8004eba:	9d01      	ldr	r5, [sp, #4]
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	468b      	mov	fp, r1
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	f7fb fea0 	bl	8000c08 <__aeabi_d2iz>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	f7fb fb83 	bl	80005d4 <__aeabi_i2d>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb fa2f 	bl	8000338 <__aeabi_dsub>
 8004eda:	3630      	adds	r6, #48	; 0x30
 8004edc:	f805 6b01 	strb.w	r6, [r5], #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	465b      	mov	r3, fp
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	4689      	mov	r9, r1
 8004ee8:	f7fb fe50 	bl	8000b8c <__aeabi_dcmplt>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d163      	bne.n	8004fb8 <_dtoa_r+0x608>
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	4936      	ldr	r1, [pc, #216]	; (8004fd0 <_dtoa_r+0x620>)
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f7fb fa1e 	bl	8000338 <__aeabi_dsub>
 8004efc:	4652      	mov	r2, sl
 8004efe:	465b      	mov	r3, fp
 8004f00:	f7fb fe44 	bl	8000b8c <__aeabi_dcmplt>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f040 80b5 	bne.w	8005074 <_dtoa_r+0x6c4>
 8004f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f0c:	429d      	cmp	r5, r3
 8004f0e:	d081      	beq.n	8004e14 <_dtoa_r+0x464>
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <_dtoa_r+0x624>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	4650      	mov	r0, sl
 8004f16:	4659      	mov	r1, fp
 8004f18:	f7fb fbc6 	bl	80006a8 <__aeabi_dmul>
 8004f1c:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <_dtoa_r+0x624>)
 8004f1e:	4682      	mov	sl, r0
 8004f20:	468b      	mov	fp, r1
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	2200      	movs	r2, #0
 8004f28:	f7fb fbbe 	bl	80006a8 <__aeabi_dmul>
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	4689      	mov	r9, r1
 8004f30:	e7c6      	b.n	8004ec0 <_dtoa_r+0x510>
 8004f32:	4650      	mov	r0, sl
 8004f34:	4659      	mov	r1, fp
 8004f36:	f7fb fbb7 	bl	80006a8 <__aeabi_dmul>
 8004f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f3c:	9d01      	ldr	r5, [sp, #4]
 8004f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f40:	4682      	mov	sl, r0
 8004f42:	468b      	mov	fp, r1
 8004f44:	4649      	mov	r1, r9
 8004f46:	4640      	mov	r0, r8
 8004f48:	f7fb fe5e 	bl	8000c08 <__aeabi_d2iz>
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	f7fb fb41 	bl	80005d4 <__aeabi_i2d>
 8004f52:	3630      	adds	r6, #48	; 0x30
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	f7fb f9ec 	bl	8000338 <__aeabi_dsub>
 8004f60:	f805 6b01 	strb.w	r6, [r5], #1
 8004f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f66:	429d      	cmp	r5, r3
 8004f68:	4680      	mov	r8, r0
 8004f6a:	4689      	mov	r9, r1
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	d124      	bne.n	8004fbc <_dtoa_r+0x60c>
 8004f72:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <_dtoa_r+0x630>)
 8004f74:	4650      	mov	r0, sl
 8004f76:	4659      	mov	r1, fp
 8004f78:	f7fb f9e0 	bl	800033c <__adddf3>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	f7fb fe20 	bl	8000bc8 <__aeabi_dcmpgt>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d173      	bne.n	8005074 <_dtoa_r+0x6c4>
 8004f8c:	4652      	mov	r2, sl
 8004f8e:	465b      	mov	r3, fp
 8004f90:	4913      	ldr	r1, [pc, #76]	; (8004fe0 <_dtoa_r+0x630>)
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7fb f9d0 	bl	8000338 <__aeabi_dsub>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	f7fb fdf4 	bl	8000b8c <__aeabi_dcmplt>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	f43f af35 	beq.w	8004e14 <_dtoa_r+0x464>
 8004faa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004fac:	1e6b      	subs	r3, r5, #1
 8004fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fb4:	2b30      	cmp	r3, #48	; 0x30
 8004fb6:	d0f8      	beq.n	8004faa <_dtoa_r+0x5fa>
 8004fb8:	9700      	str	r7, [sp, #0]
 8004fba:	e049      	b.n	8005050 <_dtoa_r+0x6a0>
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <_dtoa_r+0x624>)
 8004fbe:	f7fb fb73 	bl	80006a8 <__aeabi_dmul>
 8004fc2:	4680      	mov	r8, r0
 8004fc4:	4689      	mov	r9, r1
 8004fc6:	e7bd      	b.n	8004f44 <_dtoa_r+0x594>
 8004fc8:	08006dc8 	.word	0x08006dc8
 8004fcc:	08006da0 	.word	0x08006da0
 8004fd0:	3ff00000 	.word	0x3ff00000
 8004fd4:	40240000 	.word	0x40240000
 8004fd8:	401c0000 	.word	0x401c0000
 8004fdc:	40140000 	.word	0x40140000
 8004fe0:	3fe00000 	.word	0x3fe00000
 8004fe4:	9d01      	ldr	r5, [sp, #4]
 8004fe6:	4656      	mov	r6, sl
 8004fe8:	465f      	mov	r7, fp
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb fc83 	bl	80008fc <__aeabi_ddiv>
 8004ff6:	f7fb fe07 	bl	8000c08 <__aeabi_d2iz>
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	f7fb faea 	bl	80005d4 <__aeabi_i2d>
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	f7fb fb50 	bl	80006a8 <__aeabi_dmul>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005014:	f7fb f990 	bl	8000338 <__aeabi_dsub>
 8005018:	f805 6b01 	strb.w	r6, [r5], #1
 800501c:	9e01      	ldr	r6, [sp, #4]
 800501e:	9f03      	ldr	r7, [sp, #12]
 8005020:	1bae      	subs	r6, r5, r6
 8005022:	42b7      	cmp	r7, r6
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	d135      	bne.n	8005096 <_dtoa_r+0x6e6>
 800502a:	f7fb f987 	bl	800033c <__adddf3>
 800502e:	4642      	mov	r2, r8
 8005030:	464b      	mov	r3, r9
 8005032:	4606      	mov	r6, r0
 8005034:	460f      	mov	r7, r1
 8005036:	f7fb fdc7 	bl	8000bc8 <__aeabi_dcmpgt>
 800503a:	b9d0      	cbnz	r0, 8005072 <_dtoa_r+0x6c2>
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	4630      	mov	r0, r6
 8005042:	4639      	mov	r1, r7
 8005044:	f7fb fd98 	bl	8000b78 <__aeabi_dcmpeq>
 8005048:	b110      	cbz	r0, 8005050 <_dtoa_r+0x6a0>
 800504a:	f01a 0f01 	tst.w	sl, #1
 800504e:	d110      	bne.n	8005072 <_dtoa_r+0x6c2>
 8005050:	4620      	mov	r0, r4
 8005052:	ee18 1a10 	vmov	r1, s16
 8005056:	f000 faf3 	bl	8005640 <_Bfree>
 800505a:	2300      	movs	r3, #0
 800505c:	9800      	ldr	r0, [sp, #0]
 800505e:	702b      	strb	r3, [r5, #0]
 8005060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005062:	3001      	adds	r0, #1
 8005064:	6018      	str	r0, [r3, #0]
 8005066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005068:	2b00      	cmp	r3, #0
 800506a:	f43f acf1 	beq.w	8004a50 <_dtoa_r+0xa0>
 800506e:	601d      	str	r5, [r3, #0]
 8005070:	e4ee      	b.n	8004a50 <_dtoa_r+0xa0>
 8005072:	9f00      	ldr	r7, [sp, #0]
 8005074:	462b      	mov	r3, r5
 8005076:	461d      	mov	r5, r3
 8005078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800507c:	2a39      	cmp	r2, #57	; 0x39
 800507e:	d106      	bne.n	800508e <_dtoa_r+0x6de>
 8005080:	9a01      	ldr	r2, [sp, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d1f7      	bne.n	8005076 <_dtoa_r+0x6c6>
 8005086:	9901      	ldr	r1, [sp, #4]
 8005088:	2230      	movs	r2, #48	; 0x30
 800508a:	3701      	adds	r7, #1
 800508c:	700a      	strb	r2, [r1, #0]
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	3201      	adds	r2, #1
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	e790      	b.n	8004fb8 <_dtoa_r+0x608>
 8005096:	4ba6      	ldr	r3, [pc, #664]	; (8005330 <_dtoa_r+0x980>)
 8005098:	2200      	movs	r2, #0
 800509a:	f7fb fb05 	bl	80006a8 <__aeabi_dmul>
 800509e:	2200      	movs	r2, #0
 80050a0:	2300      	movs	r3, #0
 80050a2:	4606      	mov	r6, r0
 80050a4:	460f      	mov	r7, r1
 80050a6:	f7fb fd67 	bl	8000b78 <__aeabi_dcmpeq>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d09d      	beq.n	8004fea <_dtoa_r+0x63a>
 80050ae:	e7cf      	b.n	8005050 <_dtoa_r+0x6a0>
 80050b0:	9a08      	ldr	r2, [sp, #32]
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	f000 80d7 	beq.w	8005266 <_dtoa_r+0x8b6>
 80050b8:	9a06      	ldr	r2, [sp, #24]
 80050ba:	2a01      	cmp	r2, #1
 80050bc:	f300 80ba 	bgt.w	8005234 <_dtoa_r+0x884>
 80050c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	f000 80b2 	beq.w	800522c <_dtoa_r+0x87c>
 80050c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050cc:	9e07      	ldr	r6, [sp, #28]
 80050ce:	9d04      	ldr	r5, [sp, #16]
 80050d0:	9a04      	ldr	r2, [sp, #16]
 80050d2:	441a      	add	r2, r3
 80050d4:	9204      	str	r2, [sp, #16]
 80050d6:	9a05      	ldr	r2, [sp, #20]
 80050d8:	2101      	movs	r1, #1
 80050da:	441a      	add	r2, r3
 80050dc:	4620      	mov	r0, r4
 80050de:	9205      	str	r2, [sp, #20]
 80050e0:	f000 fb66 	bl	80057b0 <__i2b>
 80050e4:	4607      	mov	r7, r0
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	dd0c      	ble.n	8005104 <_dtoa_r+0x754>
 80050ea:	9b05      	ldr	r3, [sp, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dd09      	ble.n	8005104 <_dtoa_r+0x754>
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	9a04      	ldr	r2, [sp, #16]
 80050f4:	bfa8      	it	ge
 80050f6:	462b      	movge	r3, r5
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	9204      	str	r2, [sp, #16]
 80050fc:	9a05      	ldr	r2, [sp, #20]
 80050fe:	1aed      	subs	r5, r5, r3
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	b31b      	cbz	r3, 8005150 <_dtoa_r+0x7a0>
 8005108:	9b08      	ldr	r3, [sp, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80af 	beq.w	800526e <_dtoa_r+0x8be>
 8005110:	2e00      	cmp	r6, #0
 8005112:	dd13      	ble.n	800513c <_dtoa_r+0x78c>
 8005114:	4639      	mov	r1, r7
 8005116:	4632      	mov	r2, r6
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fc09 	bl	8005930 <__pow5mult>
 800511e:	ee18 2a10 	vmov	r2, s16
 8005122:	4601      	mov	r1, r0
 8005124:	4607      	mov	r7, r0
 8005126:	4620      	mov	r0, r4
 8005128:	f000 fb58 	bl	80057dc <__multiply>
 800512c:	ee18 1a10 	vmov	r1, s16
 8005130:	4680      	mov	r8, r0
 8005132:	4620      	mov	r0, r4
 8005134:	f000 fa84 	bl	8005640 <_Bfree>
 8005138:	ee08 8a10 	vmov	s16, r8
 800513c:	9b07      	ldr	r3, [sp, #28]
 800513e:	1b9a      	subs	r2, r3, r6
 8005140:	d006      	beq.n	8005150 <_dtoa_r+0x7a0>
 8005142:	ee18 1a10 	vmov	r1, s16
 8005146:	4620      	mov	r0, r4
 8005148:	f000 fbf2 	bl	8005930 <__pow5mult>
 800514c:	ee08 0a10 	vmov	s16, r0
 8005150:	2101      	movs	r1, #1
 8005152:	4620      	mov	r0, r4
 8005154:	f000 fb2c 	bl	80057b0 <__i2b>
 8005158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	4606      	mov	r6, r0
 800515e:	f340 8088 	ble.w	8005272 <_dtoa_r+0x8c2>
 8005162:	461a      	mov	r2, r3
 8005164:	4601      	mov	r1, r0
 8005166:	4620      	mov	r0, r4
 8005168:	f000 fbe2 	bl	8005930 <__pow5mult>
 800516c:	9b06      	ldr	r3, [sp, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	4606      	mov	r6, r0
 8005172:	f340 8081 	ble.w	8005278 <_dtoa_r+0x8c8>
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	6933      	ldr	r3, [r6, #16]
 800517c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005180:	6918      	ldr	r0, [r3, #16]
 8005182:	f000 fac5 	bl	8005710 <__hi0bits>
 8005186:	f1c0 0020 	rsb	r0, r0, #32
 800518a:	9b05      	ldr	r3, [sp, #20]
 800518c:	4418      	add	r0, r3
 800518e:	f010 001f 	ands.w	r0, r0, #31
 8005192:	f000 8092 	beq.w	80052ba <_dtoa_r+0x90a>
 8005196:	f1c0 0320 	rsb	r3, r0, #32
 800519a:	2b04      	cmp	r3, #4
 800519c:	f340 808a 	ble.w	80052b4 <_dtoa_r+0x904>
 80051a0:	f1c0 001c 	rsb	r0, r0, #28
 80051a4:	9b04      	ldr	r3, [sp, #16]
 80051a6:	4403      	add	r3, r0
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	9b05      	ldr	r3, [sp, #20]
 80051ac:	4403      	add	r3, r0
 80051ae:	4405      	add	r5, r0
 80051b0:	9305      	str	r3, [sp, #20]
 80051b2:	9b04      	ldr	r3, [sp, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	dd07      	ble.n	80051c8 <_dtoa_r+0x818>
 80051b8:	ee18 1a10 	vmov	r1, s16
 80051bc:	461a      	mov	r2, r3
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 fc10 	bl	80059e4 <__lshift>
 80051c4:	ee08 0a10 	vmov	s16, r0
 80051c8:	9b05      	ldr	r3, [sp, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dd05      	ble.n	80051da <_dtoa_r+0x82a>
 80051ce:	4631      	mov	r1, r6
 80051d0:	461a      	mov	r2, r3
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 fc06 	bl	80059e4 <__lshift>
 80051d8:	4606      	mov	r6, r0
 80051da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d06e      	beq.n	80052be <_dtoa_r+0x90e>
 80051e0:	ee18 0a10 	vmov	r0, s16
 80051e4:	4631      	mov	r1, r6
 80051e6:	f000 fc6d 	bl	8005ac4 <__mcmp>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	da67      	bge.n	80052be <_dtoa_r+0x90e>
 80051ee:	9b00      	ldr	r3, [sp, #0]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	ee18 1a10 	vmov	r1, s16
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	220a      	movs	r2, #10
 80051fa:	2300      	movs	r3, #0
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 fa41 	bl	8005684 <__multadd>
 8005202:	9b08      	ldr	r3, [sp, #32]
 8005204:	ee08 0a10 	vmov	s16, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 81b1 	beq.w	8005570 <_dtoa_r+0xbc0>
 800520e:	2300      	movs	r3, #0
 8005210:	4639      	mov	r1, r7
 8005212:	220a      	movs	r2, #10
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fa35 	bl	8005684 <__multadd>
 800521a:	9b02      	ldr	r3, [sp, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	4607      	mov	r7, r0
 8005220:	f300 808e 	bgt.w	8005340 <_dtoa_r+0x990>
 8005224:	9b06      	ldr	r3, [sp, #24]
 8005226:	2b02      	cmp	r3, #2
 8005228:	dc51      	bgt.n	80052ce <_dtoa_r+0x91e>
 800522a:	e089      	b.n	8005340 <_dtoa_r+0x990>
 800522c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800522e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005232:	e74b      	b.n	80050cc <_dtoa_r+0x71c>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1e5e      	subs	r6, r3, #1
 8005238:	9b07      	ldr	r3, [sp, #28]
 800523a:	42b3      	cmp	r3, r6
 800523c:	bfbf      	itttt	lt
 800523e:	9b07      	ldrlt	r3, [sp, #28]
 8005240:	9607      	strlt	r6, [sp, #28]
 8005242:	1af2      	sublt	r2, r6, r3
 8005244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005246:	bfb6      	itet	lt
 8005248:	189b      	addlt	r3, r3, r2
 800524a:	1b9e      	subge	r6, r3, r6
 800524c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	bfb8      	it	lt
 8005252:	2600      	movlt	r6, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	bfb7      	itett	lt
 8005258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800525c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005260:	1a9d      	sublt	r5, r3, r2
 8005262:	2300      	movlt	r3, #0
 8005264:	e734      	b.n	80050d0 <_dtoa_r+0x720>
 8005266:	9e07      	ldr	r6, [sp, #28]
 8005268:	9d04      	ldr	r5, [sp, #16]
 800526a:	9f08      	ldr	r7, [sp, #32]
 800526c:	e73b      	b.n	80050e6 <_dtoa_r+0x736>
 800526e:	9a07      	ldr	r2, [sp, #28]
 8005270:	e767      	b.n	8005142 <_dtoa_r+0x792>
 8005272:	9b06      	ldr	r3, [sp, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	dc18      	bgt.n	80052aa <_dtoa_r+0x8fa>
 8005278:	f1ba 0f00 	cmp.w	sl, #0
 800527c:	d115      	bne.n	80052aa <_dtoa_r+0x8fa>
 800527e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005282:	b993      	cbnz	r3, 80052aa <_dtoa_r+0x8fa>
 8005284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005288:	0d1b      	lsrs	r3, r3, #20
 800528a:	051b      	lsls	r3, r3, #20
 800528c:	b183      	cbz	r3, 80052b0 <_dtoa_r+0x900>
 800528e:	9b04      	ldr	r3, [sp, #16]
 8005290:	3301      	adds	r3, #1
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	9b05      	ldr	r3, [sp, #20]
 8005296:	3301      	adds	r3, #1
 8005298:	9305      	str	r3, [sp, #20]
 800529a:	f04f 0801 	mov.w	r8, #1
 800529e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f47f af6a 	bne.w	800517a <_dtoa_r+0x7ca>
 80052a6:	2001      	movs	r0, #1
 80052a8:	e76f      	b.n	800518a <_dtoa_r+0x7da>
 80052aa:	f04f 0800 	mov.w	r8, #0
 80052ae:	e7f6      	b.n	800529e <_dtoa_r+0x8ee>
 80052b0:	4698      	mov	r8, r3
 80052b2:	e7f4      	b.n	800529e <_dtoa_r+0x8ee>
 80052b4:	f43f af7d 	beq.w	80051b2 <_dtoa_r+0x802>
 80052b8:	4618      	mov	r0, r3
 80052ba:	301c      	adds	r0, #28
 80052bc:	e772      	b.n	80051a4 <_dtoa_r+0x7f4>
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dc37      	bgt.n	8005334 <_dtoa_r+0x984>
 80052c4:	9b06      	ldr	r3, [sp, #24]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	dd34      	ble.n	8005334 <_dtoa_r+0x984>
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	9302      	str	r3, [sp, #8]
 80052ce:	9b02      	ldr	r3, [sp, #8]
 80052d0:	b96b      	cbnz	r3, 80052ee <_dtoa_r+0x93e>
 80052d2:	4631      	mov	r1, r6
 80052d4:	2205      	movs	r2, #5
 80052d6:	4620      	mov	r0, r4
 80052d8:	f000 f9d4 	bl	8005684 <__multadd>
 80052dc:	4601      	mov	r1, r0
 80052de:	4606      	mov	r6, r0
 80052e0:	ee18 0a10 	vmov	r0, s16
 80052e4:	f000 fbee 	bl	8005ac4 <__mcmp>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f73f adbb 	bgt.w	8004e64 <_dtoa_r+0x4b4>
 80052ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f0:	9d01      	ldr	r5, [sp, #4]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	f04f 0800 	mov.w	r8, #0
 80052fa:	4631      	mov	r1, r6
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 f99f 	bl	8005640 <_Bfree>
 8005302:	2f00      	cmp	r7, #0
 8005304:	f43f aea4 	beq.w	8005050 <_dtoa_r+0x6a0>
 8005308:	f1b8 0f00 	cmp.w	r8, #0
 800530c:	d005      	beq.n	800531a <_dtoa_r+0x96a>
 800530e:	45b8      	cmp	r8, r7
 8005310:	d003      	beq.n	800531a <_dtoa_r+0x96a>
 8005312:	4641      	mov	r1, r8
 8005314:	4620      	mov	r0, r4
 8005316:	f000 f993 	bl	8005640 <_Bfree>
 800531a:	4639      	mov	r1, r7
 800531c:	4620      	mov	r0, r4
 800531e:	f000 f98f 	bl	8005640 <_Bfree>
 8005322:	e695      	b.n	8005050 <_dtoa_r+0x6a0>
 8005324:	2600      	movs	r6, #0
 8005326:	4637      	mov	r7, r6
 8005328:	e7e1      	b.n	80052ee <_dtoa_r+0x93e>
 800532a:	9700      	str	r7, [sp, #0]
 800532c:	4637      	mov	r7, r6
 800532e:	e599      	b.n	8004e64 <_dtoa_r+0x4b4>
 8005330:	40240000 	.word	0x40240000
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 80ca 	beq.w	80054d0 <_dtoa_r+0xb20>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	9302      	str	r3, [sp, #8]
 8005340:	2d00      	cmp	r5, #0
 8005342:	dd05      	ble.n	8005350 <_dtoa_r+0x9a0>
 8005344:	4639      	mov	r1, r7
 8005346:	462a      	mov	r2, r5
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fb4b 	bl	80059e4 <__lshift>
 800534e:	4607      	mov	r7, r0
 8005350:	f1b8 0f00 	cmp.w	r8, #0
 8005354:	d05b      	beq.n	800540e <_dtoa_r+0xa5e>
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4620      	mov	r0, r4
 800535a:	f000 f931 	bl	80055c0 <_Balloc>
 800535e:	4605      	mov	r5, r0
 8005360:	b928      	cbnz	r0, 800536e <_dtoa_r+0x9be>
 8005362:	4b87      	ldr	r3, [pc, #540]	; (8005580 <_dtoa_r+0xbd0>)
 8005364:	4602      	mov	r2, r0
 8005366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800536a:	f7ff bb3b 	b.w	80049e4 <_dtoa_r+0x34>
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	3202      	adds	r2, #2
 8005372:	0092      	lsls	r2, r2, #2
 8005374:	f107 010c 	add.w	r1, r7, #12
 8005378:	300c      	adds	r0, #12
 800537a:	f000 f913 	bl	80055a4 <memcpy>
 800537e:	2201      	movs	r2, #1
 8005380:	4629      	mov	r1, r5
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fb2e 	bl	80059e4 <__lshift>
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	f103 0901 	add.w	r9, r3, #1
 800538e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005392:	4413      	add	r3, r2
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	f00a 0301 	and.w	r3, sl, #1
 800539a:	46b8      	mov	r8, r7
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	4607      	mov	r7, r0
 80053a0:	4631      	mov	r1, r6
 80053a2:	ee18 0a10 	vmov	r0, s16
 80053a6:	f7ff fa77 	bl	8004898 <quorem>
 80053aa:	4641      	mov	r1, r8
 80053ac:	9002      	str	r0, [sp, #8]
 80053ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053b2:	ee18 0a10 	vmov	r0, s16
 80053b6:	f000 fb85 	bl	8005ac4 <__mcmp>
 80053ba:	463a      	mov	r2, r7
 80053bc:	9003      	str	r0, [sp, #12]
 80053be:	4631      	mov	r1, r6
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fb9b 	bl	8005afc <__mdiff>
 80053c6:	68c2      	ldr	r2, [r0, #12]
 80053c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80053cc:	4605      	mov	r5, r0
 80053ce:	bb02      	cbnz	r2, 8005412 <_dtoa_r+0xa62>
 80053d0:	4601      	mov	r1, r0
 80053d2:	ee18 0a10 	vmov	r0, s16
 80053d6:	f000 fb75 	bl	8005ac4 <__mcmp>
 80053da:	4602      	mov	r2, r0
 80053dc:	4629      	mov	r1, r5
 80053de:	4620      	mov	r0, r4
 80053e0:	9207      	str	r2, [sp, #28]
 80053e2:	f000 f92d 	bl	8005640 <_Bfree>
 80053e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80053ea:	ea43 0102 	orr.w	r1, r3, r2
 80053ee:	9b04      	ldr	r3, [sp, #16]
 80053f0:	430b      	orrs	r3, r1
 80053f2:	464d      	mov	r5, r9
 80053f4:	d10f      	bne.n	8005416 <_dtoa_r+0xa66>
 80053f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053fa:	d02a      	beq.n	8005452 <_dtoa_r+0xaa2>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	dd02      	ble.n	8005408 <_dtoa_r+0xa58>
 8005402:	9b02      	ldr	r3, [sp, #8]
 8005404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005408:	f88b a000 	strb.w	sl, [fp]
 800540c:	e775      	b.n	80052fa <_dtoa_r+0x94a>
 800540e:	4638      	mov	r0, r7
 8005410:	e7ba      	b.n	8005388 <_dtoa_r+0x9d8>
 8005412:	2201      	movs	r2, #1
 8005414:	e7e2      	b.n	80053dc <_dtoa_r+0xa2c>
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	db04      	blt.n	8005426 <_dtoa_r+0xa76>
 800541c:	9906      	ldr	r1, [sp, #24]
 800541e:	430b      	orrs	r3, r1
 8005420:	9904      	ldr	r1, [sp, #16]
 8005422:	430b      	orrs	r3, r1
 8005424:	d122      	bne.n	800546c <_dtoa_r+0xabc>
 8005426:	2a00      	cmp	r2, #0
 8005428:	ddee      	ble.n	8005408 <_dtoa_r+0xa58>
 800542a:	ee18 1a10 	vmov	r1, s16
 800542e:	2201      	movs	r2, #1
 8005430:	4620      	mov	r0, r4
 8005432:	f000 fad7 	bl	80059e4 <__lshift>
 8005436:	4631      	mov	r1, r6
 8005438:	ee08 0a10 	vmov	s16, r0
 800543c:	f000 fb42 	bl	8005ac4 <__mcmp>
 8005440:	2800      	cmp	r0, #0
 8005442:	dc03      	bgt.n	800544c <_dtoa_r+0xa9c>
 8005444:	d1e0      	bne.n	8005408 <_dtoa_r+0xa58>
 8005446:	f01a 0f01 	tst.w	sl, #1
 800544a:	d0dd      	beq.n	8005408 <_dtoa_r+0xa58>
 800544c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005450:	d1d7      	bne.n	8005402 <_dtoa_r+0xa52>
 8005452:	2339      	movs	r3, #57	; 0x39
 8005454:	f88b 3000 	strb.w	r3, [fp]
 8005458:	462b      	mov	r3, r5
 800545a:	461d      	mov	r5, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005462:	2a39      	cmp	r2, #57	; 0x39
 8005464:	d071      	beq.n	800554a <_dtoa_r+0xb9a>
 8005466:	3201      	adds	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e746      	b.n	80052fa <_dtoa_r+0x94a>
 800546c:	2a00      	cmp	r2, #0
 800546e:	dd07      	ble.n	8005480 <_dtoa_r+0xad0>
 8005470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005474:	d0ed      	beq.n	8005452 <_dtoa_r+0xaa2>
 8005476:	f10a 0301 	add.w	r3, sl, #1
 800547a:	f88b 3000 	strb.w	r3, [fp]
 800547e:	e73c      	b.n	80052fa <_dtoa_r+0x94a>
 8005480:	9b05      	ldr	r3, [sp, #20]
 8005482:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005486:	4599      	cmp	r9, r3
 8005488:	d047      	beq.n	800551a <_dtoa_r+0xb6a>
 800548a:	ee18 1a10 	vmov	r1, s16
 800548e:	2300      	movs	r3, #0
 8005490:	220a      	movs	r2, #10
 8005492:	4620      	mov	r0, r4
 8005494:	f000 f8f6 	bl	8005684 <__multadd>
 8005498:	45b8      	cmp	r8, r7
 800549a:	ee08 0a10 	vmov	s16, r0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	f04f 020a 	mov.w	r2, #10
 80054a6:	4641      	mov	r1, r8
 80054a8:	4620      	mov	r0, r4
 80054aa:	d106      	bne.n	80054ba <_dtoa_r+0xb0a>
 80054ac:	f000 f8ea 	bl	8005684 <__multadd>
 80054b0:	4680      	mov	r8, r0
 80054b2:	4607      	mov	r7, r0
 80054b4:	f109 0901 	add.w	r9, r9, #1
 80054b8:	e772      	b.n	80053a0 <_dtoa_r+0x9f0>
 80054ba:	f000 f8e3 	bl	8005684 <__multadd>
 80054be:	4639      	mov	r1, r7
 80054c0:	4680      	mov	r8, r0
 80054c2:	2300      	movs	r3, #0
 80054c4:	220a      	movs	r2, #10
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f8dc 	bl	8005684 <__multadd>
 80054cc:	4607      	mov	r7, r0
 80054ce:	e7f1      	b.n	80054b4 <_dtoa_r+0xb04>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	9302      	str	r3, [sp, #8]
 80054d4:	9d01      	ldr	r5, [sp, #4]
 80054d6:	ee18 0a10 	vmov	r0, s16
 80054da:	4631      	mov	r1, r6
 80054dc:	f7ff f9dc 	bl	8004898 <quorem>
 80054e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	f805 ab01 	strb.w	sl, [r5], #1
 80054ea:	1aea      	subs	r2, r5, r3
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	4293      	cmp	r3, r2
 80054f0:	dd09      	ble.n	8005506 <_dtoa_r+0xb56>
 80054f2:	ee18 1a10 	vmov	r1, s16
 80054f6:	2300      	movs	r3, #0
 80054f8:	220a      	movs	r2, #10
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 f8c2 	bl	8005684 <__multadd>
 8005500:	ee08 0a10 	vmov	s16, r0
 8005504:	e7e7      	b.n	80054d6 <_dtoa_r+0xb26>
 8005506:	9b02      	ldr	r3, [sp, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfc8      	it	gt
 800550c:	461d      	movgt	r5, r3
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	bfd8      	it	le
 8005512:	2501      	movle	r5, #1
 8005514:	441d      	add	r5, r3
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	ee18 1a10 	vmov	r1, s16
 800551e:	2201      	movs	r2, #1
 8005520:	4620      	mov	r0, r4
 8005522:	f000 fa5f 	bl	80059e4 <__lshift>
 8005526:	4631      	mov	r1, r6
 8005528:	ee08 0a10 	vmov	s16, r0
 800552c:	f000 faca 	bl	8005ac4 <__mcmp>
 8005530:	2800      	cmp	r0, #0
 8005532:	dc91      	bgt.n	8005458 <_dtoa_r+0xaa8>
 8005534:	d102      	bne.n	800553c <_dtoa_r+0xb8c>
 8005536:	f01a 0f01 	tst.w	sl, #1
 800553a:	d18d      	bne.n	8005458 <_dtoa_r+0xaa8>
 800553c:	462b      	mov	r3, r5
 800553e:	461d      	mov	r5, r3
 8005540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005544:	2a30      	cmp	r2, #48	; 0x30
 8005546:	d0fa      	beq.n	800553e <_dtoa_r+0xb8e>
 8005548:	e6d7      	b.n	80052fa <_dtoa_r+0x94a>
 800554a:	9a01      	ldr	r2, [sp, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d184      	bne.n	800545a <_dtoa_r+0xaaa>
 8005550:	9b00      	ldr	r3, [sp, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2331      	movs	r3, #49	; 0x31
 8005558:	7013      	strb	r3, [r2, #0]
 800555a:	e6ce      	b.n	80052fa <_dtoa_r+0x94a>
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <_dtoa_r+0xbd4>)
 800555e:	f7ff ba95 	b.w	8004a8c <_dtoa_r+0xdc>
 8005562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005564:	2b00      	cmp	r3, #0
 8005566:	f47f aa6e 	bne.w	8004a46 <_dtoa_r+0x96>
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <_dtoa_r+0xbd8>)
 800556c:	f7ff ba8e 	b.w	8004a8c <_dtoa_r+0xdc>
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dcae      	bgt.n	80054d4 <_dtoa_r+0xb24>
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	2b02      	cmp	r3, #2
 800557a:	f73f aea8 	bgt.w	80052ce <_dtoa_r+0x91e>
 800557e:	e7a9      	b.n	80054d4 <_dtoa_r+0xb24>
 8005580:	08006d33 	.word	0x08006d33
 8005584:	08006c90 	.word	0x08006c90
 8005588:	08006cb4 	.word	0x08006cb4

0800558c <_localeconv_r>:
 800558c:	4800      	ldr	r0, [pc, #0]	; (8005590 <_localeconv_r+0x4>)
 800558e:	4770      	bx	lr
 8005590:	20000160 	.word	0x20000160

08005594 <malloc>:
 8005594:	4b02      	ldr	r3, [pc, #8]	; (80055a0 <malloc+0xc>)
 8005596:	4601      	mov	r1, r0
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f000 bc17 	b.w	8005dcc <_malloc_r>
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ba:	4291      	cmp	r1, r2
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <_Balloc>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055c4:	4604      	mov	r4, r0
 80055c6:	460d      	mov	r5, r1
 80055c8:	b976      	cbnz	r6, 80055e8 <_Balloc+0x28>
 80055ca:	2010      	movs	r0, #16
 80055cc:	f7ff ffe2 	bl	8005594 <malloc>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6260      	str	r0, [r4, #36]	; 0x24
 80055d4:	b920      	cbnz	r0, 80055e0 <_Balloc+0x20>
 80055d6:	4b18      	ldr	r3, [pc, #96]	; (8005638 <_Balloc+0x78>)
 80055d8:	4818      	ldr	r0, [pc, #96]	; (800563c <_Balloc+0x7c>)
 80055da:	2166      	movs	r1, #102	; 0x66
 80055dc:	f000 fc7a 	bl	8005ed4 <__assert_func>
 80055e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055e4:	6006      	str	r6, [r0, #0]
 80055e6:	60c6      	str	r6, [r0, #12]
 80055e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055ea:	68f3      	ldr	r3, [r6, #12]
 80055ec:	b183      	cbz	r3, 8005610 <_Balloc+0x50>
 80055ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055f6:	b9b8      	cbnz	r0, 8005628 <_Balloc+0x68>
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f605 	lsl.w	r6, r1, r5
 80055fe:	1d72      	adds	r2, r6, #5
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	4620      	mov	r0, r4
 8005604:	f000 fb60 	bl	8005cc8 <_calloc_r>
 8005608:	b160      	cbz	r0, 8005624 <_Balloc+0x64>
 800560a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800560e:	e00e      	b.n	800562e <_Balloc+0x6e>
 8005610:	2221      	movs	r2, #33	; 0x21
 8005612:	2104      	movs	r1, #4
 8005614:	4620      	mov	r0, r4
 8005616:	f000 fb57 	bl	8005cc8 <_calloc_r>
 800561a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800561c:	60f0      	str	r0, [r6, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e4      	bne.n	80055ee <_Balloc+0x2e>
 8005624:	2000      	movs	r0, #0
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	6802      	ldr	r2, [r0, #0]
 800562a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800562e:	2300      	movs	r3, #0
 8005630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005634:	e7f7      	b.n	8005626 <_Balloc+0x66>
 8005636:	bf00      	nop
 8005638:	08006cc1 	.word	0x08006cc1
 800563c:	08006d44 	.word	0x08006d44

08005640 <_Bfree>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005644:	4605      	mov	r5, r0
 8005646:	460c      	mov	r4, r1
 8005648:	b976      	cbnz	r6, 8005668 <_Bfree+0x28>
 800564a:	2010      	movs	r0, #16
 800564c:	f7ff ffa2 	bl	8005594 <malloc>
 8005650:	4602      	mov	r2, r0
 8005652:	6268      	str	r0, [r5, #36]	; 0x24
 8005654:	b920      	cbnz	r0, 8005660 <_Bfree+0x20>
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <_Bfree+0x3c>)
 8005658:	4809      	ldr	r0, [pc, #36]	; (8005680 <_Bfree+0x40>)
 800565a:	218a      	movs	r1, #138	; 0x8a
 800565c:	f000 fc3a 	bl	8005ed4 <__assert_func>
 8005660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005664:	6006      	str	r6, [r0, #0]
 8005666:	60c6      	str	r6, [r0, #12]
 8005668:	b13c      	cbz	r4, 800567a <_Bfree+0x3a>
 800566a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800566c:	6862      	ldr	r2, [r4, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005674:	6021      	str	r1, [r4, #0]
 8005676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	08006cc1 	.word	0x08006cc1
 8005680:	08006d44 	.word	0x08006d44

08005684 <__multadd>:
 8005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	690d      	ldr	r5, [r1, #16]
 800568a:	4607      	mov	r7, r0
 800568c:	460c      	mov	r4, r1
 800568e:	461e      	mov	r6, r3
 8005690:	f101 0c14 	add.w	ip, r1, #20
 8005694:	2000      	movs	r0, #0
 8005696:	f8dc 3000 	ldr.w	r3, [ip]
 800569a:	b299      	uxth	r1, r3
 800569c:	fb02 6101 	mla	r1, r2, r1, r6
 80056a0:	0c1e      	lsrs	r6, r3, #16
 80056a2:	0c0b      	lsrs	r3, r1, #16
 80056a4:	fb02 3306 	mla	r3, r2, r6, r3
 80056a8:	b289      	uxth	r1, r1
 80056aa:	3001      	adds	r0, #1
 80056ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056b0:	4285      	cmp	r5, r0
 80056b2:	f84c 1b04 	str.w	r1, [ip], #4
 80056b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ba:	dcec      	bgt.n	8005696 <__multadd+0x12>
 80056bc:	b30e      	cbz	r6, 8005702 <__multadd+0x7e>
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	dc19      	bgt.n	80056f8 <__multadd+0x74>
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	4638      	mov	r0, r7
 80056c8:	3101      	adds	r1, #1
 80056ca:	f7ff ff79 	bl	80055c0 <_Balloc>
 80056ce:	4680      	mov	r8, r0
 80056d0:	b928      	cbnz	r0, 80056de <__multadd+0x5a>
 80056d2:	4602      	mov	r2, r0
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <__multadd+0x84>)
 80056d6:	480d      	ldr	r0, [pc, #52]	; (800570c <__multadd+0x88>)
 80056d8:	21b5      	movs	r1, #181	; 0xb5
 80056da:	f000 fbfb 	bl	8005ed4 <__assert_func>
 80056de:	6922      	ldr	r2, [r4, #16]
 80056e0:	3202      	adds	r2, #2
 80056e2:	f104 010c 	add.w	r1, r4, #12
 80056e6:	0092      	lsls	r2, r2, #2
 80056e8:	300c      	adds	r0, #12
 80056ea:	f7ff ff5b 	bl	80055a4 <memcpy>
 80056ee:	4621      	mov	r1, r4
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ffa5 	bl	8005640 <_Bfree>
 80056f6:	4644      	mov	r4, r8
 80056f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056fc:	3501      	adds	r5, #1
 80056fe:	615e      	str	r6, [r3, #20]
 8005700:	6125      	str	r5, [r4, #16]
 8005702:	4620      	mov	r0, r4
 8005704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005708:	08006d33 	.word	0x08006d33
 800570c:	08006d44 	.word	0x08006d44

08005710 <__hi0bits>:
 8005710:	0c03      	lsrs	r3, r0, #16
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	b9d3      	cbnz	r3, 800574c <__hi0bits+0x3c>
 8005716:	0400      	lsls	r0, r0, #16
 8005718:	2310      	movs	r3, #16
 800571a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800571e:	bf04      	itt	eq
 8005720:	0200      	lsleq	r0, r0, #8
 8005722:	3308      	addeq	r3, #8
 8005724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005728:	bf04      	itt	eq
 800572a:	0100      	lsleq	r0, r0, #4
 800572c:	3304      	addeq	r3, #4
 800572e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005732:	bf04      	itt	eq
 8005734:	0080      	lsleq	r0, r0, #2
 8005736:	3302      	addeq	r3, #2
 8005738:	2800      	cmp	r0, #0
 800573a:	db05      	blt.n	8005748 <__hi0bits+0x38>
 800573c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005740:	f103 0301 	add.w	r3, r3, #1
 8005744:	bf08      	it	eq
 8005746:	2320      	moveq	r3, #32
 8005748:	4618      	mov	r0, r3
 800574a:	4770      	bx	lr
 800574c:	2300      	movs	r3, #0
 800574e:	e7e4      	b.n	800571a <__hi0bits+0xa>

08005750 <__lo0bits>:
 8005750:	6803      	ldr	r3, [r0, #0]
 8005752:	f013 0207 	ands.w	r2, r3, #7
 8005756:	4601      	mov	r1, r0
 8005758:	d00b      	beq.n	8005772 <__lo0bits+0x22>
 800575a:	07da      	lsls	r2, r3, #31
 800575c:	d423      	bmi.n	80057a6 <__lo0bits+0x56>
 800575e:	0798      	lsls	r0, r3, #30
 8005760:	bf49      	itett	mi
 8005762:	085b      	lsrmi	r3, r3, #1
 8005764:	089b      	lsrpl	r3, r3, #2
 8005766:	2001      	movmi	r0, #1
 8005768:	600b      	strmi	r3, [r1, #0]
 800576a:	bf5c      	itt	pl
 800576c:	600b      	strpl	r3, [r1, #0]
 800576e:	2002      	movpl	r0, #2
 8005770:	4770      	bx	lr
 8005772:	b298      	uxth	r0, r3
 8005774:	b9a8      	cbnz	r0, 80057a2 <__lo0bits+0x52>
 8005776:	0c1b      	lsrs	r3, r3, #16
 8005778:	2010      	movs	r0, #16
 800577a:	b2da      	uxtb	r2, r3
 800577c:	b90a      	cbnz	r2, 8005782 <__lo0bits+0x32>
 800577e:	3008      	adds	r0, #8
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	071a      	lsls	r2, r3, #28
 8005784:	bf04      	itt	eq
 8005786:	091b      	lsreq	r3, r3, #4
 8005788:	3004      	addeq	r0, #4
 800578a:	079a      	lsls	r2, r3, #30
 800578c:	bf04      	itt	eq
 800578e:	089b      	lsreq	r3, r3, #2
 8005790:	3002      	addeq	r0, #2
 8005792:	07da      	lsls	r2, r3, #31
 8005794:	d403      	bmi.n	800579e <__lo0bits+0x4e>
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	f100 0001 	add.w	r0, r0, #1
 800579c:	d005      	beq.n	80057aa <__lo0bits+0x5a>
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	4770      	bx	lr
 80057a2:	4610      	mov	r0, r2
 80057a4:	e7e9      	b.n	800577a <__lo0bits+0x2a>
 80057a6:	2000      	movs	r0, #0
 80057a8:	4770      	bx	lr
 80057aa:	2020      	movs	r0, #32
 80057ac:	4770      	bx	lr
	...

080057b0 <__i2b>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	2101      	movs	r1, #1
 80057b6:	f7ff ff03 	bl	80055c0 <_Balloc>
 80057ba:	4602      	mov	r2, r0
 80057bc:	b928      	cbnz	r0, 80057ca <__i2b+0x1a>
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <__i2b+0x24>)
 80057c0:	4805      	ldr	r0, [pc, #20]	; (80057d8 <__i2b+0x28>)
 80057c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80057c6:	f000 fb85 	bl	8005ed4 <__assert_func>
 80057ca:	2301      	movs	r3, #1
 80057cc:	6144      	str	r4, [r0, #20]
 80057ce:	6103      	str	r3, [r0, #16]
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	bf00      	nop
 80057d4:	08006d33 	.word	0x08006d33
 80057d8:	08006d44 	.word	0x08006d44

080057dc <__multiply>:
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	4691      	mov	r9, r2
 80057e2:	690a      	ldr	r2, [r1, #16]
 80057e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	bfb8      	it	lt
 80057ec:	460b      	movlt	r3, r1
 80057ee:	460c      	mov	r4, r1
 80057f0:	bfbc      	itt	lt
 80057f2:	464c      	movlt	r4, r9
 80057f4:	4699      	movlt	r9, r3
 80057f6:	6927      	ldr	r7, [r4, #16]
 80057f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	6861      	ldr	r1, [r4, #4]
 8005800:	eb07 060a 	add.w	r6, r7, sl
 8005804:	42b3      	cmp	r3, r6
 8005806:	b085      	sub	sp, #20
 8005808:	bfb8      	it	lt
 800580a:	3101      	addlt	r1, #1
 800580c:	f7ff fed8 	bl	80055c0 <_Balloc>
 8005810:	b930      	cbnz	r0, 8005820 <__multiply+0x44>
 8005812:	4602      	mov	r2, r0
 8005814:	4b44      	ldr	r3, [pc, #272]	; (8005928 <__multiply+0x14c>)
 8005816:	4845      	ldr	r0, [pc, #276]	; (800592c <__multiply+0x150>)
 8005818:	f240 115d 	movw	r1, #349	; 0x15d
 800581c:	f000 fb5a 	bl	8005ed4 <__assert_func>
 8005820:	f100 0514 	add.w	r5, r0, #20
 8005824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005828:	462b      	mov	r3, r5
 800582a:	2200      	movs	r2, #0
 800582c:	4543      	cmp	r3, r8
 800582e:	d321      	bcc.n	8005874 <__multiply+0x98>
 8005830:	f104 0314 	add.w	r3, r4, #20
 8005834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005838:	f109 0314 	add.w	r3, r9, #20
 800583c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005840:	9202      	str	r2, [sp, #8]
 8005842:	1b3a      	subs	r2, r7, r4
 8005844:	3a15      	subs	r2, #21
 8005846:	f022 0203 	bic.w	r2, r2, #3
 800584a:	3204      	adds	r2, #4
 800584c:	f104 0115 	add.w	r1, r4, #21
 8005850:	428f      	cmp	r7, r1
 8005852:	bf38      	it	cc
 8005854:	2204      	movcc	r2, #4
 8005856:	9201      	str	r2, [sp, #4]
 8005858:	9a02      	ldr	r2, [sp, #8]
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d80c      	bhi.n	800587a <__multiply+0x9e>
 8005860:	2e00      	cmp	r6, #0
 8005862:	dd03      	ble.n	800586c <__multiply+0x90>
 8005864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05a      	beq.n	8005922 <__multiply+0x146>
 800586c:	6106      	str	r6, [r0, #16]
 800586e:	b005      	add	sp, #20
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005874:	f843 2b04 	str.w	r2, [r3], #4
 8005878:	e7d8      	b.n	800582c <__multiply+0x50>
 800587a:	f8b3 a000 	ldrh.w	sl, [r3]
 800587e:	f1ba 0f00 	cmp.w	sl, #0
 8005882:	d024      	beq.n	80058ce <__multiply+0xf2>
 8005884:	f104 0e14 	add.w	lr, r4, #20
 8005888:	46a9      	mov	r9, r5
 800588a:	f04f 0c00 	mov.w	ip, #0
 800588e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005892:	f8d9 1000 	ldr.w	r1, [r9]
 8005896:	fa1f fb82 	uxth.w	fp, r2
 800589a:	b289      	uxth	r1, r1
 800589c:	fb0a 110b 	mla	r1, sl, fp, r1
 80058a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80058a4:	f8d9 2000 	ldr.w	r2, [r9]
 80058a8:	4461      	add	r1, ip
 80058aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80058b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058b6:	b289      	uxth	r1, r1
 80058b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058bc:	4577      	cmp	r7, lr
 80058be:	f849 1b04 	str.w	r1, [r9], #4
 80058c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058c6:	d8e2      	bhi.n	800588e <__multiply+0xb2>
 80058c8:	9a01      	ldr	r2, [sp, #4]
 80058ca:	f845 c002 	str.w	ip, [r5, r2]
 80058ce:	9a03      	ldr	r2, [sp, #12]
 80058d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058d4:	3304      	adds	r3, #4
 80058d6:	f1b9 0f00 	cmp.w	r9, #0
 80058da:	d020      	beq.n	800591e <__multiply+0x142>
 80058dc:	6829      	ldr	r1, [r5, #0]
 80058de:	f104 0c14 	add.w	ip, r4, #20
 80058e2:	46ae      	mov	lr, r5
 80058e4:	f04f 0a00 	mov.w	sl, #0
 80058e8:	f8bc b000 	ldrh.w	fp, [ip]
 80058ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058f0:	fb09 220b 	mla	r2, r9, fp, r2
 80058f4:	4492      	add	sl, r2
 80058f6:	b289      	uxth	r1, r1
 80058f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80058fc:	f84e 1b04 	str.w	r1, [lr], #4
 8005900:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005904:	f8be 1000 	ldrh.w	r1, [lr]
 8005908:	0c12      	lsrs	r2, r2, #16
 800590a:	fb09 1102 	mla	r1, r9, r2, r1
 800590e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005912:	4567      	cmp	r7, ip
 8005914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005918:	d8e6      	bhi.n	80058e8 <__multiply+0x10c>
 800591a:	9a01      	ldr	r2, [sp, #4]
 800591c:	50a9      	str	r1, [r5, r2]
 800591e:	3504      	adds	r5, #4
 8005920:	e79a      	b.n	8005858 <__multiply+0x7c>
 8005922:	3e01      	subs	r6, #1
 8005924:	e79c      	b.n	8005860 <__multiply+0x84>
 8005926:	bf00      	nop
 8005928:	08006d33 	.word	0x08006d33
 800592c:	08006d44 	.word	0x08006d44

08005930 <__pow5mult>:
 8005930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005934:	4615      	mov	r5, r2
 8005936:	f012 0203 	ands.w	r2, r2, #3
 800593a:	4606      	mov	r6, r0
 800593c:	460f      	mov	r7, r1
 800593e:	d007      	beq.n	8005950 <__pow5mult+0x20>
 8005940:	4c25      	ldr	r4, [pc, #148]	; (80059d8 <__pow5mult+0xa8>)
 8005942:	3a01      	subs	r2, #1
 8005944:	2300      	movs	r3, #0
 8005946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800594a:	f7ff fe9b 	bl	8005684 <__multadd>
 800594e:	4607      	mov	r7, r0
 8005950:	10ad      	asrs	r5, r5, #2
 8005952:	d03d      	beq.n	80059d0 <__pow5mult+0xa0>
 8005954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005956:	b97c      	cbnz	r4, 8005978 <__pow5mult+0x48>
 8005958:	2010      	movs	r0, #16
 800595a:	f7ff fe1b 	bl	8005594 <malloc>
 800595e:	4602      	mov	r2, r0
 8005960:	6270      	str	r0, [r6, #36]	; 0x24
 8005962:	b928      	cbnz	r0, 8005970 <__pow5mult+0x40>
 8005964:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <__pow5mult+0xac>)
 8005966:	481e      	ldr	r0, [pc, #120]	; (80059e0 <__pow5mult+0xb0>)
 8005968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800596c:	f000 fab2 	bl	8005ed4 <__assert_func>
 8005970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005974:	6004      	str	r4, [r0, #0]
 8005976:	60c4      	str	r4, [r0, #12]
 8005978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800597c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005980:	b94c      	cbnz	r4, 8005996 <__pow5mult+0x66>
 8005982:	f240 2171 	movw	r1, #625	; 0x271
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff ff12 	bl	80057b0 <__i2b>
 800598c:	2300      	movs	r3, #0
 800598e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005992:	4604      	mov	r4, r0
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	f04f 0900 	mov.w	r9, #0
 800599a:	07eb      	lsls	r3, r5, #31
 800599c:	d50a      	bpl.n	80059b4 <__pow5mult+0x84>
 800599e:	4639      	mov	r1, r7
 80059a0:	4622      	mov	r2, r4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ff1a 	bl	80057dc <__multiply>
 80059a8:	4639      	mov	r1, r7
 80059aa:	4680      	mov	r8, r0
 80059ac:	4630      	mov	r0, r6
 80059ae:	f7ff fe47 	bl	8005640 <_Bfree>
 80059b2:	4647      	mov	r7, r8
 80059b4:	106d      	asrs	r5, r5, #1
 80059b6:	d00b      	beq.n	80059d0 <__pow5mult+0xa0>
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	b938      	cbnz	r0, 80059cc <__pow5mult+0x9c>
 80059bc:	4622      	mov	r2, r4
 80059be:	4621      	mov	r1, r4
 80059c0:	4630      	mov	r0, r6
 80059c2:	f7ff ff0b 	bl	80057dc <__multiply>
 80059c6:	6020      	str	r0, [r4, #0]
 80059c8:	f8c0 9000 	str.w	r9, [r0]
 80059cc:	4604      	mov	r4, r0
 80059ce:	e7e4      	b.n	800599a <__pow5mult+0x6a>
 80059d0:	4638      	mov	r0, r7
 80059d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d6:	bf00      	nop
 80059d8:	08006e90 	.word	0x08006e90
 80059dc:	08006cc1 	.word	0x08006cc1
 80059e0:	08006d44 	.word	0x08006d44

080059e4 <__lshift>:
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	460c      	mov	r4, r1
 80059ea:	6849      	ldr	r1, [r1, #4]
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	4607      	mov	r7, r0
 80059f6:	4691      	mov	r9, r2
 80059f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059fc:	f108 0601 	add.w	r6, r8, #1
 8005a00:	42b3      	cmp	r3, r6
 8005a02:	db0b      	blt.n	8005a1c <__lshift+0x38>
 8005a04:	4638      	mov	r0, r7
 8005a06:	f7ff fddb 	bl	80055c0 <_Balloc>
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	b948      	cbnz	r0, 8005a22 <__lshift+0x3e>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <__lshift+0xd8>)
 8005a12:	482b      	ldr	r0, [pc, #172]	; (8005ac0 <__lshift+0xdc>)
 8005a14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a18:	f000 fa5c 	bl	8005ed4 <__assert_func>
 8005a1c:	3101      	adds	r1, #1
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	e7ee      	b.n	8005a00 <__lshift+0x1c>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f100 0114 	add.w	r1, r0, #20
 8005a28:	f100 0210 	add.w	r2, r0, #16
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	4553      	cmp	r3, sl
 8005a30:	db37      	blt.n	8005aa2 <__lshift+0xbe>
 8005a32:	6920      	ldr	r0, [r4, #16]
 8005a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a38:	f104 0314 	add.w	r3, r4, #20
 8005a3c:	f019 091f 	ands.w	r9, r9, #31
 8005a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a48:	d02f      	beq.n	8005aaa <__lshift+0xc6>
 8005a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a4e:	468a      	mov	sl, r1
 8005a50:	f04f 0c00 	mov.w	ip, #0
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	fa02 f209 	lsl.w	r2, r2, r9
 8005a5a:	ea42 020c 	orr.w	r2, r2, ip
 8005a5e:	f84a 2b04 	str.w	r2, [sl], #4
 8005a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a66:	4298      	cmp	r0, r3
 8005a68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a6c:	d8f2      	bhi.n	8005a54 <__lshift+0x70>
 8005a6e:	1b03      	subs	r3, r0, r4
 8005a70:	3b15      	subs	r3, #21
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	3304      	adds	r3, #4
 8005a78:	f104 0215 	add.w	r2, r4, #21
 8005a7c:	4290      	cmp	r0, r2
 8005a7e:	bf38      	it	cc
 8005a80:	2304      	movcc	r3, #4
 8005a82:	f841 c003 	str.w	ip, [r1, r3]
 8005a86:	f1bc 0f00 	cmp.w	ip, #0
 8005a8a:	d001      	beq.n	8005a90 <__lshift+0xac>
 8005a8c:	f108 0602 	add.w	r6, r8, #2
 8005a90:	3e01      	subs	r6, #1
 8005a92:	4638      	mov	r0, r7
 8005a94:	612e      	str	r6, [r5, #16]
 8005a96:	4621      	mov	r1, r4
 8005a98:	f7ff fdd2 	bl	8005640 <_Bfree>
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	e7c1      	b.n	8005a2e <__lshift+0x4a>
 8005aaa:	3904      	subs	r1, #4
 8005aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ab4:	4298      	cmp	r0, r3
 8005ab6:	d8f9      	bhi.n	8005aac <__lshift+0xc8>
 8005ab8:	e7ea      	b.n	8005a90 <__lshift+0xac>
 8005aba:	bf00      	nop
 8005abc:	08006d33 	.word	0x08006d33
 8005ac0:	08006d44 	.word	0x08006d44

08005ac4 <__mcmp>:
 8005ac4:	b530      	push	{r4, r5, lr}
 8005ac6:	6902      	ldr	r2, [r0, #16]
 8005ac8:	690c      	ldr	r4, [r1, #16]
 8005aca:	1b12      	subs	r2, r2, r4
 8005acc:	d10e      	bne.n	8005aec <__mcmp+0x28>
 8005ace:	f100 0314 	add.w	r3, r0, #20
 8005ad2:	3114      	adds	r1, #20
 8005ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ae4:	42a5      	cmp	r5, r4
 8005ae6:	d003      	beq.n	8005af0 <__mcmp+0x2c>
 8005ae8:	d305      	bcc.n	8005af6 <__mcmp+0x32>
 8005aea:	2201      	movs	r2, #1
 8005aec:	4610      	mov	r0, r2
 8005aee:	bd30      	pop	{r4, r5, pc}
 8005af0:	4283      	cmp	r3, r0
 8005af2:	d3f3      	bcc.n	8005adc <__mcmp+0x18>
 8005af4:	e7fa      	b.n	8005aec <__mcmp+0x28>
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295
 8005afa:	e7f7      	b.n	8005aec <__mcmp+0x28>

08005afc <__mdiff>:
 8005afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	460c      	mov	r4, r1
 8005b02:	4606      	mov	r6, r0
 8005b04:	4611      	mov	r1, r2
 8005b06:	4620      	mov	r0, r4
 8005b08:	4690      	mov	r8, r2
 8005b0a:	f7ff ffdb 	bl	8005ac4 <__mcmp>
 8005b0e:	1e05      	subs	r5, r0, #0
 8005b10:	d110      	bne.n	8005b34 <__mdiff+0x38>
 8005b12:	4629      	mov	r1, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff fd53 	bl	80055c0 <_Balloc>
 8005b1a:	b930      	cbnz	r0, 8005b2a <__mdiff+0x2e>
 8005b1c:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <__mdiff+0x10c>)
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f240 2132 	movw	r1, #562	; 0x232
 8005b24:	4839      	ldr	r0, [pc, #228]	; (8005c0c <__mdiff+0x110>)
 8005b26:	f000 f9d5 	bl	8005ed4 <__assert_func>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	bfa4      	itt	ge
 8005b36:	4643      	movge	r3, r8
 8005b38:	46a0      	movge	r8, r4
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b40:	bfa6      	itte	ge
 8005b42:	461c      	movge	r4, r3
 8005b44:	2500      	movge	r5, #0
 8005b46:	2501      	movlt	r5, #1
 8005b48:	f7ff fd3a 	bl	80055c0 <_Balloc>
 8005b4c:	b920      	cbnz	r0, 8005b58 <__mdiff+0x5c>
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <__mdiff+0x10c>)
 8005b50:	4602      	mov	r2, r0
 8005b52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b56:	e7e5      	b.n	8005b24 <__mdiff+0x28>
 8005b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b5c:	6926      	ldr	r6, [r4, #16]
 8005b5e:	60c5      	str	r5, [r0, #12]
 8005b60:	f104 0914 	add.w	r9, r4, #20
 8005b64:	f108 0514 	add.w	r5, r8, #20
 8005b68:	f100 0e14 	add.w	lr, r0, #20
 8005b6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b74:	f108 0210 	add.w	r2, r8, #16
 8005b78:	46f2      	mov	sl, lr
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b84:	fa1f f883 	uxth.w	r8, r3
 8005b88:	fa11 f18b 	uxtah	r1, r1, fp
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	eba1 0808 	sub.w	r8, r1, r8
 8005b92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b9a:	fa1f f888 	uxth.w	r8, r8
 8005b9e:	1419      	asrs	r1, r3, #16
 8005ba0:	454e      	cmp	r6, r9
 8005ba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ba6:	f84a 3b04 	str.w	r3, [sl], #4
 8005baa:	d8e7      	bhi.n	8005b7c <__mdiff+0x80>
 8005bac:	1b33      	subs	r3, r6, r4
 8005bae:	3b15      	subs	r3, #21
 8005bb0:	f023 0303 	bic.w	r3, r3, #3
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	3415      	adds	r4, #21
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	bf38      	it	cc
 8005bbc:	2304      	movcc	r3, #4
 8005bbe:	441d      	add	r5, r3
 8005bc0:	4473      	add	r3, lr
 8005bc2:	469e      	mov	lr, r3
 8005bc4:	462e      	mov	r6, r5
 8005bc6:	4566      	cmp	r6, ip
 8005bc8:	d30e      	bcc.n	8005be8 <__mdiff+0xec>
 8005bca:	f10c 0203 	add.w	r2, ip, #3
 8005bce:	1b52      	subs	r2, r2, r5
 8005bd0:	f022 0203 	bic.w	r2, r2, #3
 8005bd4:	3d03      	subs	r5, #3
 8005bd6:	45ac      	cmp	ip, r5
 8005bd8:	bf38      	it	cc
 8005bda:	2200      	movcc	r2, #0
 8005bdc:	441a      	add	r2, r3
 8005bde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005be2:	b17b      	cbz	r3, 8005c04 <__mdiff+0x108>
 8005be4:	6107      	str	r7, [r0, #16]
 8005be6:	e7a3      	b.n	8005b30 <__mdiff+0x34>
 8005be8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005bec:	fa11 f288 	uxtah	r2, r1, r8
 8005bf0:	1414      	asrs	r4, r2, #16
 8005bf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8005c00:	1421      	asrs	r1, r4, #16
 8005c02:	e7e0      	b.n	8005bc6 <__mdiff+0xca>
 8005c04:	3f01      	subs	r7, #1
 8005c06:	e7ea      	b.n	8005bde <__mdiff+0xe2>
 8005c08:	08006d33 	.word	0x08006d33
 8005c0c:	08006d44 	.word	0x08006d44

08005c10 <__d2b>:
 8005c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c14:	4689      	mov	r9, r1
 8005c16:	2101      	movs	r1, #1
 8005c18:	ec57 6b10 	vmov	r6, r7, d0
 8005c1c:	4690      	mov	r8, r2
 8005c1e:	f7ff fccf 	bl	80055c0 <_Balloc>
 8005c22:	4604      	mov	r4, r0
 8005c24:	b930      	cbnz	r0, 8005c34 <__d2b+0x24>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <__d2b+0xb0>)
 8005c2a:	4826      	ldr	r0, [pc, #152]	; (8005cc4 <__d2b+0xb4>)
 8005c2c:	f240 310a 	movw	r1, #778	; 0x30a
 8005c30:	f000 f950 	bl	8005ed4 <__assert_func>
 8005c34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c3c:	bb35      	cbnz	r5, 8005c8c <__d2b+0x7c>
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	d028      	beq.n	8005c96 <__d2b+0x86>
 8005c44:	4668      	mov	r0, sp
 8005c46:	9600      	str	r6, [sp, #0]
 8005c48:	f7ff fd82 	bl	8005750 <__lo0bits>
 8005c4c:	9900      	ldr	r1, [sp, #0]
 8005c4e:	b300      	cbz	r0, 8005c92 <__d2b+0x82>
 8005c50:	9a01      	ldr	r2, [sp, #4]
 8005c52:	f1c0 0320 	rsb	r3, r0, #32
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	40c2      	lsrs	r2, r0
 8005c5e:	6163      	str	r3, [r4, #20]
 8005c60:	9201      	str	r2, [sp, #4]
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	61a3      	str	r3, [r4, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bf14      	ite	ne
 8005c6a:	2202      	movne	r2, #2
 8005c6c:	2201      	moveq	r2, #1
 8005c6e:	6122      	str	r2, [r4, #16]
 8005c70:	b1d5      	cbz	r5, 8005ca8 <__d2b+0x98>
 8005c72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c76:	4405      	add	r5, r0
 8005c78:	f8c9 5000 	str.w	r5, [r9]
 8005c7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c80:	f8c8 0000 	str.w	r0, [r8]
 8005c84:	4620      	mov	r0, r4
 8005c86:	b003      	add	sp, #12
 8005c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c90:	e7d5      	b.n	8005c3e <__d2b+0x2e>
 8005c92:	6161      	str	r1, [r4, #20]
 8005c94:	e7e5      	b.n	8005c62 <__d2b+0x52>
 8005c96:	a801      	add	r0, sp, #4
 8005c98:	f7ff fd5a 	bl	8005750 <__lo0bits>
 8005c9c:	9b01      	ldr	r3, [sp, #4]
 8005c9e:	6163      	str	r3, [r4, #20]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	6122      	str	r2, [r4, #16]
 8005ca4:	3020      	adds	r0, #32
 8005ca6:	e7e3      	b.n	8005c70 <__d2b+0x60>
 8005ca8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cb0:	f8c9 0000 	str.w	r0, [r9]
 8005cb4:	6918      	ldr	r0, [r3, #16]
 8005cb6:	f7ff fd2b 	bl	8005710 <__hi0bits>
 8005cba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cbe:	e7df      	b.n	8005c80 <__d2b+0x70>
 8005cc0:	08006d33 	.word	0x08006d33
 8005cc4:	08006d44 	.word	0x08006d44

08005cc8 <_calloc_r>:
 8005cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cca:	fba1 2402 	umull	r2, r4, r1, r2
 8005cce:	b94c      	cbnz	r4, 8005ce4 <_calloc_r+0x1c>
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	9201      	str	r2, [sp, #4]
 8005cd4:	f000 f87a 	bl	8005dcc <_malloc_r>
 8005cd8:	9a01      	ldr	r2, [sp, #4]
 8005cda:	4605      	mov	r5, r0
 8005cdc:	b930      	cbnz	r0, 8005cec <_calloc_r+0x24>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	b003      	add	sp, #12
 8005ce2:	bd30      	pop	{r4, r5, pc}
 8005ce4:	220c      	movs	r2, #12
 8005ce6:	6002      	str	r2, [r0, #0]
 8005ce8:	2500      	movs	r5, #0
 8005cea:	e7f8      	b.n	8005cde <_calloc_r+0x16>
 8005cec:	4621      	mov	r1, r4
 8005cee:	f7fe f961 	bl	8003fb4 <memset>
 8005cf2:	e7f4      	b.n	8005cde <_calloc_r+0x16>

08005cf4 <_free_r>:
 8005cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	d044      	beq.n	8005d84 <_free_r+0x90>
 8005cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cfe:	9001      	str	r0, [sp, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f1a1 0404 	sub.w	r4, r1, #4
 8005d06:	bfb8      	it	lt
 8005d08:	18e4      	addlt	r4, r4, r3
 8005d0a:	f000 f925 	bl	8005f58 <__malloc_lock>
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <_free_r+0x94>)
 8005d10:	9801      	ldr	r0, [sp, #4]
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	b933      	cbnz	r3, 8005d24 <_free_r+0x30>
 8005d16:	6063      	str	r3, [r4, #4]
 8005d18:	6014      	str	r4, [r2, #0]
 8005d1a:	b003      	add	sp, #12
 8005d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d20:	f000 b920 	b.w	8005f64 <__malloc_unlock>
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d908      	bls.n	8005d3a <_free_r+0x46>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1961      	adds	r1, r4, r5
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf01      	itttt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	1949      	addeq	r1, r1, r5
 8005d36:	6021      	streq	r1, [r4, #0]
 8005d38:	e7ed      	b.n	8005d16 <_free_r+0x22>
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b10b      	cbz	r3, 8005d44 <_free_r+0x50>
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	d9fa      	bls.n	8005d3a <_free_r+0x46>
 8005d44:	6811      	ldr	r1, [r2, #0]
 8005d46:	1855      	adds	r5, r2, r1
 8005d48:	42a5      	cmp	r5, r4
 8005d4a:	d10b      	bne.n	8005d64 <_free_r+0x70>
 8005d4c:	6824      	ldr	r4, [r4, #0]
 8005d4e:	4421      	add	r1, r4
 8005d50:	1854      	adds	r4, r2, r1
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	6011      	str	r1, [r2, #0]
 8005d56:	d1e0      	bne.n	8005d1a <_free_r+0x26>
 8005d58:	681c      	ldr	r4, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	6053      	str	r3, [r2, #4]
 8005d5e:	4421      	add	r1, r4
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	e7da      	b.n	8005d1a <_free_r+0x26>
 8005d64:	d902      	bls.n	8005d6c <_free_r+0x78>
 8005d66:	230c      	movs	r3, #12
 8005d68:	6003      	str	r3, [r0, #0]
 8005d6a:	e7d6      	b.n	8005d1a <_free_r+0x26>
 8005d6c:	6825      	ldr	r5, [r4, #0]
 8005d6e:	1961      	adds	r1, r4, r5
 8005d70:	428b      	cmp	r3, r1
 8005d72:	bf04      	itt	eq
 8005d74:	6819      	ldreq	r1, [r3, #0]
 8005d76:	685b      	ldreq	r3, [r3, #4]
 8005d78:	6063      	str	r3, [r4, #4]
 8005d7a:	bf04      	itt	eq
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	6054      	str	r4, [r2, #4]
 8005d82:	e7ca      	b.n	8005d1a <_free_r+0x26>
 8005d84:	b003      	add	sp, #12
 8005d86:	bd30      	pop	{r4, r5, pc}
 8005d88:	20000200 	.word	0x20000200

08005d8c <sbrk_aligned>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	4e0e      	ldr	r6, [pc, #56]	; (8005dc8 <sbrk_aligned+0x3c>)
 8005d90:	460c      	mov	r4, r1
 8005d92:	6831      	ldr	r1, [r6, #0]
 8005d94:	4605      	mov	r5, r0
 8005d96:	b911      	cbnz	r1, 8005d9e <sbrk_aligned+0x12>
 8005d98:	f000 f88c 	bl	8005eb4 <_sbrk_r>
 8005d9c:	6030      	str	r0, [r6, #0]
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 f887 	bl	8005eb4 <_sbrk_r>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d00a      	beq.n	8005dc0 <sbrk_aligned+0x34>
 8005daa:	1cc4      	adds	r4, r0, #3
 8005dac:	f024 0403 	bic.w	r4, r4, #3
 8005db0:	42a0      	cmp	r0, r4
 8005db2:	d007      	beq.n	8005dc4 <sbrk_aligned+0x38>
 8005db4:	1a21      	subs	r1, r4, r0
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f87c 	bl	8005eb4 <_sbrk_r>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d101      	bne.n	8005dc4 <sbrk_aligned+0x38>
 8005dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	20000204 	.word	0x20000204

08005dcc <_malloc_r>:
 8005dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd0:	1ccd      	adds	r5, r1, #3
 8005dd2:	f025 0503 	bic.w	r5, r5, #3
 8005dd6:	3508      	adds	r5, #8
 8005dd8:	2d0c      	cmp	r5, #12
 8005dda:	bf38      	it	cc
 8005ddc:	250c      	movcc	r5, #12
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	4607      	mov	r7, r0
 8005de2:	db01      	blt.n	8005de8 <_malloc_r+0x1c>
 8005de4:	42a9      	cmp	r1, r5
 8005de6:	d905      	bls.n	8005df4 <_malloc_r+0x28>
 8005de8:	230c      	movs	r3, #12
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	2600      	movs	r6, #0
 8005dee:	4630      	mov	r0, r6
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	4e2e      	ldr	r6, [pc, #184]	; (8005eb0 <_malloc_r+0xe4>)
 8005df6:	f000 f8af 	bl	8005f58 <__malloc_lock>
 8005dfa:	6833      	ldr	r3, [r6, #0]
 8005dfc:	461c      	mov	r4, r3
 8005dfe:	bb34      	cbnz	r4, 8005e4e <_malloc_r+0x82>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4638      	mov	r0, r7
 8005e04:	f7ff ffc2 	bl	8005d8c <sbrk_aligned>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	d14d      	bne.n	8005eaa <_malloc_r+0xde>
 8005e0e:	6834      	ldr	r4, [r6, #0]
 8005e10:	4626      	mov	r6, r4
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d140      	bne.n	8005e98 <_malloc_r+0xcc>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	eb04 0803 	add.w	r8, r4, r3
 8005e20:	f000 f848 	bl	8005eb4 <_sbrk_r>
 8005e24:	4580      	cmp	r8, r0
 8005e26:	d13a      	bne.n	8005e9e <_malloc_r+0xd2>
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	3503      	adds	r5, #3
 8005e2c:	1a6d      	subs	r5, r5, r1
 8005e2e:	f025 0503 	bic.w	r5, r5, #3
 8005e32:	3508      	adds	r5, #8
 8005e34:	2d0c      	cmp	r5, #12
 8005e36:	bf38      	it	cc
 8005e38:	250c      	movcc	r5, #12
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f7ff ffa5 	bl	8005d8c <sbrk_aligned>
 8005e42:	3001      	adds	r0, #1
 8005e44:	d02b      	beq.n	8005e9e <_malloc_r+0xd2>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	442b      	add	r3, r5
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	e00e      	b.n	8005e6c <_malloc_r+0xa0>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	1b52      	subs	r2, r2, r5
 8005e52:	d41e      	bmi.n	8005e92 <_malloc_r+0xc6>
 8005e54:	2a0b      	cmp	r2, #11
 8005e56:	d916      	bls.n	8005e86 <_malloc_r+0xba>
 8005e58:	1961      	adds	r1, r4, r5
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	6025      	str	r5, [r4, #0]
 8005e5e:	bf18      	it	ne
 8005e60:	6059      	strne	r1, [r3, #4]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	bf08      	it	eq
 8005e66:	6031      	streq	r1, [r6, #0]
 8005e68:	5162      	str	r2, [r4, r5]
 8005e6a:	604b      	str	r3, [r1, #4]
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f104 060b 	add.w	r6, r4, #11
 8005e72:	f000 f877 	bl	8005f64 <__malloc_unlock>
 8005e76:	f026 0607 	bic.w	r6, r6, #7
 8005e7a:	1d23      	adds	r3, r4, #4
 8005e7c:	1af2      	subs	r2, r6, r3
 8005e7e:	d0b6      	beq.n	8005dee <_malloc_r+0x22>
 8005e80:	1b9b      	subs	r3, r3, r6
 8005e82:	50a3      	str	r3, [r4, r2]
 8005e84:	e7b3      	b.n	8005dee <_malloc_r+0x22>
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	bf0c      	ite	eq
 8005e8c:	6032      	streq	r2, [r6, #0]
 8005e8e:	605a      	strne	r2, [r3, #4]
 8005e90:	e7ec      	b.n	8005e6c <_malloc_r+0xa0>
 8005e92:	4623      	mov	r3, r4
 8005e94:	6864      	ldr	r4, [r4, #4]
 8005e96:	e7b2      	b.n	8005dfe <_malloc_r+0x32>
 8005e98:	4634      	mov	r4, r6
 8005e9a:	6876      	ldr	r6, [r6, #4]
 8005e9c:	e7b9      	b.n	8005e12 <_malloc_r+0x46>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f000 f85e 	bl	8005f64 <__malloc_unlock>
 8005ea8:	e7a1      	b.n	8005dee <_malloc_r+0x22>
 8005eaa:	6025      	str	r5, [r4, #0]
 8005eac:	e7de      	b.n	8005e6c <_malloc_r+0xa0>
 8005eae:	bf00      	nop
 8005eb0:	20000200 	.word	0x20000200

08005eb4 <_sbrk_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4d06      	ldr	r5, [pc, #24]	; (8005ed0 <_sbrk_r+0x1c>)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	4604      	mov	r4, r0
 8005ebc:	4608      	mov	r0, r1
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	f7fc fa56 	bl	8002370 <_sbrk>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_sbrk_r+0x1a>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_sbrk_r+0x1a>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	20000208 	.word	0x20000208

08005ed4 <__assert_func>:
 8005ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ed6:	4614      	mov	r4, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <__assert_func+0x2c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	68d8      	ldr	r0, [r3, #12]
 8005ee2:	b14c      	cbz	r4, 8005ef8 <__assert_func+0x24>
 8005ee4:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <__assert_func+0x30>)
 8005ee6:	9100      	str	r1, [sp, #0]
 8005ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005eec:	4906      	ldr	r1, [pc, #24]	; (8005f08 <__assert_func+0x34>)
 8005eee:	462b      	mov	r3, r5
 8005ef0:	f000 f80e 	bl	8005f10 <fiprintf>
 8005ef4:	f000 fa64 	bl	80063c0 <abort>
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <__assert_func+0x38>)
 8005efa:	461c      	mov	r4, r3
 8005efc:	e7f3      	b.n	8005ee6 <__assert_func+0x12>
 8005efe:	bf00      	nop
 8005f00:	2000000c 	.word	0x2000000c
 8005f04:	08006e9c 	.word	0x08006e9c
 8005f08:	08006ea9 	.word	0x08006ea9
 8005f0c:	08006ed7 	.word	0x08006ed7

08005f10 <fiprintf>:
 8005f10:	b40e      	push	{r1, r2, r3}
 8005f12:	b503      	push	{r0, r1, lr}
 8005f14:	4601      	mov	r1, r0
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	4805      	ldr	r0, [pc, #20]	; (8005f30 <fiprintf+0x20>)
 8005f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	f000 f84f 	bl	8005fc4 <_vfiprintf_r>
 8005f26:	b002      	add	sp, #8
 8005f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f2c:	b003      	add	sp, #12
 8005f2e:	4770      	bx	lr
 8005f30:	2000000c 	.word	0x2000000c

08005f34 <__ascii_mbtowc>:
 8005f34:	b082      	sub	sp, #8
 8005f36:	b901      	cbnz	r1, 8005f3a <__ascii_mbtowc+0x6>
 8005f38:	a901      	add	r1, sp, #4
 8005f3a:	b142      	cbz	r2, 8005f4e <__ascii_mbtowc+0x1a>
 8005f3c:	b14b      	cbz	r3, 8005f52 <__ascii_mbtowc+0x1e>
 8005f3e:	7813      	ldrb	r3, [r2, #0]
 8005f40:	600b      	str	r3, [r1, #0]
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	1e10      	subs	r0, r2, #0
 8005f46:	bf18      	it	ne
 8005f48:	2001      	movne	r0, #1
 8005f4a:	b002      	add	sp, #8
 8005f4c:	4770      	bx	lr
 8005f4e:	4610      	mov	r0, r2
 8005f50:	e7fb      	b.n	8005f4a <__ascii_mbtowc+0x16>
 8005f52:	f06f 0001 	mvn.w	r0, #1
 8005f56:	e7f8      	b.n	8005f4a <__ascii_mbtowc+0x16>

08005f58 <__malloc_lock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__malloc_lock+0x8>)
 8005f5a:	f000 bbf1 	b.w	8006740 <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	2000020c 	.word	0x2000020c

08005f64 <__malloc_unlock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_unlock+0x8>)
 8005f66:	f000 bbec 	b.w	8006742 <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	2000020c 	.word	0x2000020c

08005f70 <__sfputc_r>:
 8005f70:	6893      	ldr	r3, [r2, #8]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	b410      	push	{r4}
 8005f78:	6093      	str	r3, [r2, #8]
 8005f7a:	da08      	bge.n	8005f8e <__sfputc_r+0x1e>
 8005f7c:	6994      	ldr	r4, [r2, #24]
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	db01      	blt.n	8005f86 <__sfputc_r+0x16>
 8005f82:	290a      	cmp	r1, #10
 8005f84:	d103      	bne.n	8005f8e <__sfputc_r+0x1e>
 8005f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8a:	f000 b94b 	b.w	8006224 <__swbuf_r>
 8005f8e:	6813      	ldr	r3, [r2, #0]
 8005f90:	1c58      	adds	r0, r3, #1
 8005f92:	6010      	str	r0, [r2, #0]
 8005f94:	7019      	strb	r1, [r3, #0]
 8005f96:	4608      	mov	r0, r1
 8005f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <__sfputs_r>:
 8005f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	460f      	mov	r7, r1
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	18d5      	adds	r5, r2, r3
 8005fa8:	42ac      	cmp	r4, r5
 8005faa:	d101      	bne.n	8005fb0 <__sfputs_r+0x12>
 8005fac:	2000      	movs	r0, #0
 8005fae:	e007      	b.n	8005fc0 <__sfputs_r+0x22>
 8005fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb4:	463a      	mov	r2, r7
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ffda 	bl	8005f70 <__sfputc_r>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d1f3      	bne.n	8005fa8 <__sfputs_r+0xa>
 8005fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fc4 <_vfiprintf_r>:
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	460d      	mov	r5, r1
 8005fca:	b09d      	sub	sp, #116	; 0x74
 8005fcc:	4614      	mov	r4, r2
 8005fce:	4698      	mov	r8, r3
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	b118      	cbz	r0, 8005fdc <_vfiprintf_r+0x18>
 8005fd4:	6983      	ldr	r3, [r0, #24]
 8005fd6:	b90b      	cbnz	r3, 8005fdc <_vfiprintf_r+0x18>
 8005fd8:	f000 fb14 	bl	8006604 <__sinit>
 8005fdc:	4b89      	ldr	r3, [pc, #548]	; (8006204 <_vfiprintf_r+0x240>)
 8005fde:	429d      	cmp	r5, r3
 8005fe0:	d11b      	bne.n	800601a <_vfiprintf_r+0x56>
 8005fe2:	6875      	ldr	r5, [r6, #4]
 8005fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fe6:	07d9      	lsls	r1, r3, #31
 8005fe8:	d405      	bmi.n	8005ff6 <_vfiprintf_r+0x32>
 8005fea:	89ab      	ldrh	r3, [r5, #12]
 8005fec:	059a      	lsls	r2, r3, #22
 8005fee:	d402      	bmi.n	8005ff6 <_vfiprintf_r+0x32>
 8005ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ff2:	f000 fba5 	bl	8006740 <__retarget_lock_acquire_recursive>
 8005ff6:	89ab      	ldrh	r3, [r5, #12]
 8005ff8:	071b      	lsls	r3, r3, #28
 8005ffa:	d501      	bpl.n	8006000 <_vfiprintf_r+0x3c>
 8005ffc:	692b      	ldr	r3, [r5, #16]
 8005ffe:	b9eb      	cbnz	r3, 800603c <_vfiprintf_r+0x78>
 8006000:	4629      	mov	r1, r5
 8006002:	4630      	mov	r0, r6
 8006004:	f000 f96e 	bl	80062e4 <__swsetup_r>
 8006008:	b1c0      	cbz	r0, 800603c <_vfiprintf_r+0x78>
 800600a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800600c:	07dc      	lsls	r4, r3, #31
 800600e:	d50e      	bpl.n	800602e <_vfiprintf_r+0x6a>
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	b01d      	add	sp, #116	; 0x74
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	4b7b      	ldr	r3, [pc, #492]	; (8006208 <_vfiprintf_r+0x244>)
 800601c:	429d      	cmp	r5, r3
 800601e:	d101      	bne.n	8006024 <_vfiprintf_r+0x60>
 8006020:	68b5      	ldr	r5, [r6, #8]
 8006022:	e7df      	b.n	8005fe4 <_vfiprintf_r+0x20>
 8006024:	4b79      	ldr	r3, [pc, #484]	; (800620c <_vfiprintf_r+0x248>)
 8006026:	429d      	cmp	r5, r3
 8006028:	bf08      	it	eq
 800602a:	68f5      	ldreq	r5, [r6, #12]
 800602c:	e7da      	b.n	8005fe4 <_vfiprintf_r+0x20>
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	0598      	lsls	r0, r3, #22
 8006032:	d4ed      	bmi.n	8006010 <_vfiprintf_r+0x4c>
 8006034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006036:	f000 fb84 	bl	8006742 <__retarget_lock_release_recursive>
 800603a:	e7e9      	b.n	8006010 <_vfiprintf_r+0x4c>
 800603c:	2300      	movs	r3, #0
 800603e:	9309      	str	r3, [sp, #36]	; 0x24
 8006040:	2320      	movs	r3, #32
 8006042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006046:	f8cd 800c 	str.w	r8, [sp, #12]
 800604a:	2330      	movs	r3, #48	; 0x30
 800604c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006210 <_vfiprintf_r+0x24c>
 8006050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006054:	f04f 0901 	mov.w	r9, #1
 8006058:	4623      	mov	r3, r4
 800605a:	469a      	mov	sl, r3
 800605c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006060:	b10a      	cbz	r2, 8006066 <_vfiprintf_r+0xa2>
 8006062:	2a25      	cmp	r2, #37	; 0x25
 8006064:	d1f9      	bne.n	800605a <_vfiprintf_r+0x96>
 8006066:	ebba 0b04 	subs.w	fp, sl, r4
 800606a:	d00b      	beq.n	8006084 <_vfiprintf_r+0xc0>
 800606c:	465b      	mov	r3, fp
 800606e:	4622      	mov	r2, r4
 8006070:	4629      	mov	r1, r5
 8006072:	4630      	mov	r0, r6
 8006074:	f7ff ff93 	bl	8005f9e <__sfputs_r>
 8006078:	3001      	adds	r0, #1
 800607a:	f000 80aa 	beq.w	80061d2 <_vfiprintf_r+0x20e>
 800607e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006080:	445a      	add	r2, fp
 8006082:	9209      	str	r2, [sp, #36]	; 0x24
 8006084:	f89a 3000 	ldrb.w	r3, [sl]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a2 	beq.w	80061d2 <_vfiprintf_r+0x20e>
 800608e:	2300      	movs	r3, #0
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006098:	f10a 0a01 	add.w	sl, sl, #1
 800609c:	9304      	str	r3, [sp, #16]
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060a4:	931a      	str	r3, [sp, #104]	; 0x68
 80060a6:	4654      	mov	r4, sl
 80060a8:	2205      	movs	r2, #5
 80060aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ae:	4858      	ldr	r0, [pc, #352]	; (8006210 <_vfiprintf_r+0x24c>)
 80060b0:	f7fa f8ee 	bl	8000290 <memchr>
 80060b4:	9a04      	ldr	r2, [sp, #16]
 80060b6:	b9d8      	cbnz	r0, 80060f0 <_vfiprintf_r+0x12c>
 80060b8:	06d1      	lsls	r1, r2, #27
 80060ba:	bf44      	itt	mi
 80060bc:	2320      	movmi	r3, #32
 80060be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060c2:	0713      	lsls	r3, r2, #28
 80060c4:	bf44      	itt	mi
 80060c6:	232b      	movmi	r3, #43	; 0x2b
 80060c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060cc:	f89a 3000 	ldrb.w	r3, [sl]
 80060d0:	2b2a      	cmp	r3, #42	; 0x2a
 80060d2:	d015      	beq.n	8006100 <_vfiprintf_r+0x13c>
 80060d4:	9a07      	ldr	r2, [sp, #28]
 80060d6:	4654      	mov	r4, sl
 80060d8:	2000      	movs	r0, #0
 80060da:	f04f 0c0a 	mov.w	ip, #10
 80060de:	4621      	mov	r1, r4
 80060e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060e4:	3b30      	subs	r3, #48	; 0x30
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d94e      	bls.n	8006188 <_vfiprintf_r+0x1c4>
 80060ea:	b1b0      	cbz	r0, 800611a <_vfiprintf_r+0x156>
 80060ec:	9207      	str	r2, [sp, #28]
 80060ee:	e014      	b.n	800611a <_vfiprintf_r+0x156>
 80060f0:	eba0 0308 	sub.w	r3, r0, r8
 80060f4:	fa09 f303 	lsl.w	r3, r9, r3
 80060f8:	4313      	orrs	r3, r2
 80060fa:	9304      	str	r3, [sp, #16]
 80060fc:	46a2      	mov	sl, r4
 80060fe:	e7d2      	b.n	80060a6 <_vfiprintf_r+0xe2>
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	1d19      	adds	r1, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	9103      	str	r1, [sp, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	bfbb      	ittet	lt
 800610c:	425b      	neglt	r3, r3
 800610e:	f042 0202 	orrlt.w	r2, r2, #2
 8006112:	9307      	strge	r3, [sp, #28]
 8006114:	9307      	strlt	r3, [sp, #28]
 8006116:	bfb8      	it	lt
 8006118:	9204      	strlt	r2, [sp, #16]
 800611a:	7823      	ldrb	r3, [r4, #0]
 800611c:	2b2e      	cmp	r3, #46	; 0x2e
 800611e:	d10c      	bne.n	800613a <_vfiprintf_r+0x176>
 8006120:	7863      	ldrb	r3, [r4, #1]
 8006122:	2b2a      	cmp	r3, #42	; 0x2a
 8006124:	d135      	bne.n	8006192 <_vfiprintf_r+0x1ce>
 8006126:	9b03      	ldr	r3, [sp, #12]
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	9203      	str	r2, [sp, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfb8      	it	lt
 8006132:	f04f 33ff 	movlt.w	r3, #4294967295
 8006136:	3402      	adds	r4, #2
 8006138:	9305      	str	r3, [sp, #20]
 800613a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006220 <_vfiprintf_r+0x25c>
 800613e:	7821      	ldrb	r1, [r4, #0]
 8006140:	2203      	movs	r2, #3
 8006142:	4650      	mov	r0, sl
 8006144:	f7fa f8a4 	bl	8000290 <memchr>
 8006148:	b140      	cbz	r0, 800615c <_vfiprintf_r+0x198>
 800614a:	2340      	movs	r3, #64	; 0x40
 800614c:	eba0 000a 	sub.w	r0, r0, sl
 8006150:	fa03 f000 	lsl.w	r0, r3, r0
 8006154:	9b04      	ldr	r3, [sp, #16]
 8006156:	4303      	orrs	r3, r0
 8006158:	3401      	adds	r4, #1
 800615a:	9304      	str	r3, [sp, #16]
 800615c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006160:	482c      	ldr	r0, [pc, #176]	; (8006214 <_vfiprintf_r+0x250>)
 8006162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006166:	2206      	movs	r2, #6
 8006168:	f7fa f892 	bl	8000290 <memchr>
 800616c:	2800      	cmp	r0, #0
 800616e:	d03f      	beq.n	80061f0 <_vfiprintf_r+0x22c>
 8006170:	4b29      	ldr	r3, [pc, #164]	; (8006218 <_vfiprintf_r+0x254>)
 8006172:	bb1b      	cbnz	r3, 80061bc <_vfiprintf_r+0x1f8>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	3307      	adds	r3, #7
 8006178:	f023 0307 	bic.w	r3, r3, #7
 800617c:	3308      	adds	r3, #8
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006182:	443b      	add	r3, r7
 8006184:	9309      	str	r3, [sp, #36]	; 0x24
 8006186:	e767      	b.n	8006058 <_vfiprintf_r+0x94>
 8006188:	fb0c 3202 	mla	r2, ip, r2, r3
 800618c:	460c      	mov	r4, r1
 800618e:	2001      	movs	r0, #1
 8006190:	e7a5      	b.n	80060de <_vfiprintf_r+0x11a>
 8006192:	2300      	movs	r3, #0
 8006194:	3401      	adds	r4, #1
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	4619      	mov	r1, r3
 800619a:	f04f 0c0a 	mov.w	ip, #10
 800619e:	4620      	mov	r0, r4
 80061a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061a4:	3a30      	subs	r2, #48	; 0x30
 80061a6:	2a09      	cmp	r2, #9
 80061a8:	d903      	bls.n	80061b2 <_vfiprintf_r+0x1ee>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0c5      	beq.n	800613a <_vfiprintf_r+0x176>
 80061ae:	9105      	str	r1, [sp, #20]
 80061b0:	e7c3      	b.n	800613a <_vfiprintf_r+0x176>
 80061b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80061b6:	4604      	mov	r4, r0
 80061b8:	2301      	movs	r3, #1
 80061ba:	e7f0      	b.n	800619e <_vfiprintf_r+0x1da>
 80061bc:	ab03      	add	r3, sp, #12
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	462a      	mov	r2, r5
 80061c2:	4b16      	ldr	r3, [pc, #88]	; (800621c <_vfiprintf_r+0x258>)
 80061c4:	a904      	add	r1, sp, #16
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7fd ff9c 	bl	8004104 <_printf_float>
 80061cc:	4607      	mov	r7, r0
 80061ce:	1c78      	adds	r0, r7, #1
 80061d0:	d1d6      	bne.n	8006180 <_vfiprintf_r+0x1bc>
 80061d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061d4:	07d9      	lsls	r1, r3, #31
 80061d6:	d405      	bmi.n	80061e4 <_vfiprintf_r+0x220>
 80061d8:	89ab      	ldrh	r3, [r5, #12]
 80061da:	059a      	lsls	r2, r3, #22
 80061dc:	d402      	bmi.n	80061e4 <_vfiprintf_r+0x220>
 80061de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061e0:	f000 faaf 	bl	8006742 <__retarget_lock_release_recursive>
 80061e4:	89ab      	ldrh	r3, [r5, #12]
 80061e6:	065b      	lsls	r3, r3, #25
 80061e8:	f53f af12 	bmi.w	8006010 <_vfiprintf_r+0x4c>
 80061ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ee:	e711      	b.n	8006014 <_vfiprintf_r+0x50>
 80061f0:	ab03      	add	r3, sp, #12
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	462a      	mov	r2, r5
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <_vfiprintf_r+0x258>)
 80061f8:	a904      	add	r1, sp, #16
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7fe fa26 	bl	800464c <_printf_i>
 8006200:	e7e4      	b.n	80061cc <_vfiprintf_r+0x208>
 8006202:	bf00      	nop
 8006204:	08007014 	.word	0x08007014
 8006208:	08007034 	.word	0x08007034
 800620c:	08006ff4 	.word	0x08006ff4
 8006210:	08006ee2 	.word	0x08006ee2
 8006214:	08006eec 	.word	0x08006eec
 8006218:	08004105 	.word	0x08004105
 800621c:	08005f9f 	.word	0x08005f9f
 8006220:	08006ee8 	.word	0x08006ee8

08006224 <__swbuf_r>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	460e      	mov	r6, r1
 8006228:	4614      	mov	r4, r2
 800622a:	4605      	mov	r5, r0
 800622c:	b118      	cbz	r0, 8006236 <__swbuf_r+0x12>
 800622e:	6983      	ldr	r3, [r0, #24]
 8006230:	b90b      	cbnz	r3, 8006236 <__swbuf_r+0x12>
 8006232:	f000 f9e7 	bl	8006604 <__sinit>
 8006236:	4b21      	ldr	r3, [pc, #132]	; (80062bc <__swbuf_r+0x98>)
 8006238:	429c      	cmp	r4, r3
 800623a:	d12b      	bne.n	8006294 <__swbuf_r+0x70>
 800623c:	686c      	ldr	r4, [r5, #4]
 800623e:	69a3      	ldr	r3, [r4, #24]
 8006240:	60a3      	str	r3, [r4, #8]
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	071a      	lsls	r2, r3, #28
 8006246:	d52f      	bpl.n	80062a8 <__swbuf_r+0x84>
 8006248:	6923      	ldr	r3, [r4, #16]
 800624a:	b36b      	cbz	r3, 80062a8 <__swbuf_r+0x84>
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1ac0      	subs	r0, r0, r3
 8006252:	6963      	ldr	r3, [r4, #20]
 8006254:	b2f6      	uxtb	r6, r6
 8006256:	4283      	cmp	r3, r0
 8006258:	4637      	mov	r7, r6
 800625a:	dc04      	bgt.n	8006266 <__swbuf_r+0x42>
 800625c:	4621      	mov	r1, r4
 800625e:	4628      	mov	r0, r5
 8006260:	f000 f93c 	bl	80064dc <_fflush_r>
 8006264:	bb30      	cbnz	r0, 80062b4 <__swbuf_r+0x90>
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	3b01      	subs	r3, #1
 800626a:	60a3      	str	r3, [r4, #8]
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	6022      	str	r2, [r4, #0]
 8006272:	701e      	strb	r6, [r3, #0]
 8006274:	6963      	ldr	r3, [r4, #20]
 8006276:	3001      	adds	r0, #1
 8006278:	4283      	cmp	r3, r0
 800627a:	d004      	beq.n	8006286 <__swbuf_r+0x62>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	07db      	lsls	r3, r3, #31
 8006280:	d506      	bpl.n	8006290 <__swbuf_r+0x6c>
 8006282:	2e0a      	cmp	r6, #10
 8006284:	d104      	bne.n	8006290 <__swbuf_r+0x6c>
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	f000 f927 	bl	80064dc <_fflush_r>
 800628e:	b988      	cbnz	r0, 80062b4 <__swbuf_r+0x90>
 8006290:	4638      	mov	r0, r7
 8006292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <__swbuf_r+0x9c>)
 8006296:	429c      	cmp	r4, r3
 8006298:	d101      	bne.n	800629e <__swbuf_r+0x7a>
 800629a:	68ac      	ldr	r4, [r5, #8]
 800629c:	e7cf      	b.n	800623e <__swbuf_r+0x1a>
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <__swbuf_r+0xa0>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	bf08      	it	eq
 80062a4:	68ec      	ldreq	r4, [r5, #12]
 80062a6:	e7ca      	b.n	800623e <__swbuf_r+0x1a>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 f81a 	bl	80062e4 <__swsetup_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d0cb      	beq.n	800624c <__swbuf_r+0x28>
 80062b4:	f04f 37ff 	mov.w	r7, #4294967295
 80062b8:	e7ea      	b.n	8006290 <__swbuf_r+0x6c>
 80062ba:	bf00      	nop
 80062bc:	08007014 	.word	0x08007014
 80062c0:	08007034 	.word	0x08007034
 80062c4:	08006ff4 	.word	0x08006ff4

080062c8 <__ascii_wctomb>:
 80062c8:	b149      	cbz	r1, 80062de <__ascii_wctomb+0x16>
 80062ca:	2aff      	cmp	r2, #255	; 0xff
 80062cc:	bf85      	ittet	hi
 80062ce:	238a      	movhi	r3, #138	; 0x8a
 80062d0:	6003      	strhi	r3, [r0, #0]
 80062d2:	700a      	strbls	r2, [r1, #0]
 80062d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80062d8:	bf98      	it	ls
 80062da:	2001      	movls	r0, #1
 80062dc:	4770      	bx	lr
 80062de:	4608      	mov	r0, r1
 80062e0:	4770      	bx	lr
	...

080062e4 <__swsetup_r>:
 80062e4:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <__swsetup_r+0xcc>)
 80062e6:	b570      	push	{r4, r5, r6, lr}
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	4606      	mov	r6, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	b125      	cbz	r5, 80062fa <__swsetup_r+0x16>
 80062f0:	69ab      	ldr	r3, [r5, #24]
 80062f2:	b913      	cbnz	r3, 80062fa <__swsetup_r+0x16>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 f985 	bl	8006604 <__sinit>
 80062fa:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <__swsetup_r+0xd0>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d10f      	bne.n	8006320 <__swsetup_r+0x3c>
 8006300:	686c      	ldr	r4, [r5, #4]
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006308:	0719      	lsls	r1, r3, #28
 800630a:	d42c      	bmi.n	8006366 <__swsetup_r+0x82>
 800630c:	06dd      	lsls	r5, r3, #27
 800630e:	d411      	bmi.n	8006334 <__swsetup_r+0x50>
 8006310:	2309      	movs	r3, #9
 8006312:	6033      	str	r3, [r6, #0]
 8006314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	e03e      	b.n	800639e <__swsetup_r+0xba>
 8006320:	4b25      	ldr	r3, [pc, #148]	; (80063b8 <__swsetup_r+0xd4>)
 8006322:	429c      	cmp	r4, r3
 8006324:	d101      	bne.n	800632a <__swsetup_r+0x46>
 8006326:	68ac      	ldr	r4, [r5, #8]
 8006328:	e7eb      	b.n	8006302 <__swsetup_r+0x1e>
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <__swsetup_r+0xd8>)
 800632c:	429c      	cmp	r4, r3
 800632e:	bf08      	it	eq
 8006330:	68ec      	ldreq	r4, [r5, #12]
 8006332:	e7e6      	b.n	8006302 <__swsetup_r+0x1e>
 8006334:	0758      	lsls	r0, r3, #29
 8006336:	d512      	bpl.n	800635e <__swsetup_r+0x7a>
 8006338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800633a:	b141      	cbz	r1, 800634e <__swsetup_r+0x6a>
 800633c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <__swsetup_r+0x66>
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff fcd5 	bl	8005cf4 <_free_r>
 800634a:	2300      	movs	r3, #0
 800634c:	6363      	str	r3, [r4, #52]	; 0x34
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	2300      	movs	r3, #0
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	f043 0308 	orr.w	r3, r3, #8
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	b94b      	cbnz	r3, 800637e <__swsetup_r+0x9a>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006374:	d003      	beq.n	800637e <__swsetup_r+0x9a>
 8006376:	4621      	mov	r1, r4
 8006378:	4630      	mov	r0, r6
 800637a:	f000 fa09 	bl	8006790 <__smakebuf_r>
 800637e:	89a0      	ldrh	r0, [r4, #12]
 8006380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006384:	f010 0301 	ands.w	r3, r0, #1
 8006388:	d00a      	beq.n	80063a0 <__swsetup_r+0xbc>
 800638a:	2300      	movs	r3, #0
 800638c:	60a3      	str	r3, [r4, #8]
 800638e:	6963      	ldr	r3, [r4, #20]
 8006390:	425b      	negs	r3, r3
 8006392:	61a3      	str	r3, [r4, #24]
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	b943      	cbnz	r3, 80063aa <__swsetup_r+0xc6>
 8006398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800639c:	d1ba      	bne.n	8006314 <__swsetup_r+0x30>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	0781      	lsls	r1, r0, #30
 80063a2:	bf58      	it	pl
 80063a4:	6963      	ldrpl	r3, [r4, #20]
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	e7f4      	b.n	8006394 <__swsetup_r+0xb0>
 80063aa:	2000      	movs	r0, #0
 80063ac:	e7f7      	b.n	800639e <__swsetup_r+0xba>
 80063ae:	bf00      	nop
 80063b0:	2000000c 	.word	0x2000000c
 80063b4:	08007014 	.word	0x08007014
 80063b8:	08007034 	.word	0x08007034
 80063bc:	08006ff4 	.word	0x08006ff4

080063c0 <abort>:
 80063c0:	b508      	push	{r3, lr}
 80063c2:	2006      	movs	r0, #6
 80063c4:	f000 fa4c 	bl	8006860 <raise>
 80063c8:	2001      	movs	r0, #1
 80063ca:	f7fb ff75 	bl	80022b8 <_exit>
	...

080063d0 <__sflush_r>:
 80063d0:	898a      	ldrh	r2, [r1, #12]
 80063d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d6:	4605      	mov	r5, r0
 80063d8:	0710      	lsls	r0, r2, #28
 80063da:	460c      	mov	r4, r1
 80063dc:	d458      	bmi.n	8006490 <__sflush_r+0xc0>
 80063de:	684b      	ldr	r3, [r1, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dc05      	bgt.n	80063f0 <__sflush_r+0x20>
 80063e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	dc02      	bgt.n	80063f0 <__sflush_r+0x20>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d0f9      	beq.n	80063ea <__sflush_r+0x1a>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063fc:	682f      	ldr	r7, [r5, #0]
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	d032      	beq.n	8006468 <__sflush_r+0x98>
 8006402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	075a      	lsls	r2, r3, #29
 8006408:	d505      	bpl.n	8006416 <__sflush_r+0x46>
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	1ac0      	subs	r0, r0, r3
 800640e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006410:	b10b      	cbz	r3, 8006416 <__sflush_r+0x46>
 8006412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006414:	1ac0      	subs	r0, r0, r3
 8006416:	2300      	movs	r3, #0
 8006418:	4602      	mov	r2, r0
 800641a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800641c:	6a21      	ldr	r1, [r4, #32]
 800641e:	4628      	mov	r0, r5
 8006420:	47b0      	blx	r6
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	d106      	bne.n	8006436 <__sflush_r+0x66>
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	291d      	cmp	r1, #29
 800642c:	d82c      	bhi.n	8006488 <__sflush_r+0xb8>
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <__sflush_r+0x108>)
 8006430:	40ca      	lsrs	r2, r1
 8006432:	07d6      	lsls	r6, r2, #31
 8006434:	d528      	bpl.n	8006488 <__sflush_r+0xb8>
 8006436:	2200      	movs	r2, #0
 8006438:	6062      	str	r2, [r4, #4]
 800643a:	04d9      	lsls	r1, r3, #19
 800643c:	6922      	ldr	r2, [r4, #16]
 800643e:	6022      	str	r2, [r4, #0]
 8006440:	d504      	bpl.n	800644c <__sflush_r+0x7c>
 8006442:	1c42      	adds	r2, r0, #1
 8006444:	d101      	bne.n	800644a <__sflush_r+0x7a>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b903      	cbnz	r3, 800644c <__sflush_r+0x7c>
 800644a:	6560      	str	r0, [r4, #84]	; 0x54
 800644c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644e:	602f      	str	r7, [r5, #0]
 8006450:	2900      	cmp	r1, #0
 8006452:	d0ca      	beq.n	80063ea <__sflush_r+0x1a>
 8006454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006458:	4299      	cmp	r1, r3
 800645a:	d002      	beq.n	8006462 <__sflush_r+0x92>
 800645c:	4628      	mov	r0, r5
 800645e:	f7ff fc49 	bl	8005cf4 <_free_r>
 8006462:	2000      	movs	r0, #0
 8006464:	6360      	str	r0, [r4, #52]	; 0x34
 8006466:	e7c1      	b.n	80063ec <__sflush_r+0x1c>
 8006468:	6a21      	ldr	r1, [r4, #32]
 800646a:	2301      	movs	r3, #1
 800646c:	4628      	mov	r0, r5
 800646e:	47b0      	blx	r6
 8006470:	1c41      	adds	r1, r0, #1
 8006472:	d1c7      	bne.n	8006404 <__sflush_r+0x34>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0c4      	beq.n	8006404 <__sflush_r+0x34>
 800647a:	2b1d      	cmp	r3, #29
 800647c:	d001      	beq.n	8006482 <__sflush_r+0xb2>
 800647e:	2b16      	cmp	r3, #22
 8006480:	d101      	bne.n	8006486 <__sflush_r+0xb6>
 8006482:	602f      	str	r7, [r5, #0]
 8006484:	e7b1      	b.n	80063ea <__sflush_r+0x1a>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	e7ad      	b.n	80063ec <__sflush_r+0x1c>
 8006490:	690f      	ldr	r7, [r1, #16]
 8006492:	2f00      	cmp	r7, #0
 8006494:	d0a9      	beq.n	80063ea <__sflush_r+0x1a>
 8006496:	0793      	lsls	r3, r2, #30
 8006498:	680e      	ldr	r6, [r1, #0]
 800649a:	bf08      	it	eq
 800649c:	694b      	ldreq	r3, [r1, #20]
 800649e:	600f      	str	r7, [r1, #0]
 80064a0:	bf18      	it	ne
 80064a2:	2300      	movne	r3, #0
 80064a4:	eba6 0807 	sub.w	r8, r6, r7
 80064a8:	608b      	str	r3, [r1, #8]
 80064aa:	f1b8 0f00 	cmp.w	r8, #0
 80064ae:	dd9c      	ble.n	80063ea <__sflush_r+0x1a>
 80064b0:	6a21      	ldr	r1, [r4, #32]
 80064b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064b4:	4643      	mov	r3, r8
 80064b6:	463a      	mov	r2, r7
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b0      	blx	r6
 80064bc:	2800      	cmp	r0, #0
 80064be:	dc06      	bgt.n	80064ce <__sflush_r+0xfe>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	e78e      	b.n	80063ec <__sflush_r+0x1c>
 80064ce:	4407      	add	r7, r0
 80064d0:	eba8 0800 	sub.w	r8, r8, r0
 80064d4:	e7e9      	b.n	80064aa <__sflush_r+0xda>
 80064d6:	bf00      	nop
 80064d8:	20400001 	.word	0x20400001

080064dc <_fflush_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	690b      	ldr	r3, [r1, #16]
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b913      	cbnz	r3, 80064ec <_fflush_r+0x10>
 80064e6:	2500      	movs	r5, #0
 80064e8:	4628      	mov	r0, r5
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	b118      	cbz	r0, 80064f6 <_fflush_r+0x1a>
 80064ee:	6983      	ldr	r3, [r0, #24]
 80064f0:	b90b      	cbnz	r3, 80064f6 <_fflush_r+0x1a>
 80064f2:	f000 f887 	bl	8006604 <__sinit>
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <_fflush_r+0x6c>)
 80064f8:	429c      	cmp	r4, r3
 80064fa:	d11b      	bne.n	8006534 <_fflush_r+0x58>
 80064fc:	686c      	ldr	r4, [r5, #4]
 80064fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ef      	beq.n	80064e6 <_fflush_r+0xa>
 8006506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006508:	07d0      	lsls	r0, r2, #31
 800650a:	d404      	bmi.n	8006516 <_fflush_r+0x3a>
 800650c:	0599      	lsls	r1, r3, #22
 800650e:	d402      	bmi.n	8006516 <_fflush_r+0x3a>
 8006510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006512:	f000 f915 	bl	8006740 <__retarget_lock_acquire_recursive>
 8006516:	4628      	mov	r0, r5
 8006518:	4621      	mov	r1, r4
 800651a:	f7ff ff59 	bl	80063d0 <__sflush_r>
 800651e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006520:	07da      	lsls	r2, r3, #31
 8006522:	4605      	mov	r5, r0
 8006524:	d4e0      	bmi.n	80064e8 <_fflush_r+0xc>
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	059b      	lsls	r3, r3, #22
 800652a:	d4dd      	bmi.n	80064e8 <_fflush_r+0xc>
 800652c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800652e:	f000 f908 	bl	8006742 <__retarget_lock_release_recursive>
 8006532:	e7d9      	b.n	80064e8 <_fflush_r+0xc>
 8006534:	4b05      	ldr	r3, [pc, #20]	; (800654c <_fflush_r+0x70>)
 8006536:	429c      	cmp	r4, r3
 8006538:	d101      	bne.n	800653e <_fflush_r+0x62>
 800653a:	68ac      	ldr	r4, [r5, #8]
 800653c:	e7df      	b.n	80064fe <_fflush_r+0x22>
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <_fflush_r+0x74>)
 8006540:	429c      	cmp	r4, r3
 8006542:	bf08      	it	eq
 8006544:	68ec      	ldreq	r4, [r5, #12]
 8006546:	e7da      	b.n	80064fe <_fflush_r+0x22>
 8006548:	08007014 	.word	0x08007014
 800654c:	08007034 	.word	0x08007034
 8006550:	08006ff4 	.word	0x08006ff4

08006554 <std>:
 8006554:	2300      	movs	r3, #0
 8006556:	b510      	push	{r4, lr}
 8006558:	4604      	mov	r4, r0
 800655a:	e9c0 3300 	strd	r3, r3, [r0]
 800655e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006562:	6083      	str	r3, [r0, #8]
 8006564:	8181      	strh	r1, [r0, #12]
 8006566:	6643      	str	r3, [r0, #100]	; 0x64
 8006568:	81c2      	strh	r2, [r0, #14]
 800656a:	6183      	str	r3, [r0, #24]
 800656c:	4619      	mov	r1, r3
 800656e:	2208      	movs	r2, #8
 8006570:	305c      	adds	r0, #92	; 0x5c
 8006572:	f7fd fd1f 	bl	8003fb4 <memset>
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <std+0x38>)
 8006578:	6263      	str	r3, [r4, #36]	; 0x24
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <std+0x3c>)
 800657c:	62a3      	str	r3, [r4, #40]	; 0x28
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <std+0x40>)
 8006580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <std+0x44>)
 8006584:	6224      	str	r4, [r4, #32]
 8006586:	6323      	str	r3, [r4, #48]	; 0x30
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08006899 	.word	0x08006899
 8006590:	080068bb 	.word	0x080068bb
 8006594:	080068f3 	.word	0x080068f3
 8006598:	08006917 	.word	0x08006917

0800659c <_cleanup_r>:
 800659c:	4901      	ldr	r1, [pc, #4]	; (80065a4 <_cleanup_r+0x8>)
 800659e:	f000 b8af 	b.w	8006700 <_fwalk_reent>
 80065a2:	bf00      	nop
 80065a4:	080064dd 	.word	0x080064dd

080065a8 <__sfmoreglue>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	2268      	movs	r2, #104	; 0x68
 80065ac:	1e4d      	subs	r5, r1, #1
 80065ae:	4355      	muls	r5, r2
 80065b0:	460e      	mov	r6, r1
 80065b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065b6:	f7ff fc09 	bl	8005dcc <_malloc_r>
 80065ba:	4604      	mov	r4, r0
 80065bc:	b140      	cbz	r0, 80065d0 <__sfmoreglue+0x28>
 80065be:	2100      	movs	r1, #0
 80065c0:	e9c0 1600 	strd	r1, r6, [r0]
 80065c4:	300c      	adds	r0, #12
 80065c6:	60a0      	str	r0, [r4, #8]
 80065c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065cc:	f7fd fcf2 	bl	8003fb4 <memset>
 80065d0:	4620      	mov	r0, r4
 80065d2:	bd70      	pop	{r4, r5, r6, pc}

080065d4 <__sfp_lock_acquire>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__sfp_lock_acquire+0x8>)
 80065d6:	f000 b8b3 	b.w	8006740 <__retarget_lock_acquire_recursive>
 80065da:	bf00      	nop
 80065dc:	2000020d 	.word	0x2000020d

080065e0 <__sfp_lock_release>:
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <__sfp_lock_release+0x8>)
 80065e2:	f000 b8ae 	b.w	8006742 <__retarget_lock_release_recursive>
 80065e6:	bf00      	nop
 80065e8:	2000020d 	.word	0x2000020d

080065ec <__sinit_lock_acquire>:
 80065ec:	4801      	ldr	r0, [pc, #4]	; (80065f4 <__sinit_lock_acquire+0x8>)
 80065ee:	f000 b8a7 	b.w	8006740 <__retarget_lock_acquire_recursive>
 80065f2:	bf00      	nop
 80065f4:	2000020e 	.word	0x2000020e

080065f8 <__sinit_lock_release>:
 80065f8:	4801      	ldr	r0, [pc, #4]	; (8006600 <__sinit_lock_release+0x8>)
 80065fa:	f000 b8a2 	b.w	8006742 <__retarget_lock_release_recursive>
 80065fe:	bf00      	nop
 8006600:	2000020e 	.word	0x2000020e

08006604 <__sinit>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	f7ff fff0 	bl	80065ec <__sinit_lock_acquire>
 800660c:	69a3      	ldr	r3, [r4, #24]
 800660e:	b11b      	cbz	r3, 8006618 <__sinit+0x14>
 8006610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006614:	f7ff bff0 	b.w	80065f8 <__sinit_lock_release>
 8006618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800661c:	6523      	str	r3, [r4, #80]	; 0x50
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <__sinit+0x68>)
 8006620:	4a13      	ldr	r2, [pc, #76]	; (8006670 <__sinit+0x6c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	62a2      	str	r2, [r4, #40]	; 0x28
 8006626:	42a3      	cmp	r3, r4
 8006628:	bf04      	itt	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	61a3      	streq	r3, [r4, #24]
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f820 	bl	8006674 <__sfp>
 8006634:	6060      	str	r0, [r4, #4]
 8006636:	4620      	mov	r0, r4
 8006638:	f000 f81c 	bl	8006674 <__sfp>
 800663c:	60a0      	str	r0, [r4, #8]
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f818 	bl	8006674 <__sfp>
 8006644:	2200      	movs	r2, #0
 8006646:	60e0      	str	r0, [r4, #12]
 8006648:	2104      	movs	r1, #4
 800664a:	6860      	ldr	r0, [r4, #4]
 800664c:	f7ff ff82 	bl	8006554 <std>
 8006650:	68a0      	ldr	r0, [r4, #8]
 8006652:	2201      	movs	r2, #1
 8006654:	2109      	movs	r1, #9
 8006656:	f7ff ff7d 	bl	8006554 <std>
 800665a:	68e0      	ldr	r0, [r4, #12]
 800665c:	2202      	movs	r2, #2
 800665e:	2112      	movs	r1, #18
 8006660:	f7ff ff78 	bl	8006554 <std>
 8006664:	2301      	movs	r3, #1
 8006666:	61a3      	str	r3, [r4, #24]
 8006668:	e7d2      	b.n	8006610 <__sinit+0xc>
 800666a:	bf00      	nop
 800666c:	08006c7c 	.word	0x08006c7c
 8006670:	0800659d 	.word	0x0800659d

08006674 <__sfp>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	4607      	mov	r7, r0
 8006678:	f7ff ffac 	bl	80065d4 <__sfp_lock_acquire>
 800667c:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <__sfp+0x84>)
 800667e:	681e      	ldr	r6, [r3, #0]
 8006680:	69b3      	ldr	r3, [r6, #24]
 8006682:	b913      	cbnz	r3, 800668a <__sfp+0x16>
 8006684:	4630      	mov	r0, r6
 8006686:	f7ff ffbd 	bl	8006604 <__sinit>
 800668a:	3648      	adds	r6, #72	; 0x48
 800668c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006690:	3b01      	subs	r3, #1
 8006692:	d503      	bpl.n	800669c <__sfp+0x28>
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	b30b      	cbz	r3, 80066dc <__sfp+0x68>
 8006698:	6836      	ldr	r6, [r6, #0]
 800669a:	e7f7      	b.n	800668c <__sfp+0x18>
 800669c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066a0:	b9d5      	cbnz	r5, 80066d8 <__sfp+0x64>
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <__sfp+0x88>)
 80066a4:	60e3      	str	r3, [r4, #12]
 80066a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066aa:	6665      	str	r5, [r4, #100]	; 0x64
 80066ac:	f000 f847 	bl	800673e <__retarget_lock_init_recursive>
 80066b0:	f7ff ff96 	bl	80065e0 <__sfp_lock_release>
 80066b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066bc:	6025      	str	r5, [r4, #0]
 80066be:	61a5      	str	r5, [r4, #24]
 80066c0:	2208      	movs	r2, #8
 80066c2:	4629      	mov	r1, r5
 80066c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066c8:	f7fd fc74 	bl	8003fb4 <memset>
 80066cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066d4:	4620      	mov	r0, r4
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d8:	3468      	adds	r4, #104	; 0x68
 80066da:	e7d9      	b.n	8006690 <__sfp+0x1c>
 80066dc:	2104      	movs	r1, #4
 80066de:	4638      	mov	r0, r7
 80066e0:	f7ff ff62 	bl	80065a8 <__sfmoreglue>
 80066e4:	4604      	mov	r4, r0
 80066e6:	6030      	str	r0, [r6, #0]
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d1d5      	bne.n	8006698 <__sfp+0x24>
 80066ec:	f7ff ff78 	bl	80065e0 <__sfp_lock_release>
 80066f0:	230c      	movs	r3, #12
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	e7ee      	b.n	80066d4 <__sfp+0x60>
 80066f6:	bf00      	nop
 80066f8:	08006c7c 	.word	0x08006c7c
 80066fc:	ffff0001 	.word	0xffff0001

08006700 <_fwalk_reent>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	4606      	mov	r6, r0
 8006706:	4688      	mov	r8, r1
 8006708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800670c:	2700      	movs	r7, #0
 800670e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006712:	f1b9 0901 	subs.w	r9, r9, #1
 8006716:	d505      	bpl.n	8006724 <_fwalk_reent+0x24>
 8006718:	6824      	ldr	r4, [r4, #0]
 800671a:	2c00      	cmp	r4, #0
 800671c:	d1f7      	bne.n	800670e <_fwalk_reent+0xe>
 800671e:	4638      	mov	r0, r7
 8006720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006724:	89ab      	ldrh	r3, [r5, #12]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d907      	bls.n	800673a <_fwalk_reent+0x3a>
 800672a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800672e:	3301      	adds	r3, #1
 8006730:	d003      	beq.n	800673a <_fwalk_reent+0x3a>
 8006732:	4629      	mov	r1, r5
 8006734:	4630      	mov	r0, r6
 8006736:	47c0      	blx	r8
 8006738:	4307      	orrs	r7, r0
 800673a:	3568      	adds	r5, #104	; 0x68
 800673c:	e7e9      	b.n	8006712 <_fwalk_reent+0x12>

0800673e <__retarget_lock_init_recursive>:
 800673e:	4770      	bx	lr

08006740 <__retarget_lock_acquire_recursive>:
 8006740:	4770      	bx	lr

08006742 <__retarget_lock_release_recursive>:
 8006742:	4770      	bx	lr

08006744 <__swhatbuf_r>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	460e      	mov	r6, r1
 8006748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674c:	2900      	cmp	r1, #0
 800674e:	b096      	sub	sp, #88	; 0x58
 8006750:	4614      	mov	r4, r2
 8006752:	461d      	mov	r5, r3
 8006754:	da08      	bge.n	8006768 <__swhatbuf_r+0x24>
 8006756:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	061a      	lsls	r2, r3, #24
 8006760:	d410      	bmi.n	8006784 <__swhatbuf_r+0x40>
 8006762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006766:	e00e      	b.n	8006786 <__swhatbuf_r+0x42>
 8006768:	466a      	mov	r2, sp
 800676a:	f000 f8fb 	bl	8006964 <_fstat_r>
 800676e:	2800      	cmp	r0, #0
 8006770:	dbf1      	blt.n	8006756 <__swhatbuf_r+0x12>
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006778:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800677c:	425a      	negs	r2, r3
 800677e:	415a      	adcs	r2, r3
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	e7ee      	b.n	8006762 <__swhatbuf_r+0x1e>
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	2000      	movs	r0, #0
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	b016      	add	sp, #88	; 0x58
 800678c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006790 <__smakebuf_r>:
 8006790:	898b      	ldrh	r3, [r1, #12]
 8006792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006794:	079d      	lsls	r5, r3, #30
 8006796:	4606      	mov	r6, r0
 8006798:	460c      	mov	r4, r1
 800679a:	d507      	bpl.n	80067ac <__smakebuf_r+0x1c>
 800679c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	2301      	movs	r3, #1
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	b002      	add	sp, #8
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	ab01      	add	r3, sp, #4
 80067ae:	466a      	mov	r2, sp
 80067b0:	f7ff ffc8 	bl	8006744 <__swhatbuf_r>
 80067b4:	9900      	ldr	r1, [sp, #0]
 80067b6:	4605      	mov	r5, r0
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff fb07 	bl	8005dcc <_malloc_r>
 80067be:	b948      	cbnz	r0, 80067d4 <__smakebuf_r+0x44>
 80067c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d4ef      	bmi.n	80067a8 <__smakebuf_r+0x18>
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7e3      	b.n	800679c <__smakebuf_r+0xc>
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <__smakebuf_r+0x7c>)
 80067d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	6020      	str	r0, [r4, #0]
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	6163      	str	r3, [r4, #20]
 80067e6:	9b01      	ldr	r3, [sp, #4]
 80067e8:	6120      	str	r0, [r4, #16]
 80067ea:	b15b      	cbz	r3, 8006804 <__smakebuf_r+0x74>
 80067ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 f8c9 	bl	8006988 <_isatty_r>
 80067f6:	b128      	cbz	r0, 8006804 <__smakebuf_r+0x74>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	89a0      	ldrh	r0, [r4, #12]
 8006806:	4305      	orrs	r5, r0
 8006808:	81a5      	strh	r5, [r4, #12]
 800680a:	e7cd      	b.n	80067a8 <__smakebuf_r+0x18>
 800680c:	0800659d 	.word	0x0800659d

08006810 <_raise_r>:
 8006810:	291f      	cmp	r1, #31
 8006812:	b538      	push	{r3, r4, r5, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	d904      	bls.n	8006824 <_raise_r+0x14>
 800681a:	2316      	movs	r3, #22
 800681c:	6003      	str	r3, [r0, #0]
 800681e:	f04f 30ff 	mov.w	r0, #4294967295
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006826:	b112      	cbz	r2, 800682e <_raise_r+0x1e>
 8006828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800682c:	b94b      	cbnz	r3, 8006842 <_raise_r+0x32>
 800682e:	4620      	mov	r0, r4
 8006830:	f000 f830 	bl	8006894 <_getpid_r>
 8006834:	462a      	mov	r2, r5
 8006836:	4601      	mov	r1, r0
 8006838:	4620      	mov	r0, r4
 800683a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683e:	f000 b817 	b.w	8006870 <_kill_r>
 8006842:	2b01      	cmp	r3, #1
 8006844:	d00a      	beq.n	800685c <_raise_r+0x4c>
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	d103      	bne.n	8006852 <_raise_r+0x42>
 800684a:	2316      	movs	r3, #22
 800684c:	6003      	str	r3, [r0, #0]
 800684e:	2001      	movs	r0, #1
 8006850:	e7e7      	b.n	8006822 <_raise_r+0x12>
 8006852:	2400      	movs	r4, #0
 8006854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006858:	4628      	mov	r0, r5
 800685a:	4798      	blx	r3
 800685c:	2000      	movs	r0, #0
 800685e:	e7e0      	b.n	8006822 <_raise_r+0x12>

08006860 <raise>:
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <raise+0xc>)
 8006862:	4601      	mov	r1, r0
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	f7ff bfd3 	b.w	8006810 <_raise_r>
 800686a:	bf00      	nop
 800686c:	2000000c 	.word	0x2000000c

08006870 <_kill_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	; (8006890 <_kill_r+0x20>)
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	f7fb fd0b 	bl	8002298 <_kill>
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	d102      	bne.n	800688c <_kill_r+0x1c>
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	b103      	cbz	r3, 800688c <_kill_r+0x1c>
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	bf00      	nop
 8006890:	20000208 	.word	0x20000208

08006894 <_getpid_r>:
 8006894:	f7fb bcf8 	b.w	8002288 <_getpid>

08006898 <__sread>:
 8006898:	b510      	push	{r4, lr}
 800689a:	460c      	mov	r4, r1
 800689c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a0:	f000 f894 	bl	80069cc <_read_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	bfab      	itete	ge
 80068a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068aa:	89a3      	ldrhlt	r3, [r4, #12]
 80068ac:	181b      	addge	r3, r3, r0
 80068ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068b2:	bfac      	ite	ge
 80068b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068b6:	81a3      	strhlt	r3, [r4, #12]
 80068b8:	bd10      	pop	{r4, pc}

080068ba <__swrite>:
 80068ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	461f      	mov	r7, r3
 80068c0:	898b      	ldrh	r3, [r1, #12]
 80068c2:	05db      	lsls	r3, r3, #23
 80068c4:	4605      	mov	r5, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	4616      	mov	r6, r2
 80068ca:	d505      	bpl.n	80068d8 <__swrite+0x1e>
 80068cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d0:	2302      	movs	r3, #2
 80068d2:	2200      	movs	r2, #0
 80068d4:	f000 f868 	bl	80069a8 <_lseek_r>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	4632      	mov	r2, r6
 80068e6:	463b      	mov	r3, r7
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	f000 b817 	b.w	8006920 <_write_r>

080068f2 <__sseek>:
 80068f2:	b510      	push	{r4, lr}
 80068f4:	460c      	mov	r4, r1
 80068f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fa:	f000 f855 	bl	80069a8 <_lseek_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	bf15      	itete	ne
 8006904:	6560      	strne	r0, [r4, #84]	; 0x54
 8006906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800690a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800690e:	81a3      	strheq	r3, [r4, #12]
 8006910:	bf18      	it	ne
 8006912:	81a3      	strhne	r3, [r4, #12]
 8006914:	bd10      	pop	{r4, pc}

08006916 <__sclose>:
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 b813 	b.w	8006944 <_close_r>
	...

08006920 <_write_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d07      	ldr	r5, [pc, #28]	; (8006940 <_write_r+0x20>)
 8006924:	4604      	mov	r4, r0
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	2200      	movs	r2, #0
 800692c:	602a      	str	r2, [r5, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f7fb fc3b 	bl	80021aa <_write>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_write_r+0x1e>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_write_r+0x1e>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20000208 	.word	0x20000208

08006944 <_close_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d06      	ldr	r5, [pc, #24]	; (8006960 <_close_r+0x1c>)
 8006948:	2300      	movs	r3, #0
 800694a:	4604      	mov	r4, r0
 800694c:	4608      	mov	r0, r1
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f7fb fcd9 	bl	8002306 <_close>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_close_r+0x1a>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_close_r+0x1a>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000208 	.word	0x20000208

08006964 <_fstat_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d07      	ldr	r5, [pc, #28]	; (8006984 <_fstat_r+0x20>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	f7fb fcd4 	bl	800231e <_fstat>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d102      	bne.n	8006980 <_fstat_r+0x1c>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b103      	cbz	r3, 8006980 <_fstat_r+0x1c>
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	bf00      	nop
 8006984:	20000208 	.word	0x20000208

08006988 <_isatty_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_isatty_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fb fcd3 	bl	800233e <_isatty>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_isatty_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_isatty_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20000208 	.word	0x20000208

080069a8 <_lseek_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d07      	ldr	r5, [pc, #28]	; (80069c8 <_lseek_r+0x20>)
 80069ac:	4604      	mov	r4, r0
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	602a      	str	r2, [r5, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f7fb fccc 	bl	8002354 <_lseek>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_lseek_r+0x1e>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_lseek_r+0x1e>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20000208 	.word	0x20000208

080069cc <_read_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d07      	ldr	r5, [pc, #28]	; (80069ec <_read_r+0x20>)
 80069d0:	4604      	mov	r4, r0
 80069d2:	4608      	mov	r0, r1
 80069d4:	4611      	mov	r1, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	602a      	str	r2, [r5, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	f7fb fc76 	bl	80022cc <_read>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_read_r+0x1e>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_read_r+0x1e>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20000208 	.word	0x20000208

080069f0 <sqrt>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	ed2d 8b02 	vpush	{d8}
 80069f6:	ec55 4b10 	vmov	r4, r5, d0
 80069fa:	f000 f843 	bl	8006a84 <__ieee754_sqrt>
 80069fe:	4622      	mov	r2, r4
 8006a00:	462b      	mov	r3, r5
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	eeb0 8a40 	vmov.f32	s16, s0
 8006a0a:	eef0 8a60 	vmov.f32	s17, s1
 8006a0e:	f7fa f8e5 	bl	8000bdc <__aeabi_dcmpun>
 8006a12:	b990      	cbnz	r0, 8006a3a <sqrt+0x4a>
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7fa f8b6 	bl	8000b8c <__aeabi_dcmplt>
 8006a20:	b158      	cbz	r0, 8006a3a <sqrt+0x4a>
 8006a22:	f7fd fa9d 	bl	8003f60 <__errno>
 8006a26:	2321      	movs	r3, #33	; 0x21
 8006a28:	6003      	str	r3, [r0, #0]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4610      	mov	r0, r2
 8006a30:	4619      	mov	r1, r3
 8006a32:	f7f9 ff63 	bl	80008fc <__aeabi_ddiv>
 8006a36:	ec41 0b18 	vmov	d8, r0, r1
 8006a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8006a3e:	eef0 0a68 	vmov.f32	s1, s17
 8006a42:	ecbd 8b02 	vpop	{d8}
 8006a46:	bd38      	pop	{r3, r4, r5, pc}

08006a48 <sqrtf>:
 8006a48:	b508      	push	{r3, lr}
 8006a4a:	ed2d 8b02 	vpush	{d8}
 8006a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8006a52:	f000 f8c9 	bl	8006be8 <__ieee754_sqrtf>
 8006a56:	eeb4 8a48 	vcmp.f32	s16, s16
 8006a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a5e:	d60c      	bvs.n	8006a7a <sqrtf+0x32>
 8006a60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006a80 <sqrtf+0x38>
 8006a64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	d505      	bpl.n	8006a7a <sqrtf+0x32>
 8006a6e:	f7fd fa77 	bl	8003f60 <__errno>
 8006a72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006a76:	2321      	movs	r3, #33	; 0x21
 8006a78:	6003      	str	r3, [r0, #0]
 8006a7a:	ecbd 8b02 	vpop	{d8}
 8006a7e:	bd08      	pop	{r3, pc}
 8006a80:	00000000 	.word	0x00000000

08006a84 <__ieee754_sqrt>:
 8006a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a88:	ec55 4b10 	vmov	r4, r5, d0
 8006a8c:	4e55      	ldr	r6, [pc, #340]	; (8006be4 <__ieee754_sqrt+0x160>)
 8006a8e:	43ae      	bics	r6, r5
 8006a90:	ee10 0a10 	vmov	r0, s0
 8006a94:	ee10 3a10 	vmov	r3, s0
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	d110      	bne.n	8006ac0 <__ieee754_sqrt+0x3c>
 8006a9e:	ee10 2a10 	vmov	r2, s0
 8006aa2:	462b      	mov	r3, r5
 8006aa4:	f7f9 fe00 	bl	80006a8 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7f9 fc44 	bl	800033c <__adddf3>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	ec45 4b10 	vmov	d0, r4, r5
 8006abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	dc10      	bgt.n	8006ae6 <__ieee754_sqrt+0x62>
 8006ac4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ac8:	4330      	orrs	r0, r6
 8006aca:	d0f5      	beq.n	8006ab8 <__ieee754_sqrt+0x34>
 8006acc:	b15d      	cbz	r5, 8006ae6 <__ieee754_sqrt+0x62>
 8006ace:	ee10 2a10 	vmov	r2, s0
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	ee10 0a10 	vmov	r0, s0
 8006ad8:	f7f9 fc2e 	bl	8000338 <__aeabi_dsub>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	f7f9 ff0c 	bl	80008fc <__aeabi_ddiv>
 8006ae4:	e7e6      	b.n	8006ab4 <__ieee754_sqrt+0x30>
 8006ae6:	1512      	asrs	r2, r2, #20
 8006ae8:	d074      	beq.n	8006bd4 <__ieee754_sqrt+0x150>
 8006aea:	07d4      	lsls	r4, r2, #31
 8006aec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006af0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006af8:	bf5e      	ittt	pl
 8006afa:	0fda      	lsrpl	r2, r3, #31
 8006afc:	005b      	lslpl	r3, r3, #1
 8006afe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006b02:	2400      	movs	r4, #0
 8006b04:	0fda      	lsrs	r2, r3, #31
 8006b06:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006b0a:	107f      	asrs	r7, r7, #1
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	2516      	movs	r5, #22
 8006b10:	4620      	mov	r0, r4
 8006b12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b16:	1886      	adds	r6, r0, r2
 8006b18:	428e      	cmp	r6, r1
 8006b1a:	bfde      	ittt	le
 8006b1c:	1b89      	suble	r1, r1, r6
 8006b1e:	18b0      	addle	r0, r6, r2
 8006b20:	18a4      	addle	r4, r4, r2
 8006b22:	0049      	lsls	r1, r1, #1
 8006b24:	3d01      	subs	r5, #1
 8006b26:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006b2a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006b2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b32:	d1f0      	bne.n	8006b16 <__ieee754_sqrt+0x92>
 8006b34:	462a      	mov	r2, r5
 8006b36:	f04f 0e20 	mov.w	lr, #32
 8006b3a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b3e:	4281      	cmp	r1, r0
 8006b40:	eb06 0c05 	add.w	ip, r6, r5
 8006b44:	dc02      	bgt.n	8006b4c <__ieee754_sqrt+0xc8>
 8006b46:	d113      	bne.n	8006b70 <__ieee754_sqrt+0xec>
 8006b48:	459c      	cmp	ip, r3
 8006b4a:	d811      	bhi.n	8006b70 <__ieee754_sqrt+0xec>
 8006b4c:	f1bc 0f00 	cmp.w	ip, #0
 8006b50:	eb0c 0506 	add.w	r5, ip, r6
 8006b54:	da43      	bge.n	8006bde <__ieee754_sqrt+0x15a>
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	db41      	blt.n	8006bde <__ieee754_sqrt+0x15a>
 8006b5a:	f100 0801 	add.w	r8, r0, #1
 8006b5e:	1a09      	subs	r1, r1, r0
 8006b60:	459c      	cmp	ip, r3
 8006b62:	bf88      	it	hi
 8006b64:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006b68:	eba3 030c 	sub.w	r3, r3, ip
 8006b6c:	4432      	add	r2, r6
 8006b6e:	4640      	mov	r0, r8
 8006b70:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006b74:	f1be 0e01 	subs.w	lr, lr, #1
 8006b78:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b84:	d1db      	bne.n	8006b3e <__ieee754_sqrt+0xba>
 8006b86:	430b      	orrs	r3, r1
 8006b88:	d006      	beq.n	8006b98 <__ieee754_sqrt+0x114>
 8006b8a:	1c50      	adds	r0, r2, #1
 8006b8c:	bf13      	iteet	ne
 8006b8e:	3201      	addne	r2, #1
 8006b90:	3401      	addeq	r4, #1
 8006b92:	4672      	moveq	r2, lr
 8006b94:	f022 0201 	bicne.w	r2, r2, #1
 8006b98:	1063      	asrs	r3, r4, #1
 8006b9a:	0852      	lsrs	r2, r2, #1
 8006b9c:	07e1      	lsls	r1, r4, #31
 8006b9e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006ba2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006ba6:	bf48      	it	mi
 8006ba8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006bac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	e781      	b.n	8006ab8 <__ieee754_sqrt+0x34>
 8006bb4:	0ad9      	lsrs	r1, r3, #11
 8006bb6:	3815      	subs	r0, #21
 8006bb8:	055b      	lsls	r3, r3, #21
 8006bba:	2900      	cmp	r1, #0
 8006bbc:	d0fa      	beq.n	8006bb4 <__ieee754_sqrt+0x130>
 8006bbe:	02cd      	lsls	r5, r1, #11
 8006bc0:	d50a      	bpl.n	8006bd8 <__ieee754_sqrt+0x154>
 8006bc2:	f1c2 0420 	rsb	r4, r2, #32
 8006bc6:	fa23 f404 	lsr.w	r4, r3, r4
 8006bca:	1e55      	subs	r5, r2, #1
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	4321      	orrs	r1, r4
 8006bd0:	1b42      	subs	r2, r0, r5
 8006bd2:	e78a      	b.n	8006aea <__ieee754_sqrt+0x66>
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	e7f0      	b.n	8006bba <__ieee754_sqrt+0x136>
 8006bd8:	0049      	lsls	r1, r1, #1
 8006bda:	3201      	adds	r2, #1
 8006bdc:	e7ef      	b.n	8006bbe <__ieee754_sqrt+0x13a>
 8006bde:	4680      	mov	r8, r0
 8006be0:	e7bd      	b.n	8006b5e <__ieee754_sqrt+0xda>
 8006be2:	bf00      	nop
 8006be4:	7ff00000 	.word	0x7ff00000

08006be8 <__ieee754_sqrtf>:
 8006be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006bec:	4770      	bx	lr
	...

08006bf0 <_init>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr

08006bfc <_fini>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr
