
Lab1-Tom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004d28  08004d28  00014d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005154  08005154  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005154  08005154  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005154  08005154  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800515c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  08005338  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005338  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050b3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ab  00000000  00000000  000252bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00026570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00026bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bf4  00000000  00000000  00027198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006300  00000000  00000000  00050d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb178  00000000  00000000  0005708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002838  00000000  00000000  00152254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004d10 	.word	0x08004d10

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08004d10 	.word	0x08004d10

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000be0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000be4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c00:	e000      	b.n	8000c04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f9      	beq.n	8000c02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <Kalmanfilter_C>:



//--------------------------------old------------

int Kalmanfilter_C(float* InputArray, float* OutputArray, kalman_state* kstate, int Length){
 8000c26:	b480      	push	{r7}
 8000c28:	b08d      	sub	sp, #52	; 0x34
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	603b      	str	r3, [r7, #0]
	//Since I have the pointer to the struct I need to use the arrow operator to get fields
		 // Guard against null pointers.
		  if (InputArray == NULL || OutputArray == NULL || kstate == NULL || Length <= 0){
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d008      	beq.n	8000c4c <Kalmanfilter_C+0x26>
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <Kalmanfilter_C+0x26>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <Kalmanfilter_C+0x26>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dc02      	bgt.n	8000c52 <Kalmanfilter_C+0x2c>
		    return -1;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	e074      	b.n	8000d3c <Kalmanfilter_C+0x116>
		  }
		  uint32_t fpscrValueOld;
		  uint32_t fpscrValueNew;
		  uint32_t bitmask = 0x0000000F;
 8000c52:	230f      	movs	r3, #15
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
		  uint32_t resetBitmask = 0xFFFFFFF0;
 8000c56:	f06f 030f 	mvn.w	r3, #15
 8000c5a:	623b      	str	r3, [r7, #32]
		  uint32_t result;

		  for (int i = 0; i < Length; i++){
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c60:	e05d      	b.n	8000d1e <Kalmanfilter_C+0xf8>
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8000c62:	eef1 3a10 	vmrs	r3, fpscr
			fpscrValueOld = __get_FPSCR();
 8000c66:	61bb      	str	r3, [r7, #24]


		    kstate->p = kstate->p + kstate->q;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	edc3 7a03 	vstr	s15, [r3, #12]
		    kstate->k = kstate->p / (kstate->p + kstate->r);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	edc3 7a04 	vstr	s15, [r3, #16]
		    kstate->x = kstate->x + kstate->k * (InputArray[i] - kstate->x);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	ed93 6a00 	vldr	s12, [r3]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	edc3 7a02 	vstr	s15, [r3, #8]
		    kstate->p = (1 - kstate->k) * kstate->p;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	edc3 7a03 	vstr	s15, [r3, #12]
		    OutputArray[i] = kstate->x;
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6892      	ldr	r2, [r2, #8]
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	eef1 3a10 	vmrs	r3, fpscr


			fpscrValueNew = __get_FPSCR();
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
		    result = fpscrValueNew & bitmask;
 8000d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	4013      	ands	r3, r2
 8000d06:	61fb      	str	r3, [r7, #28]

		    //Check if the result is non-zero
		    //I also allow bit 16 to be set because that can happen in C but doesn't mean there was
		    //a exception
		    if (result != 0 || result != 16) {
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <Kalmanfilter_C+0xee>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b10      	cmp	r3, #16
 8000d12:	d001      	beq.n	8000d18 <Kalmanfilter_C+0xf2>

		    	return 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e011      	b.n	8000d3c <Kalmanfilter_C+0x116>
		  for (int i = 0; i < Length; i++){
 8000d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	db9d      	blt.n	8000c62 <Kalmanfilter_C+0x3c>
		    }

		  }
		  //After each iteration, set the relevant bits of the FPSCR to zero
		  result = fpscrValueNew & resetBitmask;
 8000d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	617b      	str	r3, [r7, #20]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
#endif
#else
  (void)fpscr;
#endif
}
 8000d38:	bf00      	nop
		  __set_FPSCR(result);
		  return 0;
 8000d3a:	2300      	movs	r3, #0

	}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3734      	adds	r7, #52	; 0x34
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b09a      	sub	sp, #104	; 0x68
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	kalman_state myState;
	float output[5];

	myState.q = 0.1;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <main+0x64>)
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
	myState.r = 0.1;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <main+0x64>)
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
	myState.p = 0.1;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <main+0x64>)
 8000d58:	663b      	str	r3, [r7, #96]	; 0x60
	myState.x = 5.0;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <main+0x68>)
 8000d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
	myState.k = 0.0;
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	667b      	str	r3, [r7, #100]	; 0x64

	float input[5] = {0,1,2,3,4};
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <main+0x6c>)
 8000d66:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000d6a:	461d      	mov	r5, r3
 8000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	6023      	str	r3, [r4, #0]
	float stdDev;
	float diffArray[5];


	kalman_state testState;
	testState.q = 0.0;
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
	testState.r = 0.0;
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
	testState.p = 0.0;
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
	testState.x = 5.0;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <main+0x68>)
 8000d88:	60fb      	str	r3, [r7, #12]
	testState.k = 0.0;
 8000d8a:	f04f 0300 	mov.w	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]


	//calculateDifference(input, output, diffArray, 5);


	Kalmanfilter_C(input, output, &testState, 5);
 8000d90:	1d3a      	adds	r2, r7, #4
 8000d92:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d96:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	f7ff ff43 	bl	8000c26 <Kalmanfilter_C>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000da0:	f000 f9af 	bl	8001102 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f808 	bl	8000db8 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <main+0x60>
 8000daa:	bf00      	nop
 8000dac:	3dcccccd 	.word	0x3dcccccd
 8000db0:	40a00000 	.word	0x40a00000
 8000db4:	08004d28 	.word	0x08004d28

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b096      	sub	sp, #88	; 0x58
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2244      	movs	r2, #68	; 0x44
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fa84 	bl	80022d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 fb0c 	bl	80013f8 <HAL_PWREx_ControlVoltageScaling>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000de6:	f000 f854 	bl	8000e92 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dea:	2310      	movs	r3, #16
 8000dec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e06:	233c      	movs	r3, #60	; 0x3c
 8000e08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fb90 	bl	8001540 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e26:	f000 f834 	bl	8000e92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2105      	movs	r1, #5
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 ff96 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e4e:	f000 f820 	bl	8000e92 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3758      	adds	r7, #88	; 0x58
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e009      	b.n	8000e80 <_write+0x26>
 {
	ITM_SendChar(*ptr++);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff feaf 	bl	8000bd8 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf1      	blt.n	8000e6c <_write+0x12>

 }
 return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e96:	b672      	cpsid	i
}
 8000e98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <Error_Handler+0x8>

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f93c 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return 1;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_kill>:

int _kill(int pid, int sig)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f52:	f001 f995 	bl	8002280 <__errno>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2216      	movs	r2, #22
 8000f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_exit>:

void _exit (int status)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffe7 	bl	8000f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f7a:	e7fe      	b.n	8000f7a <_exit+0x12>

08000f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
  }

  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f001 f916 	bl	8002280 <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200a0000 	.word	0x200a0000
 8001080:	00000400 	.word	0x00000400
 8001084:	200001f8 	.word	0x200001f8
 8001088:	20000210 	.word	0x20000210

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff ffea 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f001 f8d5 	bl	800228c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff fe31 	bl	8000d48 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80010f4:	0800515c 	.word	0x0800515c
  ldr r2, =_sbss
 80010f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80010fc:	20000210 	.word	0x20000210

08001100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_IRQHandler>

08001102 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f91f 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f80e 	bl	8001134 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001124:	f7ff feba 	bl	8000e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_InitTick+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d023      	beq.n	8001190 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_InitTick+0x70>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f91d 	bl	800139e <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d809      	bhi.n	8001184 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f8f5 	bl	8001366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_InitTick+0x74>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e007      	b.n	8001194 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e004      	b.n	8001194 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e001      	b.n	8001194 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	200001fc 	.word	0x200001fc

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200001fc 	.word	0x200001fc

080011ec <__NVIC_SetPriorityGrouping>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_SetPriority>:
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff47 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff5c 	bl	8001234 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffb0 	bl	800130c <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c8:	d102      	bne.n	80013d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	e00b      	b.n	80013e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013de:	d102      	bne.n	80013e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	e000      	b.n	80013e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80013e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000

080013f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d141      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001406:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001412:	d131      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141a:	4a46      	ldr	r2, [pc, #280]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001420:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001424:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800142c:	4a41      	ldr	r2, [pc, #260]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2232      	movs	r2, #50	; 0x32
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144a:	e002      	b.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3b01      	subs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145e:	d102      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f2      	bne.n	800144c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001472:	d158      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e057      	b.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147e:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001488:	e04d      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001490:	d141      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149e:	d131      	bne.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2232      	movs	r2, #50	; 0x32
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	0c9b      	lsrs	r3, r3, #18
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d6:	e002      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ea:	d102      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f2      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d112      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e011      	b.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001514:	e007      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001524:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40007000 	.word	0x40007000
 8001538:	20000000 	.word	0x20000000
 800153c:	431bde83 	.word	0x431bde83

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f000 bc08 	b.w	8001d64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001554:	4b96      	ldr	r3, [pc, #600]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155e:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80e4 	beq.w	800173e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_RCC_OscConfig+0x4c>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	f040 808b 	bne.w	800169a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b01      	cmp	r3, #1
 8001588:	f040 8087 	bne.w	800169a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158c:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x64>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e3df      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_RCC_OscConfig+0x7e>
 80015b4:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015bc:	e005      	b.n	80015ca <HAL_RCC_OscConfig+0x8a>
 80015be:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d223      	bcs.n	8001616 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fd94 	bl	8002100 <RCC_SetFlashLatencyFromMSIRange>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e3c0      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a72      	ldr	r2, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	496d      	ldr	r1, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001600:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	4968      	ldr	r1, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	e025      	b.n	8001662 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001616:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4960      	ldr	r1, [pc, #384]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001634:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	495b      	ldr	r1, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd54 	bl	8002100 <RCC_SetFlashLatencyFromMSIRange>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e380      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001662:	f000 fcc1 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4950      	ldr	r1, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_RCC_OscConfig+0x278>)
 8001680:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd54 	bl	8001134 <HAL_InitTick>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d052      	beq.n	800173c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	e364      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d032      	beq.n	8001708 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a42      	ldr	r2, [pc, #264]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fd91 	bl	80011d4 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b6:	f7ff fd8d 	bl	80011d4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e34d      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a35      	ldr	r2, [pc, #212]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4930      	ldr	r1, [pc, #192]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f2:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	492b      	ldr	r1, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
 8001706:	e01a      	b.n	800173e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001714:	f7ff fd5e 	bl	80011d4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171c:	f7ff fd5a 	bl	80011d4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e31a      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1dc>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d073      	beq.n	8001832 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b08      	cmp	r3, #8
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x21c>
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d10e      	bne.n	8001774 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d063      	beq.n	8001830 <HAL_RCC_OscConfig+0x2f0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d15f      	bne.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e2f7      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x24c>
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e025      	b.n	80017d8 <HAL_RCC_OscConfig+0x298>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d114      	bne.n	80017c0 <HAL_RCC_OscConfig+0x280>
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a02      	ldr	r2, [pc, #8]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0x298>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08004d3c 	.word	0x08004d3c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004
 80017c0:	4ba0      	ldr	r3, [pc, #640]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a9f      	ldr	r2, [pc, #636]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b9d      	ldr	r3, [pc, #628]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a9c      	ldr	r2, [pc, #624]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcf8 	bl	80011d4 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fcf4 	bl	80011d4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e2b4      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2a8>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fce4 	bl	80011d4 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fce0 	bl	80011d4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e2a0      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d0>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d060      	beq.n	8001900 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x310>
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d119      	bne.n	800187e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d116      	bne.n	800187e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x328>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e27d      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4973      	ldr	r1, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	e040      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001886:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fc9f 	bl	80011d4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fc9b 	bl	80011d4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e25b      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	495f      	ldr	r1, [pc, #380]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e018      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5c      	ldr	r2, [pc, #368]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fc7b 	bl	80011d4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fc77 	bl	80011d4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e237      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03c      	beq.n	8001986 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01c      	beq.n	800194e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001914:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fc56 	bl	80011d4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fc52 	bl	80011d4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e212      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ef      	beq.n	800192c <HAL_RCC_OscConfig+0x3ec>
 800194c:	e01b      	b.n	8001986 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff fc39 	bl	80011d4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fc35 	bl	80011d4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1f5      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ef      	bne.n	8001966 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80a6 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	; 0x58
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019bc:	2301      	movs	r3, #1
 80019be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d118      	bne.n	80019fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fbfc 	bl	80011d4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e0:	f7ff fbf8 	bl	80011d4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1b8      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x508>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4d8>
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a16:	e029      	b.n	8001a6c <HAL_RCC_OscConfig+0x52c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d115      	bne.n	8001a4c <HAL_RCC_OscConfig+0x50c>
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x52c>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	4b9d      	ldr	r3, [pc, #628]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a9c      	ldr	r2, [pc, #624]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5c:	4b99      	ldr	r3, [pc, #612]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a98      	ldr	r2, [pc, #608]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fbae 	bl	80011d4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fbaa 	bl	80011d4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e168      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ed      	beq.n	8001a7c <HAL_RCC_OscConfig+0x53c>
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb97 	bl	80011d4 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fb93 	bl	80011d4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e151      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ed      	bne.n	8001aaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a7a      	ldr	r2, [pc, #488]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001af4:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afa:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fb66 	bl	80011d4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0c:	f7ff fb62 	bl	80011d4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e122      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1e:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x5cc>
 8001b2c:	e01b      	b.n	8001b66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b34:	4a63      	ldr	r2, [pc, #396]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fb49 	bl	80011d4 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b46:	f7ff fb45 	bl	80011d4 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e105      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b58:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80f9 	beq.w	8001d62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f040 80cf 	bne.w	8001d18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b7a:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d12c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d123      	bne.n	8001be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d11b      	bne.n	8001be8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d113      	bne.n	8001be8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d109      	bne.n	8001be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d071      	beq.n	8001ccc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d068      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0ac      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c16:	f7ff fadd 	bl	80011d4 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff fad9 	bl	80011d4 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e099      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x788>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c4c:	3a01      	subs	r2, #1
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c56:	0212      	lsls	r2, r2, #8
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c5e:	0852      	lsrs	r2, r2, #1
 8001c60:	3a01      	subs	r2, #1
 8001c62:	0552      	lsls	r2, r2, #21
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c6a:	0852      	lsrs	r2, r2, #1
 8001c6c:	3a01      	subs	r2, #1
 8001c6e:	0652      	lsls	r2, r2, #25
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c76:	06d2      	lsls	r2, r2, #27
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4912      	ldr	r1, [pc, #72]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c98:	f7ff fa9c 	bl	80011d4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fa98 	bl	80011d4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e058      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_RCC_OscConfig+0x784>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbe:	e050      	b.n	8001d62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04f      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d144      	bne.n	8001d62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf0:	f7ff fa70 	bl	80011d4 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fa6c 	bl	80011d4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e02c      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x7b8>
 8001d16:	e024      	b.n	8001d62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d01f      	beq.n	8001d5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa53 	bl	80011d4 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff fa4f 	bl	80011d4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e00f      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4905      	ldr	r1, [pc, #20]	; (8001d6c <HAL_RCC_OscConfig+0x82c>)
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x830>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e001      	b.n	8001d62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	feeefffc 	.word	0xfeeefffc

08001d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e11d      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b90      	ldr	r3, [pc, #576]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d910      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b8d      	ldr	r3, [pc, #564]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 020f 	bic.w	r2, r3, #15
 8001da2:	498b      	ldr	r1, [pc, #556]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b89      	ldr	r3, [pc, #548]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e105      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d908      	bls.n	8001dea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	497b      	ldr	r1, [pc, #492]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d079      	beq.n	8001eea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d11e      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0dc      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e0e:	f000 f9d1 	bl	80021b4 <RCC_GetSysClockFreqFromPLLSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a70      	ldr	r2, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d946      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d140      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e26:	4b6b      	ldr	r3, [pc, #428]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2e:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e035      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d115      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0b9      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5c:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0ad      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0a5      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e7c:	f000 f8b4 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d90f      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e88:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e94:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 0203 	bic.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4947      	ldr	r1, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eba:	f7ff f98b 	bl	80011d4 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec2:	f7ff f987 	bl	80011d4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e077      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 020c 	and.w	r2, r3, #12
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d1eb      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d010      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d208      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	492b      	ldr	r1, [pc, #172]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d210      	bcs.n	8001f5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 020f 	bic.w	r2, r3, #15
 8001f40:	4923      	ldr	r1, [pc, #140]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCC_ClockConfig+0x25c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e036      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f98:	f000 f826 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <HAL_RCC_ClockConfig+0x268>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x26c>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f8b9 	bl	8001134 <HAL_InitTick>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	04c4b400 	.word	0x04c4b400
 8001fdc:	08004d3c 	.word	0x08004d3c
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x34>
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d121      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d11e      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800201c:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e005      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002044:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10d      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d102      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	e004      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d101      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_RCC_GetSysClockFreq+0x114>)
 800206e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d134      	bne.n	80020e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0xa6>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d003      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0xac>
 800208c:	e005      	b.n	800209a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002090:	617b      	str	r3, [r7, #20]
      break;
 8002092:	e005      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002096:	617b      	str	r3, [r7, #20]
      break;
 8002098:	e002      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	617b      	str	r3, [r7, #20]
      break;
 800209e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3301      	adds	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	0e5b      	lsrs	r3, r3, #25
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	3301      	adds	r3, #1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e0:	69bb      	ldr	r3, [r7, #24]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08004d4c 	.word	0x08004d4c
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f94e 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
 800211e:	e014      	b.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a21      	ldr	r2, [pc, #132]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002138:	f7ff f93e 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
 800213c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002150:	d10b      	bne.n	800216a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d913      	bls.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2ba0      	cmp	r3, #160	; 0xa0
 800215c:	d902      	bls.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215e:	2302      	movs	r3, #2
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00d      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002164:	2301      	movs	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e00a      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b7f      	cmp	r3, #127	; 0x7f
 800216e:	d902      	bls.n	8002176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002170:	2302      	movs	r3, #2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	e004      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d101      	bne.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 020f 	bic.w	r2, r3, #15
 8002188:	4909      	ldr	r1, [pc, #36]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40022000 	.word	0x40022000

080021b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d00b      	beq.n	80021e2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d825      	bhi.n	800221c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d008      	beq.n	80021e8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d11f      	bne.n	800221c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021de:	613b      	str	r3, [r7, #16]
    break;
 80021e0:	e01f      	b.n	8002222 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80021e4:	613b      	str	r3, [r7, #16]
    break;
 80021e6:	e01c      	b.n	8002222 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e005      	b.n	8002210 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	613b      	str	r3, [r7, #16]
    break;
 800221a:	e002      	b.n	8002222 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
    break;
 8002220:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	3301      	adds	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	fb03 f202 	mul.w	r2, r3, r2
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0e5b      	lsrs	r3, r3, #25
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002262:	683b      	ldr	r3, [r7, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000
 8002274:	00f42400 	.word	0x00f42400
 8002278:	007a1200 	.word	0x007a1200
 800227c:	08004d4c 	.word	0x08004d4c

08002280 <__errno>:
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <__errno+0x8>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2000000c 	.word	0x2000000c

0800228c <__libc_init_array>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4d0d      	ldr	r5, [pc, #52]	; (80022c4 <__libc_init_array+0x38>)
 8002290:	4c0d      	ldr	r4, [pc, #52]	; (80022c8 <__libc_init_array+0x3c>)
 8002292:	1b64      	subs	r4, r4, r5
 8002294:	10a4      	asrs	r4, r4, #2
 8002296:	2600      	movs	r6, #0
 8002298:	42a6      	cmp	r6, r4
 800229a:	d109      	bne.n	80022b0 <__libc_init_array+0x24>
 800229c:	4d0b      	ldr	r5, [pc, #44]	; (80022cc <__libc_init_array+0x40>)
 800229e:	4c0c      	ldr	r4, [pc, #48]	; (80022d0 <__libc_init_array+0x44>)
 80022a0:	f002 fd36 	bl	8004d10 <_init>
 80022a4:	1b64      	subs	r4, r4, r5
 80022a6:	10a4      	asrs	r4, r4, #2
 80022a8:	2600      	movs	r6, #0
 80022aa:	42a6      	cmp	r6, r4
 80022ac:	d105      	bne.n	80022ba <__libc_init_array+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b4:	4798      	blx	r3
 80022b6:	3601      	adds	r6, #1
 80022b8:	e7ee      	b.n	8002298 <__libc_init_array+0xc>
 80022ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80022be:	4798      	blx	r3
 80022c0:	3601      	adds	r6, #1
 80022c2:	e7f2      	b.n	80022aa <__libc_init_array+0x1e>
 80022c4:	08005154 	.word	0x08005154
 80022c8:	08005154 	.word	0x08005154
 80022cc:	08005154 	.word	0x08005154
 80022d0:	08005158 	.word	0x08005158

080022d4 <memset>:
 80022d4:	4402      	add	r2, r0
 80022d6:	4603      	mov	r3, r0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d100      	bne.n	80022de <memset+0xa>
 80022dc:	4770      	bx	lr
 80022de:	f803 1b01 	strb.w	r1, [r3], #1
 80022e2:	e7f9      	b.n	80022d8 <memset+0x4>

080022e4 <__cvt>:
 80022e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022e8:	ec55 4b10 	vmov	r4, r5, d0
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	460e      	mov	r6, r1
 80022f0:	4619      	mov	r1, r3
 80022f2:	462b      	mov	r3, r5
 80022f4:	bfbb      	ittet	lt
 80022f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80022fa:	461d      	movlt	r5, r3
 80022fc:	2300      	movge	r3, #0
 80022fe:	232d      	movlt	r3, #45	; 0x2d
 8002300:	700b      	strb	r3, [r1, #0]
 8002302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002304:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002308:	4691      	mov	r9, r2
 800230a:	f023 0820 	bic.w	r8, r3, #32
 800230e:	bfbc      	itt	lt
 8002310:	4622      	movlt	r2, r4
 8002312:	4614      	movlt	r4, r2
 8002314:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002318:	d005      	beq.n	8002326 <__cvt+0x42>
 800231a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800231e:	d100      	bne.n	8002322 <__cvt+0x3e>
 8002320:	3601      	adds	r6, #1
 8002322:	2102      	movs	r1, #2
 8002324:	e000      	b.n	8002328 <__cvt+0x44>
 8002326:	2103      	movs	r1, #3
 8002328:	ab03      	add	r3, sp, #12
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	ab02      	add	r3, sp, #8
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	ec45 4b10 	vmov	d0, r4, r5
 8002334:	4653      	mov	r3, sl
 8002336:	4632      	mov	r2, r6
 8002338:	f000 fcca 	bl	8002cd0 <_dtoa_r>
 800233c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002340:	4607      	mov	r7, r0
 8002342:	d102      	bne.n	800234a <__cvt+0x66>
 8002344:	f019 0f01 	tst.w	r9, #1
 8002348:	d022      	beq.n	8002390 <__cvt+0xac>
 800234a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800234e:	eb07 0906 	add.w	r9, r7, r6
 8002352:	d110      	bne.n	8002376 <__cvt+0x92>
 8002354:	783b      	ldrb	r3, [r7, #0]
 8002356:	2b30      	cmp	r3, #48	; 0x30
 8002358:	d10a      	bne.n	8002370 <__cvt+0x8c>
 800235a:	2200      	movs	r2, #0
 800235c:	2300      	movs	r3, #0
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe fbc9 	bl	8000af8 <__aeabi_dcmpeq>
 8002366:	b918      	cbnz	r0, 8002370 <__cvt+0x8c>
 8002368:	f1c6 0601 	rsb	r6, r6, #1
 800236c:	f8ca 6000 	str.w	r6, [sl]
 8002370:	f8da 3000 	ldr.w	r3, [sl]
 8002374:	4499      	add	r9, r3
 8002376:	2200      	movs	r2, #0
 8002378:	2300      	movs	r3, #0
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fe fbbb 	bl	8000af8 <__aeabi_dcmpeq>
 8002382:	b108      	cbz	r0, 8002388 <__cvt+0xa4>
 8002384:	f8cd 900c 	str.w	r9, [sp, #12]
 8002388:	2230      	movs	r2, #48	; 0x30
 800238a:	9b03      	ldr	r3, [sp, #12]
 800238c:	454b      	cmp	r3, r9
 800238e:	d307      	bcc.n	80023a0 <__cvt+0xbc>
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002394:	1bdb      	subs	r3, r3, r7
 8002396:	4638      	mov	r0, r7
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	b004      	add	sp, #16
 800239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	9103      	str	r1, [sp, #12]
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e7f0      	b.n	800238a <__cvt+0xa6>

080023a8 <__exponent>:
 80023a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023aa:	4603      	mov	r3, r0
 80023ac:	2900      	cmp	r1, #0
 80023ae:	bfb8      	it	lt
 80023b0:	4249      	neglt	r1, r1
 80023b2:	f803 2b02 	strb.w	r2, [r3], #2
 80023b6:	bfb4      	ite	lt
 80023b8:	222d      	movlt	r2, #45	; 0x2d
 80023ba:	222b      	movge	r2, #43	; 0x2b
 80023bc:	2909      	cmp	r1, #9
 80023be:	7042      	strb	r2, [r0, #1]
 80023c0:	dd2a      	ble.n	8002418 <__exponent+0x70>
 80023c2:	f10d 0407 	add.w	r4, sp, #7
 80023c6:	46a4      	mov	ip, r4
 80023c8:	270a      	movs	r7, #10
 80023ca:	46a6      	mov	lr, r4
 80023cc:	460a      	mov	r2, r1
 80023ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80023d2:	fb07 1516 	mls	r5, r7, r6, r1
 80023d6:	3530      	adds	r5, #48	; 0x30
 80023d8:	2a63      	cmp	r2, #99	; 0x63
 80023da:	f104 34ff 	add.w	r4, r4, #4294967295
 80023de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80023e2:	4631      	mov	r1, r6
 80023e4:	dcf1      	bgt.n	80023ca <__exponent+0x22>
 80023e6:	3130      	adds	r1, #48	; 0x30
 80023e8:	f1ae 0502 	sub.w	r5, lr, #2
 80023ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80023f0:	1c44      	adds	r4, r0, #1
 80023f2:	4629      	mov	r1, r5
 80023f4:	4561      	cmp	r1, ip
 80023f6:	d30a      	bcc.n	800240e <__exponent+0x66>
 80023f8:	f10d 0209 	add.w	r2, sp, #9
 80023fc:	eba2 020e 	sub.w	r2, r2, lr
 8002400:	4565      	cmp	r5, ip
 8002402:	bf88      	it	hi
 8002404:	2200      	movhi	r2, #0
 8002406:	4413      	add	r3, r2
 8002408:	1a18      	subs	r0, r3, r0
 800240a:	b003      	add	sp, #12
 800240c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002412:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002416:	e7ed      	b.n	80023f4 <__exponent+0x4c>
 8002418:	2330      	movs	r3, #48	; 0x30
 800241a:	3130      	adds	r1, #48	; 0x30
 800241c:	7083      	strb	r3, [r0, #2]
 800241e:	70c1      	strb	r1, [r0, #3]
 8002420:	1d03      	adds	r3, r0, #4
 8002422:	e7f1      	b.n	8002408 <__exponent+0x60>

08002424 <_printf_float>:
 8002424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002428:	ed2d 8b02 	vpush	{d8}
 800242c:	b08d      	sub	sp, #52	; 0x34
 800242e:	460c      	mov	r4, r1
 8002430:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002434:	4616      	mov	r6, r2
 8002436:	461f      	mov	r7, r3
 8002438:	4605      	mov	r5, r0
 800243a:	f001 fa37 	bl	80038ac <_localeconv_r>
 800243e:	f8d0 a000 	ldr.w	sl, [r0]
 8002442:	4650      	mov	r0, sl
 8002444:	f7fd fedc 	bl	8000200 <strlen>
 8002448:	2300      	movs	r3, #0
 800244a:	930a      	str	r3, [sp, #40]	; 0x28
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	9305      	str	r3, [sp, #20]
 8002450:	f8d8 3000 	ldr.w	r3, [r8]
 8002454:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002458:	3307      	adds	r3, #7
 800245a:	f023 0307 	bic.w	r3, r3, #7
 800245e:	f103 0208 	add.w	r2, r3, #8
 8002462:	f8c8 2000 	str.w	r2, [r8]
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800246e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002472:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002476:	9307      	str	r3, [sp, #28]
 8002478:	f8cd 8018 	str.w	r8, [sp, #24]
 800247c:	ee08 0a10 	vmov	s16, r0
 8002480:	4b9f      	ldr	r3, [pc, #636]	; (8002700 <_printf_float+0x2dc>)
 8002482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002486:	f04f 32ff 	mov.w	r2, #4294967295
 800248a:	f7fe fb67 	bl	8000b5c <__aeabi_dcmpun>
 800248e:	bb88      	cbnz	r0, 80024f4 <_printf_float+0xd0>
 8002490:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002494:	4b9a      	ldr	r3, [pc, #616]	; (8002700 <_printf_float+0x2dc>)
 8002496:	f04f 32ff 	mov.w	r2, #4294967295
 800249a:	f7fe fb41 	bl	8000b20 <__aeabi_dcmple>
 800249e:	bb48      	cbnz	r0, 80024f4 <_printf_float+0xd0>
 80024a0:	2200      	movs	r2, #0
 80024a2:	2300      	movs	r3, #0
 80024a4:	4640      	mov	r0, r8
 80024a6:	4649      	mov	r1, r9
 80024a8:	f7fe fb30 	bl	8000b0c <__aeabi_dcmplt>
 80024ac:	b110      	cbz	r0, 80024b4 <_printf_float+0x90>
 80024ae:	232d      	movs	r3, #45	; 0x2d
 80024b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024b4:	4b93      	ldr	r3, [pc, #588]	; (8002704 <_printf_float+0x2e0>)
 80024b6:	4894      	ldr	r0, [pc, #592]	; (8002708 <_printf_float+0x2e4>)
 80024b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80024bc:	bf94      	ite	ls
 80024be:	4698      	movls	r8, r3
 80024c0:	4680      	movhi	r8, r0
 80024c2:	2303      	movs	r3, #3
 80024c4:	6123      	str	r3, [r4, #16]
 80024c6:	9b05      	ldr	r3, [sp, #20]
 80024c8:	f023 0204 	bic.w	r2, r3, #4
 80024cc:	6022      	str	r2, [r4, #0]
 80024ce:	f04f 0900 	mov.w	r9, #0
 80024d2:	9700      	str	r7, [sp, #0]
 80024d4:	4633      	mov	r3, r6
 80024d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80024d8:	4621      	mov	r1, r4
 80024da:	4628      	mov	r0, r5
 80024dc:	f000 f9d8 	bl	8002890 <_printf_common>
 80024e0:	3001      	adds	r0, #1
 80024e2:	f040 8090 	bne.w	8002606 <_printf_float+0x1e2>
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ea:	b00d      	add	sp, #52	; 0x34
 80024ec:	ecbd 8b02 	vpop	{d8}
 80024f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f4:	4642      	mov	r2, r8
 80024f6:	464b      	mov	r3, r9
 80024f8:	4640      	mov	r0, r8
 80024fa:	4649      	mov	r1, r9
 80024fc:	f7fe fb2e 	bl	8000b5c <__aeabi_dcmpun>
 8002500:	b140      	cbz	r0, 8002514 <_printf_float+0xf0>
 8002502:	464b      	mov	r3, r9
 8002504:	2b00      	cmp	r3, #0
 8002506:	bfbc      	itt	lt
 8002508:	232d      	movlt	r3, #45	; 0x2d
 800250a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800250e:	487f      	ldr	r0, [pc, #508]	; (800270c <_printf_float+0x2e8>)
 8002510:	4b7f      	ldr	r3, [pc, #508]	; (8002710 <_printf_float+0x2ec>)
 8002512:	e7d1      	b.n	80024b8 <_printf_float+0x94>
 8002514:	6863      	ldr	r3, [r4, #4]
 8002516:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800251a:	9206      	str	r2, [sp, #24]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	d13f      	bne.n	80025a0 <_printf_float+0x17c>
 8002520:	2306      	movs	r3, #6
 8002522:	6063      	str	r3, [r4, #4]
 8002524:	9b05      	ldr	r3, [sp, #20]
 8002526:	6861      	ldr	r1, [r4, #4]
 8002528:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800252c:	2300      	movs	r3, #0
 800252e:	9303      	str	r3, [sp, #12]
 8002530:	ab0a      	add	r3, sp, #40	; 0x28
 8002532:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002536:	ab09      	add	r3, sp, #36	; 0x24
 8002538:	ec49 8b10 	vmov	d0, r8, r9
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6022      	str	r2, [r4, #0]
 8002540:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002544:	4628      	mov	r0, r5
 8002546:	f7ff fecd 	bl	80022e4 <__cvt>
 800254a:	9b06      	ldr	r3, [sp, #24]
 800254c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800254e:	2b47      	cmp	r3, #71	; 0x47
 8002550:	4680      	mov	r8, r0
 8002552:	d108      	bne.n	8002566 <_printf_float+0x142>
 8002554:	1cc8      	adds	r0, r1, #3
 8002556:	db02      	blt.n	800255e <_printf_float+0x13a>
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	4299      	cmp	r1, r3
 800255c:	dd41      	ble.n	80025e2 <_printf_float+0x1be>
 800255e:	f1ab 0b02 	sub.w	fp, fp, #2
 8002562:	fa5f fb8b 	uxtb.w	fp, fp
 8002566:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800256a:	d820      	bhi.n	80025ae <_printf_float+0x18a>
 800256c:	3901      	subs	r1, #1
 800256e:	465a      	mov	r2, fp
 8002570:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002574:	9109      	str	r1, [sp, #36]	; 0x24
 8002576:	f7ff ff17 	bl	80023a8 <__exponent>
 800257a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800257c:	1813      	adds	r3, r2, r0
 800257e:	2a01      	cmp	r2, #1
 8002580:	4681      	mov	r9, r0
 8002582:	6123      	str	r3, [r4, #16]
 8002584:	dc02      	bgt.n	800258c <_printf_float+0x168>
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	07d2      	lsls	r2, r2, #31
 800258a:	d501      	bpl.n	8002590 <_printf_float+0x16c>
 800258c:	3301      	adds	r3, #1
 800258e:	6123      	str	r3, [r4, #16]
 8002590:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002594:	2b00      	cmp	r3, #0
 8002596:	d09c      	beq.n	80024d2 <_printf_float+0xae>
 8002598:	232d      	movs	r3, #45	; 0x2d
 800259a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800259e:	e798      	b.n	80024d2 <_printf_float+0xae>
 80025a0:	9a06      	ldr	r2, [sp, #24]
 80025a2:	2a47      	cmp	r2, #71	; 0x47
 80025a4:	d1be      	bne.n	8002524 <_printf_float+0x100>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1bc      	bne.n	8002524 <_printf_float+0x100>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e7b9      	b.n	8002522 <_printf_float+0xfe>
 80025ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80025b2:	d118      	bne.n	80025e6 <_printf_float+0x1c2>
 80025b4:	2900      	cmp	r1, #0
 80025b6:	6863      	ldr	r3, [r4, #4]
 80025b8:	dd0b      	ble.n	80025d2 <_printf_float+0x1ae>
 80025ba:	6121      	str	r1, [r4, #16]
 80025bc:	b913      	cbnz	r3, 80025c4 <_printf_float+0x1a0>
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	07d0      	lsls	r0, r2, #31
 80025c2:	d502      	bpl.n	80025ca <_printf_float+0x1a6>
 80025c4:	3301      	adds	r3, #1
 80025c6:	440b      	add	r3, r1
 80025c8:	6123      	str	r3, [r4, #16]
 80025ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80025cc:	f04f 0900 	mov.w	r9, #0
 80025d0:	e7de      	b.n	8002590 <_printf_float+0x16c>
 80025d2:	b913      	cbnz	r3, 80025da <_printf_float+0x1b6>
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	07d2      	lsls	r2, r2, #31
 80025d8:	d501      	bpl.n	80025de <_printf_float+0x1ba>
 80025da:	3302      	adds	r3, #2
 80025dc:	e7f4      	b.n	80025c8 <_printf_float+0x1a4>
 80025de:	2301      	movs	r3, #1
 80025e0:	e7f2      	b.n	80025c8 <_printf_float+0x1a4>
 80025e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80025e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025e8:	4299      	cmp	r1, r3
 80025ea:	db05      	blt.n	80025f8 <_printf_float+0x1d4>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	6121      	str	r1, [r4, #16]
 80025f0:	07d8      	lsls	r0, r3, #31
 80025f2:	d5ea      	bpl.n	80025ca <_printf_float+0x1a6>
 80025f4:	1c4b      	adds	r3, r1, #1
 80025f6:	e7e7      	b.n	80025c8 <_printf_float+0x1a4>
 80025f8:	2900      	cmp	r1, #0
 80025fa:	bfd4      	ite	le
 80025fc:	f1c1 0202 	rsble	r2, r1, #2
 8002600:	2201      	movgt	r2, #1
 8002602:	4413      	add	r3, r2
 8002604:	e7e0      	b.n	80025c8 <_printf_float+0x1a4>
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	055a      	lsls	r2, r3, #21
 800260a:	d407      	bmi.n	800261c <_printf_float+0x1f8>
 800260c:	6923      	ldr	r3, [r4, #16]
 800260e:	4642      	mov	r2, r8
 8002610:	4631      	mov	r1, r6
 8002612:	4628      	mov	r0, r5
 8002614:	47b8      	blx	r7
 8002616:	3001      	adds	r0, #1
 8002618:	d12c      	bne.n	8002674 <_printf_float+0x250>
 800261a:	e764      	b.n	80024e6 <_printf_float+0xc2>
 800261c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002620:	f240 80e0 	bls.w	80027e4 <_printf_float+0x3c0>
 8002624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002628:	2200      	movs	r2, #0
 800262a:	2300      	movs	r3, #0
 800262c:	f7fe fa64 	bl	8000af8 <__aeabi_dcmpeq>
 8002630:	2800      	cmp	r0, #0
 8002632:	d034      	beq.n	800269e <_printf_float+0x27a>
 8002634:	4a37      	ldr	r2, [pc, #220]	; (8002714 <_printf_float+0x2f0>)
 8002636:	2301      	movs	r3, #1
 8002638:	4631      	mov	r1, r6
 800263a:	4628      	mov	r0, r5
 800263c:	47b8      	blx	r7
 800263e:	3001      	adds	r0, #1
 8002640:	f43f af51 	beq.w	80024e6 <_printf_float+0xc2>
 8002644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002648:	429a      	cmp	r2, r3
 800264a:	db02      	blt.n	8002652 <_printf_float+0x22e>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	07d8      	lsls	r0, r3, #31
 8002650:	d510      	bpl.n	8002674 <_printf_float+0x250>
 8002652:	ee18 3a10 	vmov	r3, s16
 8002656:	4652      	mov	r2, sl
 8002658:	4631      	mov	r1, r6
 800265a:	4628      	mov	r0, r5
 800265c:	47b8      	blx	r7
 800265e:	3001      	adds	r0, #1
 8002660:	f43f af41 	beq.w	80024e6 <_printf_float+0xc2>
 8002664:	f04f 0800 	mov.w	r8, #0
 8002668:	f104 091a 	add.w	r9, r4, #26
 800266c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	4543      	cmp	r3, r8
 8002672:	dc09      	bgt.n	8002688 <_printf_float+0x264>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	079b      	lsls	r3, r3, #30
 8002678:	f100 8105 	bmi.w	8002886 <_printf_float+0x462>
 800267c:	68e0      	ldr	r0, [r4, #12]
 800267e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002680:	4298      	cmp	r0, r3
 8002682:	bfb8      	it	lt
 8002684:	4618      	movlt	r0, r3
 8002686:	e730      	b.n	80024ea <_printf_float+0xc6>
 8002688:	2301      	movs	r3, #1
 800268a:	464a      	mov	r2, r9
 800268c:	4631      	mov	r1, r6
 800268e:	4628      	mov	r0, r5
 8002690:	47b8      	blx	r7
 8002692:	3001      	adds	r0, #1
 8002694:	f43f af27 	beq.w	80024e6 <_printf_float+0xc2>
 8002698:	f108 0801 	add.w	r8, r8, #1
 800269c:	e7e6      	b.n	800266c <_printf_float+0x248>
 800269e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	dc39      	bgt.n	8002718 <_printf_float+0x2f4>
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <_printf_float+0x2f0>)
 80026a6:	2301      	movs	r3, #1
 80026a8:	4631      	mov	r1, r6
 80026aa:	4628      	mov	r0, r5
 80026ac:	47b8      	blx	r7
 80026ae:	3001      	adds	r0, #1
 80026b0:	f43f af19 	beq.w	80024e6 <_printf_float+0xc2>
 80026b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026b8:	4313      	orrs	r3, r2
 80026ba:	d102      	bne.n	80026c2 <_printf_float+0x29e>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	07d9      	lsls	r1, r3, #31
 80026c0:	d5d8      	bpl.n	8002674 <_printf_float+0x250>
 80026c2:	ee18 3a10 	vmov	r3, s16
 80026c6:	4652      	mov	r2, sl
 80026c8:	4631      	mov	r1, r6
 80026ca:	4628      	mov	r0, r5
 80026cc:	47b8      	blx	r7
 80026ce:	3001      	adds	r0, #1
 80026d0:	f43f af09 	beq.w	80024e6 <_printf_float+0xc2>
 80026d4:	f04f 0900 	mov.w	r9, #0
 80026d8:	f104 0a1a 	add.w	sl, r4, #26
 80026dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026de:	425b      	negs	r3, r3
 80026e0:	454b      	cmp	r3, r9
 80026e2:	dc01      	bgt.n	80026e8 <_printf_float+0x2c4>
 80026e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026e6:	e792      	b.n	800260e <_printf_float+0x1ea>
 80026e8:	2301      	movs	r3, #1
 80026ea:	4652      	mov	r2, sl
 80026ec:	4631      	mov	r1, r6
 80026ee:	4628      	mov	r0, r5
 80026f0:	47b8      	blx	r7
 80026f2:	3001      	adds	r0, #1
 80026f4:	f43f aef7 	beq.w	80024e6 <_printf_float+0xc2>
 80026f8:	f109 0901 	add.w	r9, r9, #1
 80026fc:	e7ee      	b.n	80026dc <_printf_float+0x2b8>
 80026fe:	bf00      	nop
 8002700:	7fefffff 	.word	0x7fefffff
 8002704:	08004d80 	.word	0x08004d80
 8002708:	08004d84 	.word	0x08004d84
 800270c:	08004d8c 	.word	0x08004d8c
 8002710:	08004d88 	.word	0x08004d88
 8002714:	08004d90 	.word	0x08004d90
 8002718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800271a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800271c:	429a      	cmp	r2, r3
 800271e:	bfa8      	it	ge
 8002720:	461a      	movge	r2, r3
 8002722:	2a00      	cmp	r2, #0
 8002724:	4691      	mov	r9, r2
 8002726:	dc37      	bgt.n	8002798 <_printf_float+0x374>
 8002728:	f04f 0b00 	mov.w	fp, #0
 800272c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002730:	f104 021a 	add.w	r2, r4, #26
 8002734:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002736:	9305      	str	r3, [sp, #20]
 8002738:	eba3 0309 	sub.w	r3, r3, r9
 800273c:	455b      	cmp	r3, fp
 800273e:	dc33      	bgt.n	80027a8 <_printf_float+0x384>
 8002740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002744:	429a      	cmp	r2, r3
 8002746:	db3b      	blt.n	80027c0 <_printf_float+0x39c>
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	07da      	lsls	r2, r3, #31
 800274c:	d438      	bmi.n	80027c0 <_printf_float+0x39c>
 800274e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002750:	9a05      	ldr	r2, [sp, #20]
 8002752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002754:	1a9a      	subs	r2, r3, r2
 8002756:	eba3 0901 	sub.w	r9, r3, r1
 800275a:	4591      	cmp	r9, r2
 800275c:	bfa8      	it	ge
 800275e:	4691      	movge	r9, r2
 8002760:	f1b9 0f00 	cmp.w	r9, #0
 8002764:	dc35      	bgt.n	80027d2 <_printf_float+0x3ae>
 8002766:	f04f 0800 	mov.w	r8, #0
 800276a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800276e:	f104 0a1a 	add.w	sl, r4, #26
 8002772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	eba3 0309 	sub.w	r3, r3, r9
 800277c:	4543      	cmp	r3, r8
 800277e:	f77f af79 	ble.w	8002674 <_printf_float+0x250>
 8002782:	2301      	movs	r3, #1
 8002784:	4652      	mov	r2, sl
 8002786:	4631      	mov	r1, r6
 8002788:	4628      	mov	r0, r5
 800278a:	47b8      	blx	r7
 800278c:	3001      	adds	r0, #1
 800278e:	f43f aeaa 	beq.w	80024e6 <_printf_float+0xc2>
 8002792:	f108 0801 	add.w	r8, r8, #1
 8002796:	e7ec      	b.n	8002772 <_printf_float+0x34e>
 8002798:	4613      	mov	r3, r2
 800279a:	4631      	mov	r1, r6
 800279c:	4642      	mov	r2, r8
 800279e:	4628      	mov	r0, r5
 80027a0:	47b8      	blx	r7
 80027a2:	3001      	adds	r0, #1
 80027a4:	d1c0      	bne.n	8002728 <_printf_float+0x304>
 80027a6:	e69e      	b.n	80024e6 <_printf_float+0xc2>
 80027a8:	2301      	movs	r3, #1
 80027aa:	4631      	mov	r1, r6
 80027ac:	4628      	mov	r0, r5
 80027ae:	9205      	str	r2, [sp, #20]
 80027b0:	47b8      	blx	r7
 80027b2:	3001      	adds	r0, #1
 80027b4:	f43f ae97 	beq.w	80024e6 <_printf_float+0xc2>
 80027b8:	9a05      	ldr	r2, [sp, #20]
 80027ba:	f10b 0b01 	add.w	fp, fp, #1
 80027be:	e7b9      	b.n	8002734 <_printf_float+0x310>
 80027c0:	ee18 3a10 	vmov	r3, s16
 80027c4:	4652      	mov	r2, sl
 80027c6:	4631      	mov	r1, r6
 80027c8:	4628      	mov	r0, r5
 80027ca:	47b8      	blx	r7
 80027cc:	3001      	adds	r0, #1
 80027ce:	d1be      	bne.n	800274e <_printf_float+0x32a>
 80027d0:	e689      	b.n	80024e6 <_printf_float+0xc2>
 80027d2:	9a05      	ldr	r2, [sp, #20]
 80027d4:	464b      	mov	r3, r9
 80027d6:	4442      	add	r2, r8
 80027d8:	4631      	mov	r1, r6
 80027da:	4628      	mov	r0, r5
 80027dc:	47b8      	blx	r7
 80027de:	3001      	adds	r0, #1
 80027e0:	d1c1      	bne.n	8002766 <_printf_float+0x342>
 80027e2:	e680      	b.n	80024e6 <_printf_float+0xc2>
 80027e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027e6:	2a01      	cmp	r2, #1
 80027e8:	dc01      	bgt.n	80027ee <_printf_float+0x3ca>
 80027ea:	07db      	lsls	r3, r3, #31
 80027ec:	d538      	bpl.n	8002860 <_printf_float+0x43c>
 80027ee:	2301      	movs	r3, #1
 80027f0:	4642      	mov	r2, r8
 80027f2:	4631      	mov	r1, r6
 80027f4:	4628      	mov	r0, r5
 80027f6:	47b8      	blx	r7
 80027f8:	3001      	adds	r0, #1
 80027fa:	f43f ae74 	beq.w	80024e6 <_printf_float+0xc2>
 80027fe:	ee18 3a10 	vmov	r3, s16
 8002802:	4652      	mov	r2, sl
 8002804:	4631      	mov	r1, r6
 8002806:	4628      	mov	r0, r5
 8002808:	47b8      	blx	r7
 800280a:	3001      	adds	r0, #1
 800280c:	f43f ae6b 	beq.w	80024e6 <_printf_float+0xc2>
 8002810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002814:	2200      	movs	r2, #0
 8002816:	2300      	movs	r3, #0
 8002818:	f7fe f96e 	bl	8000af8 <__aeabi_dcmpeq>
 800281c:	b9d8      	cbnz	r0, 8002856 <_printf_float+0x432>
 800281e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002820:	f108 0201 	add.w	r2, r8, #1
 8002824:	3b01      	subs	r3, #1
 8002826:	4631      	mov	r1, r6
 8002828:	4628      	mov	r0, r5
 800282a:	47b8      	blx	r7
 800282c:	3001      	adds	r0, #1
 800282e:	d10e      	bne.n	800284e <_printf_float+0x42a>
 8002830:	e659      	b.n	80024e6 <_printf_float+0xc2>
 8002832:	2301      	movs	r3, #1
 8002834:	4652      	mov	r2, sl
 8002836:	4631      	mov	r1, r6
 8002838:	4628      	mov	r0, r5
 800283a:	47b8      	blx	r7
 800283c:	3001      	adds	r0, #1
 800283e:	f43f ae52 	beq.w	80024e6 <_printf_float+0xc2>
 8002842:	f108 0801 	add.w	r8, r8, #1
 8002846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002848:	3b01      	subs	r3, #1
 800284a:	4543      	cmp	r3, r8
 800284c:	dcf1      	bgt.n	8002832 <_printf_float+0x40e>
 800284e:	464b      	mov	r3, r9
 8002850:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002854:	e6dc      	b.n	8002610 <_printf_float+0x1ec>
 8002856:	f04f 0800 	mov.w	r8, #0
 800285a:	f104 0a1a 	add.w	sl, r4, #26
 800285e:	e7f2      	b.n	8002846 <_printf_float+0x422>
 8002860:	2301      	movs	r3, #1
 8002862:	4642      	mov	r2, r8
 8002864:	e7df      	b.n	8002826 <_printf_float+0x402>
 8002866:	2301      	movs	r3, #1
 8002868:	464a      	mov	r2, r9
 800286a:	4631      	mov	r1, r6
 800286c:	4628      	mov	r0, r5
 800286e:	47b8      	blx	r7
 8002870:	3001      	adds	r0, #1
 8002872:	f43f ae38 	beq.w	80024e6 <_printf_float+0xc2>
 8002876:	f108 0801 	add.w	r8, r8, #1
 800287a:	68e3      	ldr	r3, [r4, #12]
 800287c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	4543      	cmp	r3, r8
 8002882:	dcf0      	bgt.n	8002866 <_printf_float+0x442>
 8002884:	e6fa      	b.n	800267c <_printf_float+0x258>
 8002886:	f04f 0800 	mov.w	r8, #0
 800288a:	f104 0919 	add.w	r9, r4, #25
 800288e:	e7f4      	b.n	800287a <_printf_float+0x456>

08002890 <_printf_common>:
 8002890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002894:	4616      	mov	r6, r2
 8002896:	4699      	mov	r9, r3
 8002898:	688a      	ldr	r2, [r1, #8]
 800289a:	690b      	ldr	r3, [r1, #16]
 800289c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bfb8      	it	lt
 80028a4:	4613      	movlt	r3, r2
 80028a6:	6033      	str	r3, [r6, #0]
 80028a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028ac:	4607      	mov	r7, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	b10a      	cbz	r2, 80028b6 <_printf_common+0x26>
 80028b2:	3301      	adds	r3, #1
 80028b4:	6033      	str	r3, [r6, #0]
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	0699      	lsls	r1, r3, #26
 80028ba:	bf42      	ittt	mi
 80028bc:	6833      	ldrmi	r3, [r6, #0]
 80028be:	3302      	addmi	r3, #2
 80028c0:	6033      	strmi	r3, [r6, #0]
 80028c2:	6825      	ldr	r5, [r4, #0]
 80028c4:	f015 0506 	ands.w	r5, r5, #6
 80028c8:	d106      	bne.n	80028d8 <_printf_common+0x48>
 80028ca:	f104 0a19 	add.w	sl, r4, #25
 80028ce:	68e3      	ldr	r3, [r4, #12]
 80028d0:	6832      	ldr	r2, [r6, #0]
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	42ab      	cmp	r3, r5
 80028d6:	dc26      	bgt.n	8002926 <_printf_common+0x96>
 80028d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028dc:	1e13      	subs	r3, r2, #0
 80028de:	6822      	ldr	r2, [r4, #0]
 80028e0:	bf18      	it	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	0692      	lsls	r2, r2, #26
 80028e6:	d42b      	bmi.n	8002940 <_printf_common+0xb0>
 80028e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028ec:	4649      	mov	r1, r9
 80028ee:	4638      	mov	r0, r7
 80028f0:	47c0      	blx	r8
 80028f2:	3001      	adds	r0, #1
 80028f4:	d01e      	beq.n	8002934 <_printf_common+0xa4>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	68e5      	ldr	r5, [r4, #12]
 80028fa:	6832      	ldr	r2, [r6, #0]
 80028fc:	f003 0306 	and.w	r3, r3, #6
 8002900:	2b04      	cmp	r3, #4
 8002902:	bf08      	it	eq
 8002904:	1aad      	subeq	r5, r5, r2
 8002906:	68a3      	ldr	r3, [r4, #8]
 8002908:	6922      	ldr	r2, [r4, #16]
 800290a:	bf0c      	ite	eq
 800290c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002910:	2500      	movne	r5, #0
 8002912:	4293      	cmp	r3, r2
 8002914:	bfc4      	itt	gt
 8002916:	1a9b      	subgt	r3, r3, r2
 8002918:	18ed      	addgt	r5, r5, r3
 800291a:	2600      	movs	r6, #0
 800291c:	341a      	adds	r4, #26
 800291e:	42b5      	cmp	r5, r6
 8002920:	d11a      	bne.n	8002958 <_printf_common+0xc8>
 8002922:	2000      	movs	r0, #0
 8002924:	e008      	b.n	8002938 <_printf_common+0xa8>
 8002926:	2301      	movs	r3, #1
 8002928:	4652      	mov	r2, sl
 800292a:	4649      	mov	r1, r9
 800292c:	4638      	mov	r0, r7
 800292e:	47c0      	blx	r8
 8002930:	3001      	adds	r0, #1
 8002932:	d103      	bne.n	800293c <_printf_common+0xac>
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293c:	3501      	adds	r5, #1
 800293e:	e7c6      	b.n	80028ce <_printf_common+0x3e>
 8002940:	18e1      	adds	r1, r4, r3
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	2030      	movs	r0, #48	; 0x30
 8002946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800294a:	4422      	add	r2, r4
 800294c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002954:	3302      	adds	r3, #2
 8002956:	e7c7      	b.n	80028e8 <_printf_common+0x58>
 8002958:	2301      	movs	r3, #1
 800295a:	4622      	mov	r2, r4
 800295c:	4649      	mov	r1, r9
 800295e:	4638      	mov	r0, r7
 8002960:	47c0      	blx	r8
 8002962:	3001      	adds	r0, #1
 8002964:	d0e6      	beq.n	8002934 <_printf_common+0xa4>
 8002966:	3601      	adds	r6, #1
 8002968:	e7d9      	b.n	800291e <_printf_common+0x8e>
	...

0800296c <_printf_i>:
 800296c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002970:	7e0f      	ldrb	r7, [r1, #24]
 8002972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002974:	2f78      	cmp	r7, #120	; 0x78
 8002976:	4691      	mov	r9, r2
 8002978:	4680      	mov	r8, r0
 800297a:	460c      	mov	r4, r1
 800297c:	469a      	mov	sl, r3
 800297e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002982:	d807      	bhi.n	8002994 <_printf_i+0x28>
 8002984:	2f62      	cmp	r7, #98	; 0x62
 8002986:	d80a      	bhi.n	800299e <_printf_i+0x32>
 8002988:	2f00      	cmp	r7, #0
 800298a:	f000 80d8 	beq.w	8002b3e <_printf_i+0x1d2>
 800298e:	2f58      	cmp	r7, #88	; 0x58
 8002990:	f000 80a3 	beq.w	8002ada <_printf_i+0x16e>
 8002994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800299c:	e03a      	b.n	8002a14 <_printf_i+0xa8>
 800299e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029a2:	2b15      	cmp	r3, #21
 80029a4:	d8f6      	bhi.n	8002994 <_printf_i+0x28>
 80029a6:	a101      	add	r1, pc, #4	; (adr r1, 80029ac <_printf_i+0x40>)
 80029a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029ac:	08002a05 	.word	0x08002a05
 80029b0:	08002a19 	.word	0x08002a19
 80029b4:	08002995 	.word	0x08002995
 80029b8:	08002995 	.word	0x08002995
 80029bc:	08002995 	.word	0x08002995
 80029c0:	08002995 	.word	0x08002995
 80029c4:	08002a19 	.word	0x08002a19
 80029c8:	08002995 	.word	0x08002995
 80029cc:	08002995 	.word	0x08002995
 80029d0:	08002995 	.word	0x08002995
 80029d4:	08002995 	.word	0x08002995
 80029d8:	08002b25 	.word	0x08002b25
 80029dc:	08002a49 	.word	0x08002a49
 80029e0:	08002b07 	.word	0x08002b07
 80029e4:	08002995 	.word	0x08002995
 80029e8:	08002995 	.word	0x08002995
 80029ec:	08002b47 	.word	0x08002b47
 80029f0:	08002995 	.word	0x08002995
 80029f4:	08002a49 	.word	0x08002a49
 80029f8:	08002995 	.word	0x08002995
 80029fc:	08002995 	.word	0x08002995
 8002a00:	08002b0f 	.word	0x08002b0f
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	602a      	str	r2, [r5, #0]
 8002a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0a3      	b.n	8002b60 <_printf_i+0x1f4>
 8002a18:	6820      	ldr	r0, [r4, #0]
 8002a1a:	6829      	ldr	r1, [r5, #0]
 8002a1c:	0606      	lsls	r6, r0, #24
 8002a1e:	f101 0304 	add.w	r3, r1, #4
 8002a22:	d50a      	bpl.n	8002a3a <_printf_i+0xce>
 8002a24:	680e      	ldr	r6, [r1, #0]
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	2e00      	cmp	r6, #0
 8002a2a:	da03      	bge.n	8002a34 <_printf_i+0xc8>
 8002a2c:	232d      	movs	r3, #45	; 0x2d
 8002a2e:	4276      	negs	r6, r6
 8002a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a34:	485e      	ldr	r0, [pc, #376]	; (8002bb0 <_printf_i+0x244>)
 8002a36:	230a      	movs	r3, #10
 8002a38:	e019      	b.n	8002a6e <_printf_i+0x102>
 8002a3a:	680e      	ldr	r6, [r1, #0]
 8002a3c:	602b      	str	r3, [r5, #0]
 8002a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a42:	bf18      	it	ne
 8002a44:	b236      	sxthne	r6, r6
 8002a46:	e7ef      	b.n	8002a28 <_printf_i+0xbc>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	1d19      	adds	r1, r3, #4
 8002a4e:	6029      	str	r1, [r5, #0]
 8002a50:	0601      	lsls	r1, r0, #24
 8002a52:	d501      	bpl.n	8002a58 <_printf_i+0xec>
 8002a54:	681e      	ldr	r6, [r3, #0]
 8002a56:	e002      	b.n	8002a5e <_printf_i+0xf2>
 8002a58:	0646      	lsls	r6, r0, #25
 8002a5a:	d5fb      	bpl.n	8002a54 <_printf_i+0xe8>
 8002a5c:	881e      	ldrh	r6, [r3, #0]
 8002a5e:	4854      	ldr	r0, [pc, #336]	; (8002bb0 <_printf_i+0x244>)
 8002a60:	2f6f      	cmp	r7, #111	; 0x6f
 8002a62:	bf0c      	ite	eq
 8002a64:	2308      	moveq	r3, #8
 8002a66:	230a      	movne	r3, #10
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a6e:	6865      	ldr	r5, [r4, #4]
 8002a70:	60a5      	str	r5, [r4, #8]
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	bfa2      	ittt	ge
 8002a76:	6821      	ldrge	r1, [r4, #0]
 8002a78:	f021 0104 	bicge.w	r1, r1, #4
 8002a7c:	6021      	strge	r1, [r4, #0]
 8002a7e:	b90e      	cbnz	r6, 8002a84 <_printf_i+0x118>
 8002a80:	2d00      	cmp	r5, #0
 8002a82:	d04d      	beq.n	8002b20 <_printf_i+0x1b4>
 8002a84:	4615      	mov	r5, r2
 8002a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8002a8e:	5dc7      	ldrb	r7, [r0, r7]
 8002a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a94:	4637      	mov	r7, r6
 8002a96:	42bb      	cmp	r3, r7
 8002a98:	460e      	mov	r6, r1
 8002a9a:	d9f4      	bls.n	8002a86 <_printf_i+0x11a>
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d10b      	bne.n	8002ab8 <_printf_i+0x14c>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	07de      	lsls	r6, r3, #31
 8002aa4:	d508      	bpl.n	8002ab8 <_printf_i+0x14c>
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	6861      	ldr	r1, [r4, #4]
 8002aaa:	4299      	cmp	r1, r3
 8002aac:	bfde      	ittt	le
 8002aae:	2330      	movle	r3, #48	; 0x30
 8002ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ab8:	1b52      	subs	r2, r2, r5
 8002aba:	6122      	str	r2, [r4, #16]
 8002abc:	f8cd a000 	str.w	sl, [sp]
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	aa03      	add	r2, sp, #12
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	f7ff fee2 	bl	8002890 <_printf_common>
 8002acc:	3001      	adds	r0, #1
 8002ace:	d14c      	bne.n	8002b6a <_printf_i+0x1fe>
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	b004      	add	sp, #16
 8002ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ada:	4835      	ldr	r0, [pc, #212]	; (8002bb0 <_printf_i+0x244>)
 8002adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ae0:	6829      	ldr	r1, [r5, #0]
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ae8:	6029      	str	r1, [r5, #0]
 8002aea:	061d      	lsls	r5, r3, #24
 8002aec:	d514      	bpl.n	8002b18 <_printf_i+0x1ac>
 8002aee:	07df      	lsls	r7, r3, #31
 8002af0:	bf44      	itt	mi
 8002af2:	f043 0320 	orrmi.w	r3, r3, #32
 8002af6:	6023      	strmi	r3, [r4, #0]
 8002af8:	b91e      	cbnz	r6, 8002b02 <_printf_i+0x196>
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	f023 0320 	bic.w	r3, r3, #32
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	2310      	movs	r3, #16
 8002b04:	e7b0      	b.n	8002a68 <_printf_i+0xfc>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	f043 0320 	orr.w	r3, r3, #32
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	2378      	movs	r3, #120	; 0x78
 8002b10:	4828      	ldr	r0, [pc, #160]	; (8002bb4 <_printf_i+0x248>)
 8002b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b16:	e7e3      	b.n	8002ae0 <_printf_i+0x174>
 8002b18:	0659      	lsls	r1, r3, #25
 8002b1a:	bf48      	it	mi
 8002b1c:	b2b6      	uxthmi	r6, r6
 8002b1e:	e7e6      	b.n	8002aee <_printf_i+0x182>
 8002b20:	4615      	mov	r5, r2
 8002b22:	e7bb      	b.n	8002a9c <_printf_i+0x130>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	6826      	ldr	r6, [r4, #0]
 8002b28:	6961      	ldr	r1, [r4, #20]
 8002b2a:	1d18      	adds	r0, r3, #4
 8002b2c:	6028      	str	r0, [r5, #0]
 8002b2e:	0635      	lsls	r5, r6, #24
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	d501      	bpl.n	8002b38 <_printf_i+0x1cc>
 8002b34:	6019      	str	r1, [r3, #0]
 8002b36:	e002      	b.n	8002b3e <_printf_i+0x1d2>
 8002b38:	0670      	lsls	r0, r6, #25
 8002b3a:	d5fb      	bpl.n	8002b34 <_printf_i+0x1c8>
 8002b3c:	8019      	strh	r1, [r3, #0]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6123      	str	r3, [r4, #16]
 8002b42:	4615      	mov	r5, r2
 8002b44:	e7ba      	b.n	8002abc <_printf_i+0x150>
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	1d1a      	adds	r2, r3, #4
 8002b4a:	602a      	str	r2, [r5, #0]
 8002b4c:	681d      	ldr	r5, [r3, #0]
 8002b4e:	6862      	ldr	r2, [r4, #4]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4628      	mov	r0, r5
 8002b54:	f7fd fb5c 	bl	8000210 <memchr>
 8002b58:	b108      	cbz	r0, 8002b5e <_printf_i+0x1f2>
 8002b5a:	1b40      	subs	r0, r0, r5
 8002b5c:	6060      	str	r0, [r4, #4]
 8002b5e:	6863      	ldr	r3, [r4, #4]
 8002b60:	6123      	str	r3, [r4, #16]
 8002b62:	2300      	movs	r3, #0
 8002b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b68:	e7a8      	b.n	8002abc <_printf_i+0x150>
 8002b6a:	6923      	ldr	r3, [r4, #16]
 8002b6c:	462a      	mov	r2, r5
 8002b6e:	4649      	mov	r1, r9
 8002b70:	4640      	mov	r0, r8
 8002b72:	47d0      	blx	sl
 8002b74:	3001      	adds	r0, #1
 8002b76:	d0ab      	beq.n	8002ad0 <_printf_i+0x164>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	079b      	lsls	r3, r3, #30
 8002b7c:	d413      	bmi.n	8002ba6 <_printf_i+0x23a>
 8002b7e:	68e0      	ldr	r0, [r4, #12]
 8002b80:	9b03      	ldr	r3, [sp, #12]
 8002b82:	4298      	cmp	r0, r3
 8002b84:	bfb8      	it	lt
 8002b86:	4618      	movlt	r0, r3
 8002b88:	e7a4      	b.n	8002ad4 <_printf_i+0x168>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4632      	mov	r2, r6
 8002b8e:	4649      	mov	r1, r9
 8002b90:	4640      	mov	r0, r8
 8002b92:	47d0      	blx	sl
 8002b94:	3001      	adds	r0, #1
 8002b96:	d09b      	beq.n	8002ad0 <_printf_i+0x164>
 8002b98:	3501      	adds	r5, #1
 8002b9a:	68e3      	ldr	r3, [r4, #12]
 8002b9c:	9903      	ldr	r1, [sp, #12]
 8002b9e:	1a5b      	subs	r3, r3, r1
 8002ba0:	42ab      	cmp	r3, r5
 8002ba2:	dcf2      	bgt.n	8002b8a <_printf_i+0x21e>
 8002ba4:	e7eb      	b.n	8002b7e <_printf_i+0x212>
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	f104 0619 	add.w	r6, r4, #25
 8002bac:	e7f5      	b.n	8002b9a <_printf_i+0x22e>
 8002bae:	bf00      	nop
 8002bb0:	08004d92 	.word	0x08004d92
 8002bb4:	08004da3 	.word	0x08004da3

08002bb8 <quorem>:
 8002bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	6903      	ldr	r3, [r0, #16]
 8002bbe:	690c      	ldr	r4, [r1, #16]
 8002bc0:	42a3      	cmp	r3, r4
 8002bc2:	4607      	mov	r7, r0
 8002bc4:	f2c0 8081 	blt.w	8002cca <quorem+0x112>
 8002bc8:	3c01      	subs	r4, #1
 8002bca:	f101 0814 	add.w	r8, r1, #20
 8002bce:	f100 0514 	add.w	r5, r0, #20
 8002bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002bdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002be0:	3301      	adds	r3, #1
 8002be2:	429a      	cmp	r2, r3
 8002be4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002be8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002bec:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bf0:	d331      	bcc.n	8002c56 <quorem+0x9e>
 8002bf2:	f04f 0e00 	mov.w	lr, #0
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	46ac      	mov	ip, r5
 8002bfa:	46f2      	mov	sl, lr
 8002bfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8002c00:	b293      	uxth	r3, r2
 8002c02:	fb06 e303 	mla	r3, r6, r3, lr
 8002c06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	ebaa 0303 	sub.w	r3, sl, r3
 8002c10:	f8dc a000 	ldr.w	sl, [ip]
 8002c14:	0c12      	lsrs	r2, r2, #16
 8002c16:	fa13 f38a 	uxtah	r3, r3, sl
 8002c1a:	fb06 e202 	mla	r2, r6, r2, lr
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	9b00      	ldr	r3, [sp, #0]
 8002c22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002c26:	b292      	uxth	r2, r2
 8002c28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c30:	f8bd 3000 	ldrh.w	r3, [sp]
 8002c34:	4581      	cmp	r9, r0
 8002c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c3a:	f84c 3b04 	str.w	r3, [ip], #4
 8002c3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002c42:	d2db      	bcs.n	8002bfc <quorem+0x44>
 8002c44:	f855 300b 	ldr.w	r3, [r5, fp]
 8002c48:	b92b      	cbnz	r3, 8002c56 <quorem+0x9e>
 8002c4a:	9b01      	ldr	r3, [sp, #4]
 8002c4c:	3b04      	subs	r3, #4
 8002c4e:	429d      	cmp	r5, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	d32e      	bcc.n	8002cb2 <quorem+0xfa>
 8002c54:	613c      	str	r4, [r7, #16]
 8002c56:	4638      	mov	r0, r7
 8002c58:	f001 f8c4 	bl	8003de4 <__mcmp>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	db24      	blt.n	8002caa <quorem+0xf2>
 8002c60:	3601      	adds	r6, #1
 8002c62:	4628      	mov	r0, r5
 8002c64:	f04f 0c00 	mov.w	ip, #0
 8002c68:	f858 2b04 	ldr.w	r2, [r8], #4
 8002c6c:	f8d0 e000 	ldr.w	lr, [r0]
 8002c70:	b293      	uxth	r3, r2
 8002c72:	ebac 0303 	sub.w	r3, ip, r3
 8002c76:	0c12      	lsrs	r2, r2, #16
 8002c78:	fa13 f38e 	uxtah	r3, r3, lr
 8002c7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c8a:	45c1      	cmp	r9, r8
 8002c8c:	f840 3b04 	str.w	r3, [r0], #4
 8002c90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002c94:	d2e8      	bcs.n	8002c68 <quorem+0xb0>
 8002c96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c9e:	b922      	cbnz	r2, 8002caa <quorem+0xf2>
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	429d      	cmp	r5, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	d30a      	bcc.n	8002cbe <quorem+0x106>
 8002ca8:	613c      	str	r4, [r7, #16]
 8002caa:	4630      	mov	r0, r6
 8002cac:	b003      	add	sp, #12
 8002cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	3b04      	subs	r3, #4
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	d1cc      	bne.n	8002c54 <quorem+0x9c>
 8002cba:	3c01      	subs	r4, #1
 8002cbc:	e7c7      	b.n	8002c4e <quorem+0x96>
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	3b04      	subs	r3, #4
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <quorem+0xf0>
 8002cc6:	3c01      	subs	r4, #1
 8002cc8:	e7eb      	b.n	8002ca2 <quorem+0xea>
 8002cca:	2000      	movs	r0, #0
 8002ccc:	e7ee      	b.n	8002cac <quorem+0xf4>
	...

08002cd0 <_dtoa_r>:
 8002cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd4:	ed2d 8b04 	vpush	{d8-d9}
 8002cd8:	ec57 6b10 	vmov	r6, r7, d0
 8002cdc:	b093      	sub	sp, #76	; 0x4c
 8002cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002ce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002ce4:	9106      	str	r1, [sp, #24]
 8002ce6:	ee10 aa10 	vmov	sl, s0
 8002cea:	4604      	mov	r4, r0
 8002cec:	9209      	str	r2, [sp, #36]	; 0x24
 8002cee:	930c      	str	r3, [sp, #48]	; 0x30
 8002cf0:	46bb      	mov	fp, r7
 8002cf2:	b975      	cbnz	r5, 8002d12 <_dtoa_r+0x42>
 8002cf4:	2010      	movs	r0, #16
 8002cf6:	f000 fddd 	bl	80038b4 <malloc>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6260      	str	r0, [r4, #36]	; 0x24
 8002cfe:	b920      	cbnz	r0, 8002d0a <_dtoa_r+0x3a>
 8002d00:	4ba7      	ldr	r3, [pc, #668]	; (8002fa0 <_dtoa_r+0x2d0>)
 8002d02:	21ea      	movs	r1, #234	; 0xea
 8002d04:	48a7      	ldr	r0, [pc, #668]	; (8002fa4 <_dtoa_r+0x2d4>)
 8002d06:	f001 fa75 	bl	80041f4 <__assert_func>
 8002d0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002d0e:	6005      	str	r5, [r0, #0]
 8002d10:	60c5      	str	r5, [r0, #12]
 8002d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	b151      	cbz	r1, 8002d2e <_dtoa_r+0x5e>
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	604a      	str	r2, [r1, #4]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 fe1c 	bl	8003960 <_Bfree>
 8002d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	1e3b      	subs	r3, r7, #0
 8002d30:	bfaa      	itet	ge
 8002d32:	2300      	movge	r3, #0
 8002d34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002d38:	f8c8 3000 	strge.w	r3, [r8]
 8002d3c:	4b9a      	ldr	r3, [pc, #616]	; (8002fa8 <_dtoa_r+0x2d8>)
 8002d3e:	bfbc      	itt	lt
 8002d40:	2201      	movlt	r2, #1
 8002d42:	f8c8 2000 	strlt.w	r2, [r8]
 8002d46:	ea33 030b 	bics.w	r3, r3, fp
 8002d4a:	d11b      	bne.n	8002d84 <_dtoa_r+0xb4>
 8002d4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002d58:	4333      	orrs	r3, r6
 8002d5a:	f000 8592 	beq.w	8003882 <_dtoa_r+0xbb2>
 8002d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d60:	b963      	cbnz	r3, 8002d7c <_dtoa_r+0xac>
 8002d62:	4b92      	ldr	r3, [pc, #584]	; (8002fac <_dtoa_r+0x2dc>)
 8002d64:	e022      	b.n	8002dac <_dtoa_r+0xdc>
 8002d66:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <_dtoa_r+0x2e0>)
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	9801      	ldr	r0, [sp, #4]
 8002d72:	b013      	add	sp, #76	; 0x4c
 8002d74:	ecbd 8b04 	vpop	{d8-d9}
 8002d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7c:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <_dtoa_r+0x2dc>)
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	3303      	adds	r3, #3
 8002d82:	e7f3      	b.n	8002d6c <_dtoa_r+0x9c>
 8002d84:	2200      	movs	r2, #0
 8002d86:	2300      	movs	r3, #0
 8002d88:	4650      	mov	r0, sl
 8002d8a:	4659      	mov	r1, fp
 8002d8c:	f7fd feb4 	bl	8000af8 <__aeabi_dcmpeq>
 8002d90:	ec4b ab19 	vmov	d9, sl, fp
 8002d94:	4680      	mov	r8, r0
 8002d96:	b158      	cbz	r0, 8002db0 <_dtoa_r+0xe0>
 8002d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 856b 	beq.w	800387c <_dtoa_r+0xbac>
 8002da6:	4883      	ldr	r0, [pc, #524]	; (8002fb4 <_dtoa_r+0x2e4>)
 8002da8:	6018      	str	r0, [r3, #0]
 8002daa:	1e43      	subs	r3, r0, #1
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	e7df      	b.n	8002d70 <_dtoa_r+0xa0>
 8002db0:	ec4b ab10 	vmov	d0, sl, fp
 8002db4:	aa10      	add	r2, sp, #64	; 0x40
 8002db6:	a911      	add	r1, sp, #68	; 0x44
 8002db8:	4620      	mov	r0, r4
 8002dba:	f001 f8b9 	bl	8003f30 <__d2b>
 8002dbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002dc2:	ee08 0a10 	vmov	s16, r0
 8002dc6:	2d00      	cmp	r5, #0
 8002dc8:	f000 8084 	beq.w	8002ed4 <_dtoa_r+0x204>
 8002dcc:	ee19 3a90 	vmov	r3, s19
 8002dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002dd8:	4656      	mov	r6, sl
 8002dda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002de2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002de6:	4b74      	ldr	r3, [pc, #464]	; (8002fb8 <_dtoa_r+0x2e8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	4630      	mov	r0, r6
 8002dec:	4639      	mov	r1, r7
 8002dee:	f7fd fa63 	bl	80002b8 <__aeabi_dsub>
 8002df2:	a365      	add	r3, pc, #404	; (adr r3, 8002f88 <_dtoa_r+0x2b8>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fc16 	bl	8000628 <__aeabi_dmul>
 8002dfc:	a364      	add	r3, pc, #400	; (adr r3, 8002f90 <_dtoa_r+0x2c0>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fa5b 	bl	80002bc <__adddf3>
 8002e06:	4606      	mov	r6, r0
 8002e08:	4628      	mov	r0, r5
 8002e0a:	460f      	mov	r7, r1
 8002e0c:	f7fd fba2 	bl	8000554 <__aeabi_i2d>
 8002e10:	a361      	add	r3, pc, #388	; (adr r3, 8002f98 <_dtoa_r+0x2c8>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fc07 	bl	8000628 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4630      	mov	r0, r6
 8002e20:	4639      	mov	r1, r7
 8002e22:	f7fd fa4b 	bl	80002bc <__adddf3>
 8002e26:	4606      	mov	r6, r0
 8002e28:	460f      	mov	r7, r1
 8002e2a:	f7fd fead 	bl	8000b88 <__aeabi_d2iz>
 8002e2e:	2200      	movs	r2, #0
 8002e30:	9000      	str	r0, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	4630      	mov	r0, r6
 8002e36:	4639      	mov	r1, r7
 8002e38:	f7fd fe68 	bl	8000b0c <__aeabi_dcmplt>
 8002e3c:	b150      	cbz	r0, 8002e54 <_dtoa_r+0x184>
 8002e3e:	9800      	ldr	r0, [sp, #0]
 8002e40:	f7fd fb88 	bl	8000554 <__aeabi_i2d>
 8002e44:	4632      	mov	r2, r6
 8002e46:	463b      	mov	r3, r7
 8002e48:	f7fd fe56 	bl	8000af8 <__aeabi_dcmpeq>
 8002e4c:	b910      	cbnz	r0, 8002e54 <_dtoa_r+0x184>
 8002e4e:	9b00      	ldr	r3, [sp, #0]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	9b00      	ldr	r3, [sp, #0]
 8002e56:	2b16      	cmp	r3, #22
 8002e58:	d85a      	bhi.n	8002f10 <_dtoa_r+0x240>
 8002e5a:	9a00      	ldr	r2, [sp, #0]
 8002e5c:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <_dtoa_r+0x2ec>)
 8002e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	ec51 0b19 	vmov	r0, r1, d9
 8002e6a:	f7fd fe4f 	bl	8000b0c <__aeabi_dcmplt>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d050      	beq.n	8002f14 <_dtoa_r+0x244>
 8002e72:	9b00      	ldr	r3, [sp, #0]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e7e:	1b5d      	subs	r5, r3, r5
 8002e80:	1e6b      	subs	r3, r5, #1
 8002e82:	9305      	str	r3, [sp, #20]
 8002e84:	bf45      	ittet	mi
 8002e86:	f1c5 0301 	rsbmi	r3, r5, #1
 8002e8a:	9304      	strmi	r3, [sp, #16]
 8002e8c:	2300      	movpl	r3, #0
 8002e8e:	2300      	movmi	r3, #0
 8002e90:	bf4c      	ite	mi
 8002e92:	9305      	strmi	r3, [sp, #20]
 8002e94:	9304      	strpl	r3, [sp, #16]
 8002e96:	9b00      	ldr	r3, [sp, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db3d      	blt.n	8002f18 <_dtoa_r+0x248>
 8002e9c:	9b05      	ldr	r3, [sp, #20]
 8002e9e:	9a00      	ldr	r2, [sp, #0]
 8002ea0:	920a      	str	r2, [sp, #40]	; 0x28
 8002ea2:	4413      	add	r3, r2
 8002ea4:	9305      	str	r3, [sp, #20]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9307      	str	r3, [sp, #28]
 8002eaa:	9b06      	ldr	r3, [sp, #24]
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	f200 8089 	bhi.w	8002fc4 <_dtoa_r+0x2f4>
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	bfc4      	itt	gt
 8002eb6:	3b04      	subgt	r3, #4
 8002eb8:	9306      	strgt	r3, [sp, #24]
 8002eba:	9b06      	ldr	r3, [sp, #24]
 8002ebc:	f1a3 0302 	sub.w	r3, r3, #2
 8002ec0:	bfcc      	ite	gt
 8002ec2:	2500      	movgt	r5, #0
 8002ec4:	2501      	movle	r5, #1
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	f200 8087 	bhi.w	8002fda <_dtoa_r+0x30a>
 8002ecc:	e8df f003 	tbb	[pc, r3]
 8002ed0:	59383a2d 	.word	0x59383a2d
 8002ed4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002ed8:	441d      	add	r5, r3
 8002eda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	bfc1      	itttt	gt
 8002ee2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002ee6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002eea:	fa0b f303 	lslgt.w	r3, fp, r3
 8002eee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002ef2:	bfda      	itte	le
 8002ef4:	f1c3 0320 	rsble	r3, r3, #32
 8002ef8:	fa06 f003 	lslle.w	r0, r6, r3
 8002efc:	4318      	orrgt	r0, r3
 8002efe:	f7fd fb19 	bl	8000534 <__aeabi_ui2d>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4606      	mov	r6, r0
 8002f06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002f0a:	3d01      	subs	r5, #1
 8002f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8002f0e:	e76a      	b.n	8002de6 <_dtoa_r+0x116>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e7b2      	b.n	8002e7a <_dtoa_r+0x1aa>
 8002f14:	900b      	str	r0, [sp, #44]	; 0x2c
 8002f16:	e7b1      	b.n	8002e7c <_dtoa_r+0x1ac>
 8002f18:	9b04      	ldr	r3, [sp, #16]
 8002f1a:	9a00      	ldr	r2, [sp, #0]
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	9304      	str	r3, [sp, #16]
 8002f20:	4253      	negs	r3, r2
 8002f22:	9307      	str	r3, [sp, #28]
 8002f24:	2300      	movs	r3, #0
 8002f26:	930a      	str	r3, [sp, #40]	; 0x28
 8002f28:	e7bf      	b.n	8002eaa <_dtoa_r+0x1da>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9308      	str	r3, [sp, #32]
 8002f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dc55      	bgt.n	8002fe0 <_dtoa_r+0x310>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f3e:	e00c      	b.n	8002f5a <_dtoa_r+0x28a>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e7f3      	b.n	8002f2c <_dtoa_r+0x25c>
 8002f44:	2300      	movs	r3, #0
 8002f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f48:	9308      	str	r3, [sp, #32]
 8002f4a:	9b00      	ldr	r3, [sp, #0]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	9302      	str	r3, [sp, #8]
 8002f50:	3301      	adds	r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	9303      	str	r3, [sp, #12]
 8002f56:	bfb8      	it	lt
 8002f58:	2301      	movlt	r3, #1
 8002f5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6042      	str	r2, [r0, #4]
 8002f60:	2204      	movs	r2, #4
 8002f62:	f102 0614 	add.w	r6, r2, #20
 8002f66:	429e      	cmp	r6, r3
 8002f68:	6841      	ldr	r1, [r0, #4]
 8002f6a:	d93d      	bls.n	8002fe8 <_dtoa_r+0x318>
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f000 fcb7 	bl	80038e0 <_Balloc>
 8002f72:	9001      	str	r0, [sp, #4]
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d13b      	bne.n	8002ff0 <_dtoa_r+0x320>
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <_dtoa_r+0x2f0>)
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002f80:	e6c0      	b.n	8002d04 <_dtoa_r+0x34>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e7df      	b.n	8002f46 <_dtoa_r+0x276>
 8002f86:	bf00      	nop
 8002f88:	636f4361 	.word	0x636f4361
 8002f8c:	3fd287a7 	.word	0x3fd287a7
 8002f90:	8b60c8b3 	.word	0x8b60c8b3
 8002f94:	3fc68a28 	.word	0x3fc68a28
 8002f98:	509f79fb 	.word	0x509f79fb
 8002f9c:	3fd34413 	.word	0x3fd34413
 8002fa0:	08004dc1 	.word	0x08004dc1
 8002fa4:	08004dd8 	.word	0x08004dd8
 8002fa8:	7ff00000 	.word	0x7ff00000
 8002fac:	08004dbd 	.word	0x08004dbd
 8002fb0:	08004db4 	.word	0x08004db4
 8002fb4:	08004d91 	.word	0x08004d91
 8002fb8:	3ff80000 	.word	0x3ff80000
 8002fbc:	08004ec8 	.word	0x08004ec8
 8002fc0:	08004e33 	.word	0x08004e33
 8002fc4:	2501      	movs	r5, #1
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9306      	str	r3, [sp, #24]
 8002fca:	9508      	str	r5, [sp, #32]
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2312      	movs	r3, #18
 8002fd8:	e7b0      	b.n	8002f3c <_dtoa_r+0x26c>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	9308      	str	r3, [sp, #32]
 8002fde:	e7f5      	b.n	8002fcc <_dtoa_r+0x2fc>
 8002fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002fe6:	e7b8      	b.n	8002f5a <_dtoa_r+0x28a>
 8002fe8:	3101      	adds	r1, #1
 8002fea:	6041      	str	r1, [r0, #4]
 8002fec:	0052      	lsls	r2, r2, #1
 8002fee:	e7b8      	b.n	8002f62 <_dtoa_r+0x292>
 8002ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ff2:	9a01      	ldr	r2, [sp, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	2b0e      	cmp	r3, #14
 8002ffa:	f200 809d 	bhi.w	8003138 <_dtoa_r+0x468>
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	f000 809a 	beq.w	8003138 <_dtoa_r+0x468>
 8003004:	9b00      	ldr	r3, [sp, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	dd32      	ble.n	8003070 <_dtoa_r+0x3a0>
 800300a:	4ab7      	ldr	r2, [pc, #732]	; (80032e8 <_dtoa_r+0x618>)
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003018:	9b00      	ldr	r3, [sp, #0]
 800301a:	05d8      	lsls	r0, r3, #23
 800301c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003020:	d516      	bpl.n	8003050 <_dtoa_r+0x380>
 8003022:	4bb2      	ldr	r3, [pc, #712]	; (80032ec <_dtoa_r+0x61c>)
 8003024:	ec51 0b19 	vmov	r0, r1, d9
 8003028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800302c:	f7fd fc26 	bl	800087c <__aeabi_ddiv>
 8003030:	f007 070f 	and.w	r7, r7, #15
 8003034:	4682      	mov	sl, r0
 8003036:	468b      	mov	fp, r1
 8003038:	2503      	movs	r5, #3
 800303a:	4eac      	ldr	r6, [pc, #688]	; (80032ec <_dtoa_r+0x61c>)
 800303c:	b957      	cbnz	r7, 8003054 <_dtoa_r+0x384>
 800303e:	4642      	mov	r2, r8
 8003040:	464b      	mov	r3, r9
 8003042:	4650      	mov	r0, sl
 8003044:	4659      	mov	r1, fp
 8003046:	f7fd fc19 	bl	800087c <__aeabi_ddiv>
 800304a:	4682      	mov	sl, r0
 800304c:	468b      	mov	fp, r1
 800304e:	e028      	b.n	80030a2 <_dtoa_r+0x3d2>
 8003050:	2502      	movs	r5, #2
 8003052:	e7f2      	b.n	800303a <_dtoa_r+0x36a>
 8003054:	07f9      	lsls	r1, r7, #31
 8003056:	d508      	bpl.n	800306a <_dtoa_r+0x39a>
 8003058:	4640      	mov	r0, r8
 800305a:	4649      	mov	r1, r9
 800305c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003060:	f7fd fae2 	bl	8000628 <__aeabi_dmul>
 8003064:	3501      	adds	r5, #1
 8003066:	4680      	mov	r8, r0
 8003068:	4689      	mov	r9, r1
 800306a:	107f      	asrs	r7, r7, #1
 800306c:	3608      	adds	r6, #8
 800306e:	e7e5      	b.n	800303c <_dtoa_r+0x36c>
 8003070:	f000 809b 	beq.w	80031aa <_dtoa_r+0x4da>
 8003074:	9b00      	ldr	r3, [sp, #0]
 8003076:	4f9d      	ldr	r7, [pc, #628]	; (80032ec <_dtoa_r+0x61c>)
 8003078:	425e      	negs	r6, r3
 800307a:	4b9b      	ldr	r3, [pc, #620]	; (80032e8 <_dtoa_r+0x618>)
 800307c:	f006 020f 	and.w	r2, r6, #15
 8003080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	ec51 0b19 	vmov	r0, r1, d9
 800308c:	f7fd facc 	bl	8000628 <__aeabi_dmul>
 8003090:	1136      	asrs	r6, r6, #4
 8003092:	4682      	mov	sl, r0
 8003094:	468b      	mov	fp, r1
 8003096:	2300      	movs	r3, #0
 8003098:	2502      	movs	r5, #2
 800309a:	2e00      	cmp	r6, #0
 800309c:	d17a      	bne.n	8003194 <_dtoa_r+0x4c4>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1d3      	bne.n	800304a <_dtoa_r+0x37a>
 80030a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8082 	beq.w	80031ae <_dtoa_r+0x4de>
 80030aa:	4b91      	ldr	r3, [pc, #580]	; (80032f0 <_dtoa_r+0x620>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	4650      	mov	r0, sl
 80030b0:	4659      	mov	r1, fp
 80030b2:	f7fd fd2b 	bl	8000b0c <__aeabi_dcmplt>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d079      	beq.n	80031ae <_dtoa_r+0x4de>
 80030ba:	9b03      	ldr	r3, [sp, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d076      	beq.n	80031ae <_dtoa_r+0x4de>
 80030c0:	9b02      	ldr	r3, [sp, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	dd36      	ble.n	8003134 <_dtoa_r+0x464>
 80030c6:	9b00      	ldr	r3, [sp, #0]
 80030c8:	4650      	mov	r0, sl
 80030ca:	4659      	mov	r1, fp
 80030cc:	1e5f      	subs	r7, r3, #1
 80030ce:	2200      	movs	r2, #0
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <_dtoa_r+0x624>)
 80030d2:	f7fd faa9 	bl	8000628 <__aeabi_dmul>
 80030d6:	9e02      	ldr	r6, [sp, #8]
 80030d8:	4682      	mov	sl, r0
 80030da:	468b      	mov	fp, r1
 80030dc:	3501      	adds	r5, #1
 80030de:	4628      	mov	r0, r5
 80030e0:	f7fd fa38 	bl	8000554 <__aeabi_i2d>
 80030e4:	4652      	mov	r2, sl
 80030e6:	465b      	mov	r3, fp
 80030e8:	f7fd fa9e 	bl	8000628 <__aeabi_dmul>
 80030ec:	4b82      	ldr	r3, [pc, #520]	; (80032f8 <_dtoa_r+0x628>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	f7fd f8e4 	bl	80002bc <__adddf3>
 80030f4:	46d0      	mov	r8, sl
 80030f6:	46d9      	mov	r9, fp
 80030f8:	4682      	mov	sl, r0
 80030fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80030fe:	2e00      	cmp	r6, #0
 8003100:	d158      	bne.n	80031b4 <_dtoa_r+0x4e4>
 8003102:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <_dtoa_r+0x62c>)
 8003104:	2200      	movs	r2, #0
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	f7fd f8d5 	bl	80002b8 <__aeabi_dsub>
 800310e:	4652      	mov	r2, sl
 8003110:	465b      	mov	r3, fp
 8003112:	4680      	mov	r8, r0
 8003114:	4689      	mov	r9, r1
 8003116:	f7fd fd17 	bl	8000b48 <__aeabi_dcmpgt>
 800311a:	2800      	cmp	r0, #0
 800311c:	f040 8295 	bne.w	800364a <_dtoa_r+0x97a>
 8003120:	4652      	mov	r2, sl
 8003122:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003126:	4640      	mov	r0, r8
 8003128:	4649      	mov	r1, r9
 800312a:	f7fd fcef 	bl	8000b0c <__aeabi_dcmplt>
 800312e:	2800      	cmp	r0, #0
 8003130:	f040 8289 	bne.w	8003646 <_dtoa_r+0x976>
 8003134:	ec5b ab19 	vmov	sl, fp, d9
 8003138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800313a:	2b00      	cmp	r3, #0
 800313c:	f2c0 8148 	blt.w	80033d0 <_dtoa_r+0x700>
 8003140:	9a00      	ldr	r2, [sp, #0]
 8003142:	2a0e      	cmp	r2, #14
 8003144:	f300 8144 	bgt.w	80033d0 <_dtoa_r+0x700>
 8003148:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <_dtoa_r+0x618>)
 800314a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800314e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	f280 80d5 	bge.w	8003304 <_dtoa_r+0x634>
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f300 80d1 	bgt.w	8003304 <_dtoa_r+0x634>
 8003162:	f040 826f 	bne.w	8003644 <_dtoa_r+0x974>
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <_dtoa_r+0x62c>)
 8003168:	2200      	movs	r2, #0
 800316a:	4640      	mov	r0, r8
 800316c:	4649      	mov	r1, r9
 800316e:	f7fd fa5b 	bl	8000628 <__aeabi_dmul>
 8003172:	4652      	mov	r2, sl
 8003174:	465b      	mov	r3, fp
 8003176:	f7fd fcdd 	bl	8000b34 <__aeabi_dcmpge>
 800317a:	9e03      	ldr	r6, [sp, #12]
 800317c:	4637      	mov	r7, r6
 800317e:	2800      	cmp	r0, #0
 8003180:	f040 8245 	bne.w	800360e <_dtoa_r+0x93e>
 8003184:	9d01      	ldr	r5, [sp, #4]
 8003186:	2331      	movs	r3, #49	; 0x31
 8003188:	f805 3b01 	strb.w	r3, [r5], #1
 800318c:	9b00      	ldr	r3, [sp, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	e240      	b.n	8003616 <_dtoa_r+0x946>
 8003194:	07f2      	lsls	r2, r6, #31
 8003196:	d505      	bpl.n	80031a4 <_dtoa_r+0x4d4>
 8003198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800319c:	f7fd fa44 	bl	8000628 <__aeabi_dmul>
 80031a0:	3501      	adds	r5, #1
 80031a2:	2301      	movs	r3, #1
 80031a4:	1076      	asrs	r6, r6, #1
 80031a6:	3708      	adds	r7, #8
 80031a8:	e777      	b.n	800309a <_dtoa_r+0x3ca>
 80031aa:	2502      	movs	r5, #2
 80031ac:	e779      	b.n	80030a2 <_dtoa_r+0x3d2>
 80031ae:	9f00      	ldr	r7, [sp, #0]
 80031b0:	9e03      	ldr	r6, [sp, #12]
 80031b2:	e794      	b.n	80030de <_dtoa_r+0x40e>
 80031b4:	9901      	ldr	r1, [sp, #4]
 80031b6:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <_dtoa_r+0x618>)
 80031b8:	4431      	add	r1, r6
 80031ba:	910d      	str	r1, [sp, #52]	; 0x34
 80031bc:	9908      	ldr	r1, [sp, #32]
 80031be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80031c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80031c6:	2900      	cmp	r1, #0
 80031c8:	d043      	beq.n	8003252 <_dtoa_r+0x582>
 80031ca:	494d      	ldr	r1, [pc, #308]	; (8003300 <_dtoa_r+0x630>)
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fd fb55 	bl	800087c <__aeabi_ddiv>
 80031d2:	4652      	mov	r2, sl
 80031d4:	465b      	mov	r3, fp
 80031d6:	f7fd f86f 	bl	80002b8 <__aeabi_dsub>
 80031da:	9d01      	ldr	r5, [sp, #4]
 80031dc:	4682      	mov	sl, r0
 80031de:	468b      	mov	fp, r1
 80031e0:	4649      	mov	r1, r9
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7fd fcd0 	bl	8000b88 <__aeabi_d2iz>
 80031e8:	4606      	mov	r6, r0
 80031ea:	f7fd f9b3 	bl	8000554 <__aeabi_i2d>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4640      	mov	r0, r8
 80031f4:	4649      	mov	r1, r9
 80031f6:	f7fd f85f 	bl	80002b8 <__aeabi_dsub>
 80031fa:	3630      	adds	r6, #48	; 0x30
 80031fc:	f805 6b01 	strb.w	r6, [r5], #1
 8003200:	4652      	mov	r2, sl
 8003202:	465b      	mov	r3, fp
 8003204:	4680      	mov	r8, r0
 8003206:	4689      	mov	r9, r1
 8003208:	f7fd fc80 	bl	8000b0c <__aeabi_dcmplt>
 800320c:	2800      	cmp	r0, #0
 800320e:	d163      	bne.n	80032d8 <_dtoa_r+0x608>
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	4936      	ldr	r1, [pc, #216]	; (80032f0 <_dtoa_r+0x620>)
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd f84e 	bl	80002b8 <__aeabi_dsub>
 800321c:	4652      	mov	r2, sl
 800321e:	465b      	mov	r3, fp
 8003220:	f7fd fc74 	bl	8000b0c <__aeabi_dcmplt>
 8003224:	2800      	cmp	r0, #0
 8003226:	f040 80b5 	bne.w	8003394 <_dtoa_r+0x6c4>
 800322a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800322c:	429d      	cmp	r5, r3
 800322e:	d081      	beq.n	8003134 <_dtoa_r+0x464>
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <_dtoa_r+0x624>)
 8003232:	2200      	movs	r2, #0
 8003234:	4650      	mov	r0, sl
 8003236:	4659      	mov	r1, fp
 8003238:	f7fd f9f6 	bl	8000628 <__aeabi_dmul>
 800323c:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <_dtoa_r+0x624>)
 800323e:	4682      	mov	sl, r0
 8003240:	468b      	mov	fp, r1
 8003242:	4640      	mov	r0, r8
 8003244:	4649      	mov	r1, r9
 8003246:	2200      	movs	r2, #0
 8003248:	f7fd f9ee 	bl	8000628 <__aeabi_dmul>
 800324c:	4680      	mov	r8, r0
 800324e:	4689      	mov	r9, r1
 8003250:	e7c6      	b.n	80031e0 <_dtoa_r+0x510>
 8003252:	4650      	mov	r0, sl
 8003254:	4659      	mov	r1, fp
 8003256:	f7fd f9e7 	bl	8000628 <__aeabi_dmul>
 800325a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800325c:	9d01      	ldr	r5, [sp, #4]
 800325e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003260:	4682      	mov	sl, r0
 8003262:	468b      	mov	fp, r1
 8003264:	4649      	mov	r1, r9
 8003266:	4640      	mov	r0, r8
 8003268:	f7fd fc8e 	bl	8000b88 <__aeabi_d2iz>
 800326c:	4606      	mov	r6, r0
 800326e:	f7fd f971 	bl	8000554 <__aeabi_i2d>
 8003272:	3630      	adds	r6, #48	; 0x30
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4640      	mov	r0, r8
 800327a:	4649      	mov	r1, r9
 800327c:	f7fd f81c 	bl	80002b8 <__aeabi_dsub>
 8003280:	f805 6b01 	strb.w	r6, [r5], #1
 8003284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003286:	429d      	cmp	r5, r3
 8003288:	4680      	mov	r8, r0
 800328a:	4689      	mov	r9, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	d124      	bne.n	80032dc <_dtoa_r+0x60c>
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <_dtoa_r+0x630>)
 8003294:	4650      	mov	r0, sl
 8003296:	4659      	mov	r1, fp
 8003298:	f7fd f810 	bl	80002bc <__adddf3>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4640      	mov	r0, r8
 80032a2:	4649      	mov	r1, r9
 80032a4:	f7fd fc50 	bl	8000b48 <__aeabi_dcmpgt>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d173      	bne.n	8003394 <_dtoa_r+0x6c4>
 80032ac:	4652      	mov	r2, sl
 80032ae:	465b      	mov	r3, fp
 80032b0:	4913      	ldr	r1, [pc, #76]	; (8003300 <_dtoa_r+0x630>)
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd f800 	bl	80002b8 <__aeabi_dsub>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4640      	mov	r0, r8
 80032be:	4649      	mov	r1, r9
 80032c0:	f7fd fc24 	bl	8000b0c <__aeabi_dcmplt>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	f43f af35 	beq.w	8003134 <_dtoa_r+0x464>
 80032ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80032cc:	1e6b      	subs	r3, r5, #1
 80032ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80032d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d0f8      	beq.n	80032ca <_dtoa_r+0x5fa>
 80032d8:	9700      	str	r7, [sp, #0]
 80032da:	e049      	b.n	8003370 <_dtoa_r+0x6a0>
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <_dtoa_r+0x624>)
 80032de:	f7fd f9a3 	bl	8000628 <__aeabi_dmul>
 80032e2:	4680      	mov	r8, r0
 80032e4:	4689      	mov	r9, r1
 80032e6:	e7bd      	b.n	8003264 <_dtoa_r+0x594>
 80032e8:	08004ec8 	.word	0x08004ec8
 80032ec:	08004ea0 	.word	0x08004ea0
 80032f0:	3ff00000 	.word	0x3ff00000
 80032f4:	40240000 	.word	0x40240000
 80032f8:	401c0000 	.word	0x401c0000
 80032fc:	40140000 	.word	0x40140000
 8003300:	3fe00000 	.word	0x3fe00000
 8003304:	9d01      	ldr	r5, [sp, #4]
 8003306:	4656      	mov	r6, sl
 8003308:	465f      	mov	r7, fp
 800330a:	4642      	mov	r2, r8
 800330c:	464b      	mov	r3, r9
 800330e:	4630      	mov	r0, r6
 8003310:	4639      	mov	r1, r7
 8003312:	f7fd fab3 	bl	800087c <__aeabi_ddiv>
 8003316:	f7fd fc37 	bl	8000b88 <__aeabi_d2iz>
 800331a:	4682      	mov	sl, r0
 800331c:	f7fd f91a 	bl	8000554 <__aeabi_i2d>
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	f7fd f980 	bl	8000628 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4630      	mov	r0, r6
 800332e:	4639      	mov	r1, r7
 8003330:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8003334:	f7fc ffc0 	bl	80002b8 <__aeabi_dsub>
 8003338:	f805 6b01 	strb.w	r6, [r5], #1
 800333c:	9e01      	ldr	r6, [sp, #4]
 800333e:	9f03      	ldr	r7, [sp, #12]
 8003340:	1bae      	subs	r6, r5, r6
 8003342:	42b7      	cmp	r7, r6
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	d135      	bne.n	80033b6 <_dtoa_r+0x6e6>
 800334a:	f7fc ffb7 	bl	80002bc <__adddf3>
 800334e:	4642      	mov	r2, r8
 8003350:	464b      	mov	r3, r9
 8003352:	4606      	mov	r6, r0
 8003354:	460f      	mov	r7, r1
 8003356:	f7fd fbf7 	bl	8000b48 <__aeabi_dcmpgt>
 800335a:	b9d0      	cbnz	r0, 8003392 <_dtoa_r+0x6c2>
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	4630      	mov	r0, r6
 8003362:	4639      	mov	r1, r7
 8003364:	f7fd fbc8 	bl	8000af8 <__aeabi_dcmpeq>
 8003368:	b110      	cbz	r0, 8003370 <_dtoa_r+0x6a0>
 800336a:	f01a 0f01 	tst.w	sl, #1
 800336e:	d110      	bne.n	8003392 <_dtoa_r+0x6c2>
 8003370:	4620      	mov	r0, r4
 8003372:	ee18 1a10 	vmov	r1, s16
 8003376:	f000 faf3 	bl	8003960 <_Bfree>
 800337a:	2300      	movs	r3, #0
 800337c:	9800      	ldr	r0, [sp, #0]
 800337e:	702b      	strb	r3, [r5, #0]
 8003380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003382:	3001      	adds	r0, #1
 8003384:	6018      	str	r0, [r3, #0]
 8003386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003388:	2b00      	cmp	r3, #0
 800338a:	f43f acf1 	beq.w	8002d70 <_dtoa_r+0xa0>
 800338e:	601d      	str	r5, [r3, #0]
 8003390:	e4ee      	b.n	8002d70 <_dtoa_r+0xa0>
 8003392:	9f00      	ldr	r7, [sp, #0]
 8003394:	462b      	mov	r3, r5
 8003396:	461d      	mov	r5, r3
 8003398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800339c:	2a39      	cmp	r2, #57	; 0x39
 800339e:	d106      	bne.n	80033ae <_dtoa_r+0x6de>
 80033a0:	9a01      	ldr	r2, [sp, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d1f7      	bne.n	8003396 <_dtoa_r+0x6c6>
 80033a6:	9901      	ldr	r1, [sp, #4]
 80033a8:	2230      	movs	r2, #48	; 0x30
 80033aa:	3701      	adds	r7, #1
 80033ac:	700a      	strb	r2, [r1, #0]
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	3201      	adds	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e790      	b.n	80032d8 <_dtoa_r+0x608>
 80033b6:	4ba6      	ldr	r3, [pc, #664]	; (8003650 <_dtoa_r+0x980>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	f7fd f935 	bl	8000628 <__aeabi_dmul>
 80033be:	2200      	movs	r2, #0
 80033c0:	2300      	movs	r3, #0
 80033c2:	4606      	mov	r6, r0
 80033c4:	460f      	mov	r7, r1
 80033c6:	f7fd fb97 	bl	8000af8 <__aeabi_dcmpeq>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d09d      	beq.n	800330a <_dtoa_r+0x63a>
 80033ce:	e7cf      	b.n	8003370 <_dtoa_r+0x6a0>
 80033d0:	9a08      	ldr	r2, [sp, #32]
 80033d2:	2a00      	cmp	r2, #0
 80033d4:	f000 80d7 	beq.w	8003586 <_dtoa_r+0x8b6>
 80033d8:	9a06      	ldr	r2, [sp, #24]
 80033da:	2a01      	cmp	r2, #1
 80033dc:	f300 80ba 	bgt.w	8003554 <_dtoa_r+0x884>
 80033e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	f000 80b2 	beq.w	800354c <_dtoa_r+0x87c>
 80033e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80033ec:	9e07      	ldr	r6, [sp, #28]
 80033ee:	9d04      	ldr	r5, [sp, #16]
 80033f0:	9a04      	ldr	r2, [sp, #16]
 80033f2:	441a      	add	r2, r3
 80033f4:	9204      	str	r2, [sp, #16]
 80033f6:	9a05      	ldr	r2, [sp, #20]
 80033f8:	2101      	movs	r1, #1
 80033fa:	441a      	add	r2, r3
 80033fc:	4620      	mov	r0, r4
 80033fe:	9205      	str	r2, [sp, #20]
 8003400:	f000 fb66 	bl	8003ad0 <__i2b>
 8003404:	4607      	mov	r7, r0
 8003406:	2d00      	cmp	r5, #0
 8003408:	dd0c      	ble.n	8003424 <_dtoa_r+0x754>
 800340a:	9b05      	ldr	r3, [sp, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	dd09      	ble.n	8003424 <_dtoa_r+0x754>
 8003410:	42ab      	cmp	r3, r5
 8003412:	9a04      	ldr	r2, [sp, #16]
 8003414:	bfa8      	it	ge
 8003416:	462b      	movge	r3, r5
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	9204      	str	r2, [sp, #16]
 800341c:	9a05      	ldr	r2, [sp, #20]
 800341e:	1aed      	subs	r5, r5, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	9305      	str	r3, [sp, #20]
 8003424:	9b07      	ldr	r3, [sp, #28]
 8003426:	b31b      	cbz	r3, 8003470 <_dtoa_r+0x7a0>
 8003428:	9b08      	ldr	r3, [sp, #32]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80af 	beq.w	800358e <_dtoa_r+0x8be>
 8003430:	2e00      	cmp	r6, #0
 8003432:	dd13      	ble.n	800345c <_dtoa_r+0x78c>
 8003434:	4639      	mov	r1, r7
 8003436:	4632      	mov	r2, r6
 8003438:	4620      	mov	r0, r4
 800343a:	f000 fc09 	bl	8003c50 <__pow5mult>
 800343e:	ee18 2a10 	vmov	r2, s16
 8003442:	4601      	mov	r1, r0
 8003444:	4607      	mov	r7, r0
 8003446:	4620      	mov	r0, r4
 8003448:	f000 fb58 	bl	8003afc <__multiply>
 800344c:	ee18 1a10 	vmov	r1, s16
 8003450:	4680      	mov	r8, r0
 8003452:	4620      	mov	r0, r4
 8003454:	f000 fa84 	bl	8003960 <_Bfree>
 8003458:	ee08 8a10 	vmov	s16, r8
 800345c:	9b07      	ldr	r3, [sp, #28]
 800345e:	1b9a      	subs	r2, r3, r6
 8003460:	d006      	beq.n	8003470 <_dtoa_r+0x7a0>
 8003462:	ee18 1a10 	vmov	r1, s16
 8003466:	4620      	mov	r0, r4
 8003468:	f000 fbf2 	bl	8003c50 <__pow5mult>
 800346c:	ee08 0a10 	vmov	s16, r0
 8003470:	2101      	movs	r1, #1
 8003472:	4620      	mov	r0, r4
 8003474:	f000 fb2c 	bl	8003ad0 <__i2b>
 8003478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	4606      	mov	r6, r0
 800347e:	f340 8088 	ble.w	8003592 <_dtoa_r+0x8c2>
 8003482:	461a      	mov	r2, r3
 8003484:	4601      	mov	r1, r0
 8003486:	4620      	mov	r0, r4
 8003488:	f000 fbe2 	bl	8003c50 <__pow5mult>
 800348c:	9b06      	ldr	r3, [sp, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	4606      	mov	r6, r0
 8003492:	f340 8081 	ble.w	8003598 <_dtoa_r+0x8c8>
 8003496:	f04f 0800 	mov.w	r8, #0
 800349a:	6933      	ldr	r3, [r6, #16]
 800349c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80034a0:	6918      	ldr	r0, [r3, #16]
 80034a2:	f000 fac5 	bl	8003a30 <__hi0bits>
 80034a6:	f1c0 0020 	rsb	r0, r0, #32
 80034aa:	9b05      	ldr	r3, [sp, #20]
 80034ac:	4418      	add	r0, r3
 80034ae:	f010 001f 	ands.w	r0, r0, #31
 80034b2:	f000 8092 	beq.w	80035da <_dtoa_r+0x90a>
 80034b6:	f1c0 0320 	rsb	r3, r0, #32
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	f340 808a 	ble.w	80035d4 <_dtoa_r+0x904>
 80034c0:	f1c0 001c 	rsb	r0, r0, #28
 80034c4:	9b04      	ldr	r3, [sp, #16]
 80034c6:	4403      	add	r3, r0
 80034c8:	9304      	str	r3, [sp, #16]
 80034ca:	9b05      	ldr	r3, [sp, #20]
 80034cc:	4403      	add	r3, r0
 80034ce:	4405      	add	r5, r0
 80034d0:	9305      	str	r3, [sp, #20]
 80034d2:	9b04      	ldr	r3, [sp, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	dd07      	ble.n	80034e8 <_dtoa_r+0x818>
 80034d8:	ee18 1a10 	vmov	r1, s16
 80034dc:	461a      	mov	r2, r3
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 fc10 	bl	8003d04 <__lshift>
 80034e4:	ee08 0a10 	vmov	s16, r0
 80034e8:	9b05      	ldr	r3, [sp, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	dd05      	ble.n	80034fa <_dtoa_r+0x82a>
 80034ee:	4631      	mov	r1, r6
 80034f0:	461a      	mov	r2, r3
 80034f2:	4620      	mov	r0, r4
 80034f4:	f000 fc06 	bl	8003d04 <__lshift>
 80034f8:	4606      	mov	r6, r0
 80034fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d06e      	beq.n	80035de <_dtoa_r+0x90e>
 8003500:	ee18 0a10 	vmov	r0, s16
 8003504:	4631      	mov	r1, r6
 8003506:	f000 fc6d 	bl	8003de4 <__mcmp>
 800350a:	2800      	cmp	r0, #0
 800350c:	da67      	bge.n	80035de <_dtoa_r+0x90e>
 800350e:	9b00      	ldr	r3, [sp, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	ee18 1a10 	vmov	r1, s16
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	220a      	movs	r2, #10
 800351a:	2300      	movs	r3, #0
 800351c:	4620      	mov	r0, r4
 800351e:	f000 fa41 	bl	80039a4 <__multadd>
 8003522:	9b08      	ldr	r3, [sp, #32]
 8003524:	ee08 0a10 	vmov	s16, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 81b1 	beq.w	8003890 <_dtoa_r+0xbc0>
 800352e:	2300      	movs	r3, #0
 8003530:	4639      	mov	r1, r7
 8003532:	220a      	movs	r2, #10
 8003534:	4620      	mov	r0, r4
 8003536:	f000 fa35 	bl	80039a4 <__multadd>
 800353a:	9b02      	ldr	r3, [sp, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	4607      	mov	r7, r0
 8003540:	f300 808e 	bgt.w	8003660 <_dtoa_r+0x990>
 8003544:	9b06      	ldr	r3, [sp, #24]
 8003546:	2b02      	cmp	r3, #2
 8003548:	dc51      	bgt.n	80035ee <_dtoa_r+0x91e>
 800354a:	e089      	b.n	8003660 <_dtoa_r+0x990>
 800354c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800354e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003552:	e74b      	b.n	80033ec <_dtoa_r+0x71c>
 8003554:	9b03      	ldr	r3, [sp, #12]
 8003556:	1e5e      	subs	r6, r3, #1
 8003558:	9b07      	ldr	r3, [sp, #28]
 800355a:	42b3      	cmp	r3, r6
 800355c:	bfbf      	itttt	lt
 800355e:	9b07      	ldrlt	r3, [sp, #28]
 8003560:	9607      	strlt	r6, [sp, #28]
 8003562:	1af2      	sublt	r2, r6, r3
 8003564:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003566:	bfb6      	itet	lt
 8003568:	189b      	addlt	r3, r3, r2
 800356a:	1b9e      	subge	r6, r3, r6
 800356c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	bfb8      	it	lt
 8003572:	2600      	movlt	r6, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bfb7      	itett	lt
 8003578:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800357c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003580:	1a9d      	sublt	r5, r3, r2
 8003582:	2300      	movlt	r3, #0
 8003584:	e734      	b.n	80033f0 <_dtoa_r+0x720>
 8003586:	9e07      	ldr	r6, [sp, #28]
 8003588:	9d04      	ldr	r5, [sp, #16]
 800358a:	9f08      	ldr	r7, [sp, #32]
 800358c:	e73b      	b.n	8003406 <_dtoa_r+0x736>
 800358e:	9a07      	ldr	r2, [sp, #28]
 8003590:	e767      	b.n	8003462 <_dtoa_r+0x792>
 8003592:	9b06      	ldr	r3, [sp, #24]
 8003594:	2b01      	cmp	r3, #1
 8003596:	dc18      	bgt.n	80035ca <_dtoa_r+0x8fa>
 8003598:	f1ba 0f00 	cmp.w	sl, #0
 800359c:	d115      	bne.n	80035ca <_dtoa_r+0x8fa>
 800359e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80035a2:	b993      	cbnz	r3, 80035ca <_dtoa_r+0x8fa>
 80035a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80035a8:	0d1b      	lsrs	r3, r3, #20
 80035aa:	051b      	lsls	r3, r3, #20
 80035ac:	b183      	cbz	r3, 80035d0 <_dtoa_r+0x900>
 80035ae:	9b04      	ldr	r3, [sp, #16]
 80035b0:	3301      	adds	r3, #1
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	9b05      	ldr	r3, [sp, #20]
 80035b6:	3301      	adds	r3, #1
 80035b8:	9305      	str	r3, [sp, #20]
 80035ba:	f04f 0801 	mov.w	r8, #1
 80035be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f af6a 	bne.w	800349a <_dtoa_r+0x7ca>
 80035c6:	2001      	movs	r0, #1
 80035c8:	e76f      	b.n	80034aa <_dtoa_r+0x7da>
 80035ca:	f04f 0800 	mov.w	r8, #0
 80035ce:	e7f6      	b.n	80035be <_dtoa_r+0x8ee>
 80035d0:	4698      	mov	r8, r3
 80035d2:	e7f4      	b.n	80035be <_dtoa_r+0x8ee>
 80035d4:	f43f af7d 	beq.w	80034d2 <_dtoa_r+0x802>
 80035d8:	4618      	mov	r0, r3
 80035da:	301c      	adds	r0, #28
 80035dc:	e772      	b.n	80034c4 <_dtoa_r+0x7f4>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dc37      	bgt.n	8003654 <_dtoa_r+0x984>
 80035e4:	9b06      	ldr	r3, [sp, #24]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	dd34      	ble.n	8003654 <_dtoa_r+0x984>
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	9302      	str	r3, [sp, #8]
 80035ee:	9b02      	ldr	r3, [sp, #8]
 80035f0:	b96b      	cbnz	r3, 800360e <_dtoa_r+0x93e>
 80035f2:	4631      	mov	r1, r6
 80035f4:	2205      	movs	r2, #5
 80035f6:	4620      	mov	r0, r4
 80035f8:	f000 f9d4 	bl	80039a4 <__multadd>
 80035fc:	4601      	mov	r1, r0
 80035fe:	4606      	mov	r6, r0
 8003600:	ee18 0a10 	vmov	r0, s16
 8003604:	f000 fbee 	bl	8003de4 <__mcmp>
 8003608:	2800      	cmp	r0, #0
 800360a:	f73f adbb 	bgt.w	8003184 <_dtoa_r+0x4b4>
 800360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003610:	9d01      	ldr	r5, [sp, #4]
 8003612:	43db      	mvns	r3, r3
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f04f 0800 	mov.w	r8, #0
 800361a:	4631      	mov	r1, r6
 800361c:	4620      	mov	r0, r4
 800361e:	f000 f99f 	bl	8003960 <_Bfree>
 8003622:	2f00      	cmp	r7, #0
 8003624:	f43f aea4 	beq.w	8003370 <_dtoa_r+0x6a0>
 8003628:	f1b8 0f00 	cmp.w	r8, #0
 800362c:	d005      	beq.n	800363a <_dtoa_r+0x96a>
 800362e:	45b8      	cmp	r8, r7
 8003630:	d003      	beq.n	800363a <_dtoa_r+0x96a>
 8003632:	4641      	mov	r1, r8
 8003634:	4620      	mov	r0, r4
 8003636:	f000 f993 	bl	8003960 <_Bfree>
 800363a:	4639      	mov	r1, r7
 800363c:	4620      	mov	r0, r4
 800363e:	f000 f98f 	bl	8003960 <_Bfree>
 8003642:	e695      	b.n	8003370 <_dtoa_r+0x6a0>
 8003644:	2600      	movs	r6, #0
 8003646:	4637      	mov	r7, r6
 8003648:	e7e1      	b.n	800360e <_dtoa_r+0x93e>
 800364a:	9700      	str	r7, [sp, #0]
 800364c:	4637      	mov	r7, r6
 800364e:	e599      	b.n	8003184 <_dtoa_r+0x4b4>
 8003650:	40240000 	.word	0x40240000
 8003654:	9b08      	ldr	r3, [sp, #32]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80ca 	beq.w	80037f0 <_dtoa_r+0xb20>
 800365c:	9b03      	ldr	r3, [sp, #12]
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	2d00      	cmp	r5, #0
 8003662:	dd05      	ble.n	8003670 <_dtoa_r+0x9a0>
 8003664:	4639      	mov	r1, r7
 8003666:	462a      	mov	r2, r5
 8003668:	4620      	mov	r0, r4
 800366a:	f000 fb4b 	bl	8003d04 <__lshift>
 800366e:	4607      	mov	r7, r0
 8003670:	f1b8 0f00 	cmp.w	r8, #0
 8003674:	d05b      	beq.n	800372e <_dtoa_r+0xa5e>
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4620      	mov	r0, r4
 800367a:	f000 f931 	bl	80038e0 <_Balloc>
 800367e:	4605      	mov	r5, r0
 8003680:	b928      	cbnz	r0, 800368e <_dtoa_r+0x9be>
 8003682:	4b87      	ldr	r3, [pc, #540]	; (80038a0 <_dtoa_r+0xbd0>)
 8003684:	4602      	mov	r2, r0
 8003686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800368a:	f7ff bb3b 	b.w	8002d04 <_dtoa_r+0x34>
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	3202      	adds	r2, #2
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	f107 010c 	add.w	r1, r7, #12
 8003698:	300c      	adds	r0, #12
 800369a:	f000 f913 	bl	80038c4 <memcpy>
 800369e:	2201      	movs	r2, #1
 80036a0:	4629      	mov	r1, r5
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 fb2e 	bl	8003d04 <__lshift>
 80036a8:	9b01      	ldr	r3, [sp, #4]
 80036aa:	f103 0901 	add.w	r9, r3, #1
 80036ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	9305      	str	r3, [sp, #20]
 80036b6:	f00a 0301 	and.w	r3, sl, #1
 80036ba:	46b8      	mov	r8, r7
 80036bc:	9304      	str	r3, [sp, #16]
 80036be:	4607      	mov	r7, r0
 80036c0:	4631      	mov	r1, r6
 80036c2:	ee18 0a10 	vmov	r0, s16
 80036c6:	f7ff fa77 	bl	8002bb8 <quorem>
 80036ca:	4641      	mov	r1, r8
 80036cc:	9002      	str	r0, [sp, #8]
 80036ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80036d2:	ee18 0a10 	vmov	r0, s16
 80036d6:	f000 fb85 	bl	8003de4 <__mcmp>
 80036da:	463a      	mov	r2, r7
 80036dc:	9003      	str	r0, [sp, #12]
 80036de:	4631      	mov	r1, r6
 80036e0:	4620      	mov	r0, r4
 80036e2:	f000 fb9b 	bl	8003e1c <__mdiff>
 80036e6:	68c2      	ldr	r2, [r0, #12]
 80036e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80036ec:	4605      	mov	r5, r0
 80036ee:	bb02      	cbnz	r2, 8003732 <_dtoa_r+0xa62>
 80036f0:	4601      	mov	r1, r0
 80036f2:	ee18 0a10 	vmov	r0, s16
 80036f6:	f000 fb75 	bl	8003de4 <__mcmp>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4629      	mov	r1, r5
 80036fe:	4620      	mov	r0, r4
 8003700:	9207      	str	r2, [sp, #28]
 8003702:	f000 f92d 	bl	8003960 <_Bfree>
 8003706:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800370a:	ea43 0102 	orr.w	r1, r3, r2
 800370e:	9b04      	ldr	r3, [sp, #16]
 8003710:	430b      	orrs	r3, r1
 8003712:	464d      	mov	r5, r9
 8003714:	d10f      	bne.n	8003736 <_dtoa_r+0xa66>
 8003716:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800371a:	d02a      	beq.n	8003772 <_dtoa_r+0xaa2>
 800371c:	9b03      	ldr	r3, [sp, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	dd02      	ble.n	8003728 <_dtoa_r+0xa58>
 8003722:	9b02      	ldr	r3, [sp, #8]
 8003724:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003728:	f88b a000 	strb.w	sl, [fp]
 800372c:	e775      	b.n	800361a <_dtoa_r+0x94a>
 800372e:	4638      	mov	r0, r7
 8003730:	e7ba      	b.n	80036a8 <_dtoa_r+0x9d8>
 8003732:	2201      	movs	r2, #1
 8003734:	e7e2      	b.n	80036fc <_dtoa_r+0xa2c>
 8003736:	9b03      	ldr	r3, [sp, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db04      	blt.n	8003746 <_dtoa_r+0xa76>
 800373c:	9906      	ldr	r1, [sp, #24]
 800373e:	430b      	orrs	r3, r1
 8003740:	9904      	ldr	r1, [sp, #16]
 8003742:	430b      	orrs	r3, r1
 8003744:	d122      	bne.n	800378c <_dtoa_r+0xabc>
 8003746:	2a00      	cmp	r2, #0
 8003748:	ddee      	ble.n	8003728 <_dtoa_r+0xa58>
 800374a:	ee18 1a10 	vmov	r1, s16
 800374e:	2201      	movs	r2, #1
 8003750:	4620      	mov	r0, r4
 8003752:	f000 fad7 	bl	8003d04 <__lshift>
 8003756:	4631      	mov	r1, r6
 8003758:	ee08 0a10 	vmov	s16, r0
 800375c:	f000 fb42 	bl	8003de4 <__mcmp>
 8003760:	2800      	cmp	r0, #0
 8003762:	dc03      	bgt.n	800376c <_dtoa_r+0xa9c>
 8003764:	d1e0      	bne.n	8003728 <_dtoa_r+0xa58>
 8003766:	f01a 0f01 	tst.w	sl, #1
 800376a:	d0dd      	beq.n	8003728 <_dtoa_r+0xa58>
 800376c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003770:	d1d7      	bne.n	8003722 <_dtoa_r+0xa52>
 8003772:	2339      	movs	r3, #57	; 0x39
 8003774:	f88b 3000 	strb.w	r3, [fp]
 8003778:	462b      	mov	r3, r5
 800377a:	461d      	mov	r5, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003782:	2a39      	cmp	r2, #57	; 0x39
 8003784:	d071      	beq.n	800386a <_dtoa_r+0xb9a>
 8003786:	3201      	adds	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e746      	b.n	800361a <_dtoa_r+0x94a>
 800378c:	2a00      	cmp	r2, #0
 800378e:	dd07      	ble.n	80037a0 <_dtoa_r+0xad0>
 8003790:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003794:	d0ed      	beq.n	8003772 <_dtoa_r+0xaa2>
 8003796:	f10a 0301 	add.w	r3, sl, #1
 800379a:	f88b 3000 	strb.w	r3, [fp]
 800379e:	e73c      	b.n	800361a <_dtoa_r+0x94a>
 80037a0:	9b05      	ldr	r3, [sp, #20]
 80037a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80037a6:	4599      	cmp	r9, r3
 80037a8:	d047      	beq.n	800383a <_dtoa_r+0xb6a>
 80037aa:	ee18 1a10 	vmov	r1, s16
 80037ae:	2300      	movs	r3, #0
 80037b0:	220a      	movs	r2, #10
 80037b2:	4620      	mov	r0, r4
 80037b4:	f000 f8f6 	bl	80039a4 <__multadd>
 80037b8:	45b8      	cmp	r8, r7
 80037ba:	ee08 0a10 	vmov	s16, r0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	f04f 020a 	mov.w	r2, #10
 80037c6:	4641      	mov	r1, r8
 80037c8:	4620      	mov	r0, r4
 80037ca:	d106      	bne.n	80037da <_dtoa_r+0xb0a>
 80037cc:	f000 f8ea 	bl	80039a4 <__multadd>
 80037d0:	4680      	mov	r8, r0
 80037d2:	4607      	mov	r7, r0
 80037d4:	f109 0901 	add.w	r9, r9, #1
 80037d8:	e772      	b.n	80036c0 <_dtoa_r+0x9f0>
 80037da:	f000 f8e3 	bl	80039a4 <__multadd>
 80037de:	4639      	mov	r1, r7
 80037e0:	4680      	mov	r8, r0
 80037e2:	2300      	movs	r3, #0
 80037e4:	220a      	movs	r2, #10
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 f8dc 	bl	80039a4 <__multadd>
 80037ec:	4607      	mov	r7, r0
 80037ee:	e7f1      	b.n	80037d4 <_dtoa_r+0xb04>
 80037f0:	9b03      	ldr	r3, [sp, #12]
 80037f2:	9302      	str	r3, [sp, #8]
 80037f4:	9d01      	ldr	r5, [sp, #4]
 80037f6:	ee18 0a10 	vmov	r0, s16
 80037fa:	4631      	mov	r1, r6
 80037fc:	f7ff f9dc 	bl	8002bb8 <quorem>
 8003800:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003804:	9b01      	ldr	r3, [sp, #4]
 8003806:	f805 ab01 	strb.w	sl, [r5], #1
 800380a:	1aea      	subs	r2, r5, r3
 800380c:	9b02      	ldr	r3, [sp, #8]
 800380e:	4293      	cmp	r3, r2
 8003810:	dd09      	ble.n	8003826 <_dtoa_r+0xb56>
 8003812:	ee18 1a10 	vmov	r1, s16
 8003816:	2300      	movs	r3, #0
 8003818:	220a      	movs	r2, #10
 800381a:	4620      	mov	r0, r4
 800381c:	f000 f8c2 	bl	80039a4 <__multadd>
 8003820:	ee08 0a10 	vmov	s16, r0
 8003824:	e7e7      	b.n	80037f6 <_dtoa_r+0xb26>
 8003826:	9b02      	ldr	r3, [sp, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	bfc8      	it	gt
 800382c:	461d      	movgt	r5, r3
 800382e:	9b01      	ldr	r3, [sp, #4]
 8003830:	bfd8      	it	le
 8003832:	2501      	movle	r5, #1
 8003834:	441d      	add	r5, r3
 8003836:	f04f 0800 	mov.w	r8, #0
 800383a:	ee18 1a10 	vmov	r1, s16
 800383e:	2201      	movs	r2, #1
 8003840:	4620      	mov	r0, r4
 8003842:	f000 fa5f 	bl	8003d04 <__lshift>
 8003846:	4631      	mov	r1, r6
 8003848:	ee08 0a10 	vmov	s16, r0
 800384c:	f000 faca 	bl	8003de4 <__mcmp>
 8003850:	2800      	cmp	r0, #0
 8003852:	dc91      	bgt.n	8003778 <_dtoa_r+0xaa8>
 8003854:	d102      	bne.n	800385c <_dtoa_r+0xb8c>
 8003856:	f01a 0f01 	tst.w	sl, #1
 800385a:	d18d      	bne.n	8003778 <_dtoa_r+0xaa8>
 800385c:	462b      	mov	r3, r5
 800385e:	461d      	mov	r5, r3
 8003860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003864:	2a30      	cmp	r2, #48	; 0x30
 8003866:	d0fa      	beq.n	800385e <_dtoa_r+0xb8e>
 8003868:	e6d7      	b.n	800361a <_dtoa_r+0x94a>
 800386a:	9a01      	ldr	r2, [sp, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d184      	bne.n	800377a <_dtoa_r+0xaaa>
 8003870:	9b00      	ldr	r3, [sp, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2331      	movs	r3, #49	; 0x31
 8003878:	7013      	strb	r3, [r2, #0]
 800387a:	e6ce      	b.n	800361a <_dtoa_r+0x94a>
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <_dtoa_r+0xbd4>)
 800387e:	f7ff ba95 	b.w	8002dac <_dtoa_r+0xdc>
 8003882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f aa6e 	bne.w	8002d66 <_dtoa_r+0x96>
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_dtoa_r+0xbd8>)
 800388c:	f7ff ba8e 	b.w	8002dac <_dtoa_r+0xdc>
 8003890:	9b02      	ldr	r3, [sp, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	dcae      	bgt.n	80037f4 <_dtoa_r+0xb24>
 8003896:	9b06      	ldr	r3, [sp, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	f73f aea8 	bgt.w	80035ee <_dtoa_r+0x91e>
 800389e:	e7a9      	b.n	80037f4 <_dtoa_r+0xb24>
 80038a0:	08004e33 	.word	0x08004e33
 80038a4:	08004d90 	.word	0x08004d90
 80038a8:	08004db4 	.word	0x08004db4

080038ac <_localeconv_r>:
 80038ac:	4800      	ldr	r0, [pc, #0]	; (80038b0 <_localeconv_r+0x4>)
 80038ae:	4770      	bx	lr
 80038b0:	20000160 	.word	0x20000160

080038b4 <malloc>:
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <malloc+0xc>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 bc17 	b.w	80040ec <_malloc_r>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c

080038c4 <memcpy>:
 80038c4:	440a      	add	r2, r1
 80038c6:	4291      	cmp	r1, r2
 80038c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038cc:	d100      	bne.n	80038d0 <memcpy+0xc>
 80038ce:	4770      	bx	lr
 80038d0:	b510      	push	{r4, lr}
 80038d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038da:	4291      	cmp	r1, r2
 80038dc:	d1f9      	bne.n	80038d2 <memcpy+0xe>
 80038de:	bd10      	pop	{r4, pc}

080038e0 <_Balloc>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
 80038e8:	b976      	cbnz	r6, 8003908 <_Balloc+0x28>
 80038ea:	2010      	movs	r0, #16
 80038ec:	f7ff ffe2 	bl	80038b4 <malloc>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6260      	str	r0, [r4, #36]	; 0x24
 80038f4:	b920      	cbnz	r0, 8003900 <_Balloc+0x20>
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <_Balloc+0x78>)
 80038f8:	4818      	ldr	r0, [pc, #96]	; (800395c <_Balloc+0x7c>)
 80038fa:	2166      	movs	r1, #102	; 0x66
 80038fc:	f000 fc7a 	bl	80041f4 <__assert_func>
 8003900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003904:	6006      	str	r6, [r0, #0]
 8003906:	60c6      	str	r6, [r0, #12]
 8003908:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800390a:	68f3      	ldr	r3, [r6, #12]
 800390c:	b183      	cbz	r3, 8003930 <_Balloc+0x50>
 800390e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003916:	b9b8      	cbnz	r0, 8003948 <_Balloc+0x68>
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f605 	lsl.w	r6, r1, r5
 800391e:	1d72      	adds	r2, r6, #5
 8003920:	0092      	lsls	r2, r2, #2
 8003922:	4620      	mov	r0, r4
 8003924:	f000 fb60 	bl	8003fe8 <_calloc_r>
 8003928:	b160      	cbz	r0, 8003944 <_Balloc+0x64>
 800392a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800392e:	e00e      	b.n	800394e <_Balloc+0x6e>
 8003930:	2221      	movs	r2, #33	; 0x21
 8003932:	2104      	movs	r1, #4
 8003934:	4620      	mov	r0, r4
 8003936:	f000 fb57 	bl	8003fe8 <_calloc_r>
 800393a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393c:	60f0      	str	r0, [r6, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e4      	bne.n	800390e <_Balloc+0x2e>
 8003944:	2000      	movs	r0, #0
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	6802      	ldr	r2, [r0, #0]
 800394a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800394e:	2300      	movs	r3, #0
 8003950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003954:	e7f7      	b.n	8003946 <_Balloc+0x66>
 8003956:	bf00      	nop
 8003958:	08004dc1 	.word	0x08004dc1
 800395c:	08004e44 	.word	0x08004e44

08003960 <_Bfree>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003964:	4605      	mov	r5, r0
 8003966:	460c      	mov	r4, r1
 8003968:	b976      	cbnz	r6, 8003988 <_Bfree+0x28>
 800396a:	2010      	movs	r0, #16
 800396c:	f7ff ffa2 	bl	80038b4 <malloc>
 8003970:	4602      	mov	r2, r0
 8003972:	6268      	str	r0, [r5, #36]	; 0x24
 8003974:	b920      	cbnz	r0, 8003980 <_Bfree+0x20>
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <_Bfree+0x3c>)
 8003978:	4809      	ldr	r0, [pc, #36]	; (80039a0 <_Bfree+0x40>)
 800397a:	218a      	movs	r1, #138	; 0x8a
 800397c:	f000 fc3a 	bl	80041f4 <__assert_func>
 8003980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003984:	6006      	str	r6, [r0, #0]
 8003986:	60c6      	str	r6, [r0, #12]
 8003988:	b13c      	cbz	r4, 800399a <_Bfree+0x3a>
 800398a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800398c:	6862      	ldr	r2, [r4, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003994:	6021      	str	r1, [r4, #0]
 8003996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	08004dc1 	.word	0x08004dc1
 80039a0:	08004e44 	.word	0x08004e44

080039a4 <__multadd>:
 80039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a8:	690d      	ldr	r5, [r1, #16]
 80039aa:	4607      	mov	r7, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	461e      	mov	r6, r3
 80039b0:	f101 0c14 	add.w	ip, r1, #20
 80039b4:	2000      	movs	r0, #0
 80039b6:	f8dc 3000 	ldr.w	r3, [ip]
 80039ba:	b299      	uxth	r1, r3
 80039bc:	fb02 6101 	mla	r1, r2, r1, r6
 80039c0:	0c1e      	lsrs	r6, r3, #16
 80039c2:	0c0b      	lsrs	r3, r1, #16
 80039c4:	fb02 3306 	mla	r3, r2, r6, r3
 80039c8:	b289      	uxth	r1, r1
 80039ca:	3001      	adds	r0, #1
 80039cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80039d0:	4285      	cmp	r5, r0
 80039d2:	f84c 1b04 	str.w	r1, [ip], #4
 80039d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80039da:	dcec      	bgt.n	80039b6 <__multadd+0x12>
 80039dc:	b30e      	cbz	r6, 8003a22 <__multadd+0x7e>
 80039de:	68a3      	ldr	r3, [r4, #8]
 80039e0:	42ab      	cmp	r3, r5
 80039e2:	dc19      	bgt.n	8003a18 <__multadd+0x74>
 80039e4:	6861      	ldr	r1, [r4, #4]
 80039e6:	4638      	mov	r0, r7
 80039e8:	3101      	adds	r1, #1
 80039ea:	f7ff ff79 	bl	80038e0 <_Balloc>
 80039ee:	4680      	mov	r8, r0
 80039f0:	b928      	cbnz	r0, 80039fe <__multadd+0x5a>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <__multadd+0x84>)
 80039f6:	480d      	ldr	r0, [pc, #52]	; (8003a2c <__multadd+0x88>)
 80039f8:	21b5      	movs	r1, #181	; 0xb5
 80039fa:	f000 fbfb 	bl	80041f4 <__assert_func>
 80039fe:	6922      	ldr	r2, [r4, #16]
 8003a00:	3202      	adds	r2, #2
 8003a02:	f104 010c 	add.w	r1, r4, #12
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	300c      	adds	r0, #12
 8003a0a:	f7ff ff5b 	bl	80038c4 <memcpy>
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4638      	mov	r0, r7
 8003a12:	f7ff ffa5 	bl	8003960 <_Bfree>
 8003a16:	4644      	mov	r4, r8
 8003a18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a1c:	3501      	adds	r5, #1
 8003a1e:	615e      	str	r6, [r3, #20]
 8003a20:	6125      	str	r5, [r4, #16]
 8003a22:	4620      	mov	r0, r4
 8003a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a28:	08004e33 	.word	0x08004e33
 8003a2c:	08004e44 	.word	0x08004e44

08003a30 <__hi0bits>:
 8003a30:	0c03      	lsrs	r3, r0, #16
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	b9d3      	cbnz	r3, 8003a6c <__hi0bits+0x3c>
 8003a36:	0400      	lsls	r0, r0, #16
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003a3e:	bf04      	itt	eq
 8003a40:	0200      	lsleq	r0, r0, #8
 8003a42:	3308      	addeq	r3, #8
 8003a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003a48:	bf04      	itt	eq
 8003a4a:	0100      	lsleq	r0, r0, #4
 8003a4c:	3304      	addeq	r3, #4
 8003a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003a52:	bf04      	itt	eq
 8003a54:	0080      	lsleq	r0, r0, #2
 8003a56:	3302      	addeq	r3, #2
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	db05      	blt.n	8003a68 <__hi0bits+0x38>
 8003a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003a60:	f103 0301 	add.w	r3, r3, #1
 8003a64:	bf08      	it	eq
 8003a66:	2320      	moveq	r3, #32
 8003a68:	4618      	mov	r0, r3
 8003a6a:	4770      	bx	lr
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e7e4      	b.n	8003a3a <__hi0bits+0xa>

08003a70 <__lo0bits>:
 8003a70:	6803      	ldr	r3, [r0, #0]
 8003a72:	f013 0207 	ands.w	r2, r3, #7
 8003a76:	4601      	mov	r1, r0
 8003a78:	d00b      	beq.n	8003a92 <__lo0bits+0x22>
 8003a7a:	07da      	lsls	r2, r3, #31
 8003a7c:	d423      	bmi.n	8003ac6 <__lo0bits+0x56>
 8003a7e:	0798      	lsls	r0, r3, #30
 8003a80:	bf49      	itett	mi
 8003a82:	085b      	lsrmi	r3, r3, #1
 8003a84:	089b      	lsrpl	r3, r3, #2
 8003a86:	2001      	movmi	r0, #1
 8003a88:	600b      	strmi	r3, [r1, #0]
 8003a8a:	bf5c      	itt	pl
 8003a8c:	600b      	strpl	r3, [r1, #0]
 8003a8e:	2002      	movpl	r0, #2
 8003a90:	4770      	bx	lr
 8003a92:	b298      	uxth	r0, r3
 8003a94:	b9a8      	cbnz	r0, 8003ac2 <__lo0bits+0x52>
 8003a96:	0c1b      	lsrs	r3, r3, #16
 8003a98:	2010      	movs	r0, #16
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	b90a      	cbnz	r2, 8003aa2 <__lo0bits+0x32>
 8003a9e:	3008      	adds	r0, #8
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	071a      	lsls	r2, r3, #28
 8003aa4:	bf04      	itt	eq
 8003aa6:	091b      	lsreq	r3, r3, #4
 8003aa8:	3004      	addeq	r0, #4
 8003aaa:	079a      	lsls	r2, r3, #30
 8003aac:	bf04      	itt	eq
 8003aae:	089b      	lsreq	r3, r3, #2
 8003ab0:	3002      	addeq	r0, #2
 8003ab2:	07da      	lsls	r2, r3, #31
 8003ab4:	d403      	bmi.n	8003abe <__lo0bits+0x4e>
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	f100 0001 	add.w	r0, r0, #1
 8003abc:	d005      	beq.n	8003aca <__lo0bits+0x5a>
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	4770      	bx	lr
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	e7e9      	b.n	8003a9a <__lo0bits+0x2a>
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	4770      	bx	lr
 8003aca:	2020      	movs	r0, #32
 8003acc:	4770      	bx	lr
	...

08003ad0 <__i2b>:
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	f7ff ff03 	bl	80038e0 <_Balloc>
 8003ada:	4602      	mov	r2, r0
 8003adc:	b928      	cbnz	r0, 8003aea <__i2b+0x1a>
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <__i2b+0x24>)
 8003ae0:	4805      	ldr	r0, [pc, #20]	; (8003af8 <__i2b+0x28>)
 8003ae2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003ae6:	f000 fb85 	bl	80041f4 <__assert_func>
 8003aea:	2301      	movs	r3, #1
 8003aec:	6144      	str	r4, [r0, #20]
 8003aee:	6103      	str	r3, [r0, #16]
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	08004e33 	.word	0x08004e33
 8003af8:	08004e44 	.word	0x08004e44

08003afc <__multiply>:
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	4691      	mov	r9, r2
 8003b02:	690a      	ldr	r2, [r1, #16]
 8003b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	bfb8      	it	lt
 8003b0c:	460b      	movlt	r3, r1
 8003b0e:	460c      	mov	r4, r1
 8003b10:	bfbc      	itt	lt
 8003b12:	464c      	movlt	r4, r9
 8003b14:	4699      	movlt	r9, r3
 8003b16:	6927      	ldr	r7, [r4, #16]
 8003b18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b1c:	68a3      	ldr	r3, [r4, #8]
 8003b1e:	6861      	ldr	r1, [r4, #4]
 8003b20:	eb07 060a 	add.w	r6, r7, sl
 8003b24:	42b3      	cmp	r3, r6
 8003b26:	b085      	sub	sp, #20
 8003b28:	bfb8      	it	lt
 8003b2a:	3101      	addlt	r1, #1
 8003b2c:	f7ff fed8 	bl	80038e0 <_Balloc>
 8003b30:	b930      	cbnz	r0, 8003b40 <__multiply+0x44>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <__multiply+0x14c>)
 8003b36:	4845      	ldr	r0, [pc, #276]	; (8003c4c <__multiply+0x150>)
 8003b38:	f240 115d 	movw	r1, #349	; 0x15d
 8003b3c:	f000 fb5a 	bl	80041f4 <__assert_func>
 8003b40:	f100 0514 	add.w	r5, r0, #20
 8003b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b48:	462b      	mov	r3, r5
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4543      	cmp	r3, r8
 8003b4e:	d321      	bcc.n	8003b94 <__multiply+0x98>
 8003b50:	f104 0314 	add.w	r3, r4, #20
 8003b54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003b58:	f109 0314 	add.w	r3, r9, #20
 8003b5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003b60:	9202      	str	r2, [sp, #8]
 8003b62:	1b3a      	subs	r2, r7, r4
 8003b64:	3a15      	subs	r2, #21
 8003b66:	f022 0203 	bic.w	r2, r2, #3
 8003b6a:	3204      	adds	r2, #4
 8003b6c:	f104 0115 	add.w	r1, r4, #21
 8003b70:	428f      	cmp	r7, r1
 8003b72:	bf38      	it	cc
 8003b74:	2204      	movcc	r2, #4
 8003b76:	9201      	str	r2, [sp, #4]
 8003b78:	9a02      	ldr	r2, [sp, #8]
 8003b7a:	9303      	str	r3, [sp, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d80c      	bhi.n	8003b9a <__multiply+0x9e>
 8003b80:	2e00      	cmp	r6, #0
 8003b82:	dd03      	ble.n	8003b8c <__multiply+0x90>
 8003b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05a      	beq.n	8003c42 <__multiply+0x146>
 8003b8c:	6106      	str	r6, [r0, #16]
 8003b8e:	b005      	add	sp, #20
 8003b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b94:	f843 2b04 	str.w	r2, [r3], #4
 8003b98:	e7d8      	b.n	8003b4c <__multiply+0x50>
 8003b9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003b9e:	f1ba 0f00 	cmp.w	sl, #0
 8003ba2:	d024      	beq.n	8003bee <__multiply+0xf2>
 8003ba4:	f104 0e14 	add.w	lr, r4, #20
 8003ba8:	46a9      	mov	r9, r5
 8003baa:	f04f 0c00 	mov.w	ip, #0
 8003bae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003bb2:	f8d9 1000 	ldr.w	r1, [r9]
 8003bb6:	fa1f fb82 	uxth.w	fp, r2
 8003bba:	b289      	uxth	r1, r1
 8003bbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8003bc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8003bc8:	4461      	add	r1, ip
 8003bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003bce:	fb0a c20b 	mla	r2, sl, fp, ip
 8003bd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003bd6:	b289      	uxth	r1, r1
 8003bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003bdc:	4577      	cmp	r7, lr
 8003bde:	f849 1b04 	str.w	r1, [r9], #4
 8003be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003be6:	d8e2      	bhi.n	8003bae <__multiply+0xb2>
 8003be8:	9a01      	ldr	r2, [sp, #4]
 8003bea:	f845 c002 	str.w	ip, [r5, r2]
 8003bee:	9a03      	ldr	r2, [sp, #12]
 8003bf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	f1b9 0f00 	cmp.w	r9, #0
 8003bfa:	d020      	beq.n	8003c3e <__multiply+0x142>
 8003bfc:	6829      	ldr	r1, [r5, #0]
 8003bfe:	f104 0c14 	add.w	ip, r4, #20
 8003c02:	46ae      	mov	lr, r5
 8003c04:	f04f 0a00 	mov.w	sl, #0
 8003c08:	f8bc b000 	ldrh.w	fp, [ip]
 8003c0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c10:	fb09 220b 	mla	r2, r9, fp, r2
 8003c14:	4492      	add	sl, r2
 8003c16:	b289      	uxth	r1, r1
 8003c18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003c1c:	f84e 1b04 	str.w	r1, [lr], #4
 8003c20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003c24:	f8be 1000 	ldrh.w	r1, [lr]
 8003c28:	0c12      	lsrs	r2, r2, #16
 8003c2a:	fb09 1102 	mla	r1, r9, r2, r1
 8003c2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003c32:	4567      	cmp	r7, ip
 8003c34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c38:	d8e6      	bhi.n	8003c08 <__multiply+0x10c>
 8003c3a:	9a01      	ldr	r2, [sp, #4]
 8003c3c:	50a9      	str	r1, [r5, r2]
 8003c3e:	3504      	adds	r5, #4
 8003c40:	e79a      	b.n	8003b78 <__multiply+0x7c>
 8003c42:	3e01      	subs	r6, #1
 8003c44:	e79c      	b.n	8003b80 <__multiply+0x84>
 8003c46:	bf00      	nop
 8003c48:	08004e33 	.word	0x08004e33
 8003c4c:	08004e44 	.word	0x08004e44

08003c50 <__pow5mult>:
 8003c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c54:	4615      	mov	r5, r2
 8003c56:	f012 0203 	ands.w	r2, r2, #3
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460f      	mov	r7, r1
 8003c5e:	d007      	beq.n	8003c70 <__pow5mult+0x20>
 8003c60:	4c25      	ldr	r4, [pc, #148]	; (8003cf8 <__pow5mult+0xa8>)
 8003c62:	3a01      	subs	r2, #1
 8003c64:	2300      	movs	r3, #0
 8003c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003c6a:	f7ff fe9b 	bl	80039a4 <__multadd>
 8003c6e:	4607      	mov	r7, r0
 8003c70:	10ad      	asrs	r5, r5, #2
 8003c72:	d03d      	beq.n	8003cf0 <__pow5mult+0xa0>
 8003c74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003c76:	b97c      	cbnz	r4, 8003c98 <__pow5mult+0x48>
 8003c78:	2010      	movs	r0, #16
 8003c7a:	f7ff fe1b 	bl	80038b4 <malloc>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6270      	str	r0, [r6, #36]	; 0x24
 8003c82:	b928      	cbnz	r0, 8003c90 <__pow5mult+0x40>
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <__pow5mult+0xac>)
 8003c86:	481e      	ldr	r0, [pc, #120]	; (8003d00 <__pow5mult+0xb0>)
 8003c88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003c8c:	f000 fab2 	bl	80041f4 <__assert_func>
 8003c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c94:	6004      	str	r4, [r0, #0]
 8003c96:	60c4      	str	r4, [r0, #12]
 8003c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ca0:	b94c      	cbnz	r4, 8003cb6 <__pow5mult+0x66>
 8003ca2:	f240 2171 	movw	r1, #625	; 0x271
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f7ff ff12 	bl	8003ad0 <__i2b>
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	6003      	str	r3, [r0, #0]
 8003cb6:	f04f 0900 	mov.w	r9, #0
 8003cba:	07eb      	lsls	r3, r5, #31
 8003cbc:	d50a      	bpl.n	8003cd4 <__pow5mult+0x84>
 8003cbe:	4639      	mov	r1, r7
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f7ff ff1a 	bl	8003afc <__multiply>
 8003cc8:	4639      	mov	r1, r7
 8003cca:	4680      	mov	r8, r0
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f7ff fe47 	bl	8003960 <_Bfree>
 8003cd2:	4647      	mov	r7, r8
 8003cd4:	106d      	asrs	r5, r5, #1
 8003cd6:	d00b      	beq.n	8003cf0 <__pow5mult+0xa0>
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	b938      	cbnz	r0, 8003cec <__pow5mult+0x9c>
 8003cdc:	4622      	mov	r2, r4
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f7ff ff0b 	bl	8003afc <__multiply>
 8003ce6:	6020      	str	r0, [r4, #0]
 8003ce8:	f8c0 9000 	str.w	r9, [r0]
 8003cec:	4604      	mov	r4, r0
 8003cee:	e7e4      	b.n	8003cba <__pow5mult+0x6a>
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf6:	bf00      	nop
 8003cf8:	08004f90 	.word	0x08004f90
 8003cfc:	08004dc1 	.word	0x08004dc1
 8003d00:	08004e44 	.word	0x08004e44

08003d04 <__lshift>:
 8003d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	6849      	ldr	r1, [r1, #4]
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d12:	68a3      	ldr	r3, [r4, #8]
 8003d14:	4607      	mov	r7, r0
 8003d16:	4691      	mov	r9, r2
 8003d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d1c:	f108 0601 	add.w	r6, r8, #1
 8003d20:	42b3      	cmp	r3, r6
 8003d22:	db0b      	blt.n	8003d3c <__lshift+0x38>
 8003d24:	4638      	mov	r0, r7
 8003d26:	f7ff fddb 	bl	80038e0 <_Balloc>
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	b948      	cbnz	r0, 8003d42 <__lshift+0x3e>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <__lshift+0xd8>)
 8003d32:	482b      	ldr	r0, [pc, #172]	; (8003de0 <__lshift+0xdc>)
 8003d34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d38:	f000 fa5c 	bl	80041f4 <__assert_func>
 8003d3c:	3101      	adds	r1, #1
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	e7ee      	b.n	8003d20 <__lshift+0x1c>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f100 0114 	add.w	r1, r0, #20
 8003d48:	f100 0210 	add.w	r2, r0, #16
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	4553      	cmp	r3, sl
 8003d50:	db37      	blt.n	8003dc2 <__lshift+0xbe>
 8003d52:	6920      	ldr	r0, [r4, #16]
 8003d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d58:	f104 0314 	add.w	r3, r4, #20
 8003d5c:	f019 091f 	ands.w	r9, r9, #31
 8003d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003d64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003d68:	d02f      	beq.n	8003dca <__lshift+0xc6>
 8003d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8003d6e:	468a      	mov	sl, r1
 8003d70:	f04f 0c00 	mov.w	ip, #0
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	fa02 f209 	lsl.w	r2, r2, r9
 8003d7a:	ea42 020c 	orr.w	r2, r2, ip
 8003d7e:	f84a 2b04 	str.w	r2, [sl], #4
 8003d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d86:	4298      	cmp	r0, r3
 8003d88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003d8c:	d8f2      	bhi.n	8003d74 <__lshift+0x70>
 8003d8e:	1b03      	subs	r3, r0, r4
 8003d90:	3b15      	subs	r3, #21
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	3304      	adds	r3, #4
 8003d98:	f104 0215 	add.w	r2, r4, #21
 8003d9c:	4290      	cmp	r0, r2
 8003d9e:	bf38      	it	cc
 8003da0:	2304      	movcc	r3, #4
 8003da2:	f841 c003 	str.w	ip, [r1, r3]
 8003da6:	f1bc 0f00 	cmp.w	ip, #0
 8003daa:	d001      	beq.n	8003db0 <__lshift+0xac>
 8003dac:	f108 0602 	add.w	r6, r8, #2
 8003db0:	3e01      	subs	r6, #1
 8003db2:	4638      	mov	r0, r7
 8003db4:	612e      	str	r6, [r5, #16]
 8003db6:	4621      	mov	r1, r4
 8003db8:	f7ff fdd2 	bl	8003960 <_Bfree>
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	e7c1      	b.n	8003d4e <__lshift+0x4a>
 8003dca:	3904      	subs	r1, #4
 8003dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8003dd4:	4298      	cmp	r0, r3
 8003dd6:	d8f9      	bhi.n	8003dcc <__lshift+0xc8>
 8003dd8:	e7ea      	b.n	8003db0 <__lshift+0xac>
 8003dda:	bf00      	nop
 8003ddc:	08004e33 	.word	0x08004e33
 8003de0:	08004e44 	.word	0x08004e44

08003de4 <__mcmp>:
 8003de4:	b530      	push	{r4, r5, lr}
 8003de6:	6902      	ldr	r2, [r0, #16]
 8003de8:	690c      	ldr	r4, [r1, #16]
 8003dea:	1b12      	subs	r2, r2, r4
 8003dec:	d10e      	bne.n	8003e0c <__mcmp+0x28>
 8003dee:	f100 0314 	add.w	r3, r0, #20
 8003df2:	3114      	adds	r1, #20
 8003df4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003df8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003dfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003e00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003e04:	42a5      	cmp	r5, r4
 8003e06:	d003      	beq.n	8003e10 <__mcmp+0x2c>
 8003e08:	d305      	bcc.n	8003e16 <__mcmp+0x32>
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	bd30      	pop	{r4, r5, pc}
 8003e10:	4283      	cmp	r3, r0
 8003e12:	d3f3      	bcc.n	8003dfc <__mcmp+0x18>
 8003e14:	e7fa      	b.n	8003e0c <__mcmp+0x28>
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	e7f7      	b.n	8003e0c <__mcmp+0x28>

08003e1c <__mdiff>:
 8003e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	460c      	mov	r4, r1
 8003e22:	4606      	mov	r6, r0
 8003e24:	4611      	mov	r1, r2
 8003e26:	4620      	mov	r0, r4
 8003e28:	4690      	mov	r8, r2
 8003e2a:	f7ff ffdb 	bl	8003de4 <__mcmp>
 8003e2e:	1e05      	subs	r5, r0, #0
 8003e30:	d110      	bne.n	8003e54 <__mdiff+0x38>
 8003e32:	4629      	mov	r1, r5
 8003e34:	4630      	mov	r0, r6
 8003e36:	f7ff fd53 	bl	80038e0 <_Balloc>
 8003e3a:	b930      	cbnz	r0, 8003e4a <__mdiff+0x2e>
 8003e3c:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <__mdiff+0x10c>)
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f240 2132 	movw	r1, #562	; 0x232
 8003e44:	4839      	ldr	r0, [pc, #228]	; (8003f2c <__mdiff+0x110>)
 8003e46:	f000 f9d5 	bl	80041f4 <__assert_func>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e54:	bfa4      	itt	ge
 8003e56:	4643      	movge	r3, r8
 8003e58:	46a0      	movge	r8, r4
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003e60:	bfa6      	itte	ge
 8003e62:	461c      	movge	r4, r3
 8003e64:	2500      	movge	r5, #0
 8003e66:	2501      	movlt	r5, #1
 8003e68:	f7ff fd3a 	bl	80038e0 <_Balloc>
 8003e6c:	b920      	cbnz	r0, 8003e78 <__mdiff+0x5c>
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <__mdiff+0x10c>)
 8003e70:	4602      	mov	r2, r0
 8003e72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003e76:	e7e5      	b.n	8003e44 <__mdiff+0x28>
 8003e78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003e7c:	6926      	ldr	r6, [r4, #16]
 8003e7e:	60c5      	str	r5, [r0, #12]
 8003e80:	f104 0914 	add.w	r9, r4, #20
 8003e84:	f108 0514 	add.w	r5, r8, #20
 8003e88:	f100 0e14 	add.w	lr, r0, #20
 8003e8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003e90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003e94:	f108 0210 	add.w	r2, r8, #16
 8003e98:	46f2      	mov	sl, lr
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ea0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003ea4:	fa1f f883 	uxth.w	r8, r3
 8003ea8:	fa11 f18b 	uxtah	r1, r1, fp
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	eba1 0808 	sub.w	r8, r1, r8
 8003eb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003eb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003eba:	fa1f f888 	uxth.w	r8, r8
 8003ebe:	1419      	asrs	r1, r3, #16
 8003ec0:	454e      	cmp	r6, r9
 8003ec2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003ec6:	f84a 3b04 	str.w	r3, [sl], #4
 8003eca:	d8e7      	bhi.n	8003e9c <__mdiff+0x80>
 8003ecc:	1b33      	subs	r3, r6, r4
 8003ece:	3b15      	subs	r3, #21
 8003ed0:	f023 0303 	bic.w	r3, r3, #3
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	3415      	adds	r4, #21
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	bf38      	it	cc
 8003edc:	2304      	movcc	r3, #4
 8003ede:	441d      	add	r5, r3
 8003ee0:	4473      	add	r3, lr
 8003ee2:	469e      	mov	lr, r3
 8003ee4:	462e      	mov	r6, r5
 8003ee6:	4566      	cmp	r6, ip
 8003ee8:	d30e      	bcc.n	8003f08 <__mdiff+0xec>
 8003eea:	f10c 0203 	add.w	r2, ip, #3
 8003eee:	1b52      	subs	r2, r2, r5
 8003ef0:	f022 0203 	bic.w	r2, r2, #3
 8003ef4:	3d03      	subs	r5, #3
 8003ef6:	45ac      	cmp	ip, r5
 8003ef8:	bf38      	it	cc
 8003efa:	2200      	movcc	r2, #0
 8003efc:	441a      	add	r2, r3
 8003efe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003f02:	b17b      	cbz	r3, 8003f24 <__mdiff+0x108>
 8003f04:	6107      	str	r7, [r0, #16]
 8003f06:	e7a3      	b.n	8003e50 <__mdiff+0x34>
 8003f08:	f856 8b04 	ldr.w	r8, [r6], #4
 8003f0c:	fa11 f288 	uxtah	r2, r1, r8
 8003f10:	1414      	asrs	r4, r2, #16
 8003f12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f16:	b292      	uxth	r2, r2
 8003f18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003f1c:	f84e 2b04 	str.w	r2, [lr], #4
 8003f20:	1421      	asrs	r1, r4, #16
 8003f22:	e7e0      	b.n	8003ee6 <__mdiff+0xca>
 8003f24:	3f01      	subs	r7, #1
 8003f26:	e7ea      	b.n	8003efe <__mdiff+0xe2>
 8003f28:	08004e33 	.word	0x08004e33
 8003f2c:	08004e44 	.word	0x08004e44

08003f30 <__d2b>:
 8003f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f34:	4689      	mov	r9, r1
 8003f36:	2101      	movs	r1, #1
 8003f38:	ec57 6b10 	vmov	r6, r7, d0
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	f7ff fccf 	bl	80038e0 <_Balloc>
 8003f42:	4604      	mov	r4, r0
 8003f44:	b930      	cbnz	r0, 8003f54 <__d2b+0x24>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <__d2b+0xb0>)
 8003f4a:	4826      	ldr	r0, [pc, #152]	; (8003fe4 <__d2b+0xb4>)
 8003f4c:	f240 310a 	movw	r1, #778	; 0x30a
 8003f50:	f000 f950 	bl	80041f4 <__assert_func>
 8003f54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f5c:	bb35      	cbnz	r5, 8003fac <__d2b+0x7c>
 8003f5e:	2e00      	cmp	r6, #0
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	d028      	beq.n	8003fb6 <__d2b+0x86>
 8003f64:	4668      	mov	r0, sp
 8003f66:	9600      	str	r6, [sp, #0]
 8003f68:	f7ff fd82 	bl	8003a70 <__lo0bits>
 8003f6c:	9900      	ldr	r1, [sp, #0]
 8003f6e:	b300      	cbz	r0, 8003fb2 <__d2b+0x82>
 8003f70:	9a01      	ldr	r2, [sp, #4]
 8003f72:	f1c0 0320 	rsb	r3, r0, #32
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	40c2      	lsrs	r2, r0
 8003f7e:	6163      	str	r3, [r4, #20]
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	61a3      	str	r3, [r4, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2202      	movne	r2, #2
 8003f8c:	2201      	moveq	r2, #1
 8003f8e:	6122      	str	r2, [r4, #16]
 8003f90:	b1d5      	cbz	r5, 8003fc8 <__d2b+0x98>
 8003f92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003f96:	4405      	add	r5, r0
 8003f98:	f8c9 5000 	str.w	r5, [r9]
 8003f9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003fa0:	f8c8 0000 	str.w	r0, [r8]
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	b003      	add	sp, #12
 8003fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb0:	e7d5      	b.n	8003f5e <__d2b+0x2e>
 8003fb2:	6161      	str	r1, [r4, #20]
 8003fb4:	e7e5      	b.n	8003f82 <__d2b+0x52>
 8003fb6:	a801      	add	r0, sp, #4
 8003fb8:	f7ff fd5a 	bl	8003a70 <__lo0bits>
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	6163      	str	r3, [r4, #20]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	6122      	str	r2, [r4, #16]
 8003fc4:	3020      	adds	r0, #32
 8003fc6:	e7e3      	b.n	8003f90 <__d2b+0x60>
 8003fc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003fd0:	f8c9 0000 	str.w	r0, [r9]
 8003fd4:	6918      	ldr	r0, [r3, #16]
 8003fd6:	f7ff fd2b 	bl	8003a30 <__hi0bits>
 8003fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003fde:	e7df      	b.n	8003fa0 <__d2b+0x70>
 8003fe0:	08004e33 	.word	0x08004e33
 8003fe4:	08004e44 	.word	0x08004e44

08003fe8 <_calloc_r>:
 8003fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fea:	fba1 2402 	umull	r2, r4, r1, r2
 8003fee:	b94c      	cbnz	r4, 8004004 <_calloc_r+0x1c>
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	9201      	str	r2, [sp, #4]
 8003ff4:	f000 f87a 	bl	80040ec <_malloc_r>
 8003ff8:	9a01      	ldr	r2, [sp, #4]
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	b930      	cbnz	r0, 800400c <_calloc_r+0x24>
 8003ffe:	4628      	mov	r0, r5
 8004000:	b003      	add	sp, #12
 8004002:	bd30      	pop	{r4, r5, pc}
 8004004:	220c      	movs	r2, #12
 8004006:	6002      	str	r2, [r0, #0]
 8004008:	2500      	movs	r5, #0
 800400a:	e7f8      	b.n	8003ffe <_calloc_r+0x16>
 800400c:	4621      	mov	r1, r4
 800400e:	f7fe f961 	bl	80022d4 <memset>
 8004012:	e7f4      	b.n	8003ffe <_calloc_r+0x16>

08004014 <_free_r>:
 8004014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004016:	2900      	cmp	r1, #0
 8004018:	d044      	beq.n	80040a4 <_free_r+0x90>
 800401a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800401e:	9001      	str	r0, [sp, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f1a1 0404 	sub.w	r4, r1, #4
 8004026:	bfb8      	it	lt
 8004028:	18e4      	addlt	r4, r4, r3
 800402a:	f000 f925 	bl	8004278 <__malloc_lock>
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <_free_r+0x94>)
 8004030:	9801      	ldr	r0, [sp, #4]
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	b933      	cbnz	r3, 8004044 <_free_r+0x30>
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6014      	str	r4, [r2, #0]
 800403a:	b003      	add	sp, #12
 800403c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004040:	f000 b920 	b.w	8004284 <__malloc_unlock>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d908      	bls.n	800405a <_free_r+0x46>
 8004048:	6825      	ldr	r5, [r4, #0]
 800404a:	1961      	adds	r1, r4, r5
 800404c:	428b      	cmp	r3, r1
 800404e:	bf01      	itttt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	1949      	addeq	r1, r1, r5
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	e7ed      	b.n	8004036 <_free_r+0x22>
 800405a:	461a      	mov	r2, r3
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b10b      	cbz	r3, 8004064 <_free_r+0x50>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d9fa      	bls.n	800405a <_free_r+0x46>
 8004064:	6811      	ldr	r1, [r2, #0]
 8004066:	1855      	adds	r5, r2, r1
 8004068:	42a5      	cmp	r5, r4
 800406a:	d10b      	bne.n	8004084 <_free_r+0x70>
 800406c:	6824      	ldr	r4, [r4, #0]
 800406e:	4421      	add	r1, r4
 8004070:	1854      	adds	r4, r2, r1
 8004072:	42a3      	cmp	r3, r4
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	d1e0      	bne.n	800403a <_free_r+0x26>
 8004078:	681c      	ldr	r4, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	6053      	str	r3, [r2, #4]
 800407e:	4421      	add	r1, r4
 8004080:	6011      	str	r1, [r2, #0]
 8004082:	e7da      	b.n	800403a <_free_r+0x26>
 8004084:	d902      	bls.n	800408c <_free_r+0x78>
 8004086:	230c      	movs	r3, #12
 8004088:	6003      	str	r3, [r0, #0]
 800408a:	e7d6      	b.n	800403a <_free_r+0x26>
 800408c:	6825      	ldr	r5, [r4, #0]
 800408e:	1961      	adds	r1, r4, r5
 8004090:	428b      	cmp	r3, r1
 8004092:	bf04      	itt	eq
 8004094:	6819      	ldreq	r1, [r3, #0]
 8004096:	685b      	ldreq	r3, [r3, #4]
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	bf04      	itt	eq
 800409c:	1949      	addeq	r1, r1, r5
 800409e:	6021      	streq	r1, [r4, #0]
 80040a0:	6054      	str	r4, [r2, #4]
 80040a2:	e7ca      	b.n	800403a <_free_r+0x26>
 80040a4:	b003      	add	sp, #12
 80040a6:	bd30      	pop	{r4, r5, pc}
 80040a8:	20000200 	.word	0x20000200

080040ac <sbrk_aligned>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4e0e      	ldr	r6, [pc, #56]	; (80040e8 <sbrk_aligned+0x3c>)
 80040b0:	460c      	mov	r4, r1
 80040b2:	6831      	ldr	r1, [r6, #0]
 80040b4:	4605      	mov	r5, r0
 80040b6:	b911      	cbnz	r1, 80040be <sbrk_aligned+0x12>
 80040b8:	f000 f88c 	bl	80041d4 <_sbrk_r>
 80040bc:	6030      	str	r0, [r6, #0]
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 f887 	bl	80041d4 <_sbrk_r>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	d00a      	beq.n	80040e0 <sbrk_aligned+0x34>
 80040ca:	1cc4      	adds	r4, r0, #3
 80040cc:	f024 0403 	bic.w	r4, r4, #3
 80040d0:	42a0      	cmp	r0, r4
 80040d2:	d007      	beq.n	80040e4 <sbrk_aligned+0x38>
 80040d4:	1a21      	subs	r1, r4, r0
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 f87c 	bl	80041d4 <_sbrk_r>
 80040dc:	3001      	adds	r0, #1
 80040de:	d101      	bne.n	80040e4 <sbrk_aligned+0x38>
 80040e0:	f04f 34ff 	mov.w	r4, #4294967295
 80040e4:	4620      	mov	r0, r4
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	20000204 	.word	0x20000204

080040ec <_malloc_r>:
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	1ccd      	adds	r5, r1, #3
 80040f2:	f025 0503 	bic.w	r5, r5, #3
 80040f6:	3508      	adds	r5, #8
 80040f8:	2d0c      	cmp	r5, #12
 80040fa:	bf38      	it	cc
 80040fc:	250c      	movcc	r5, #12
 80040fe:	2d00      	cmp	r5, #0
 8004100:	4607      	mov	r7, r0
 8004102:	db01      	blt.n	8004108 <_malloc_r+0x1c>
 8004104:	42a9      	cmp	r1, r5
 8004106:	d905      	bls.n	8004114 <_malloc_r+0x28>
 8004108:	230c      	movs	r3, #12
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	2600      	movs	r6, #0
 800410e:	4630      	mov	r0, r6
 8004110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004114:	4e2e      	ldr	r6, [pc, #184]	; (80041d0 <_malloc_r+0xe4>)
 8004116:	f000 f8af 	bl	8004278 <__malloc_lock>
 800411a:	6833      	ldr	r3, [r6, #0]
 800411c:	461c      	mov	r4, r3
 800411e:	bb34      	cbnz	r4, 800416e <_malloc_r+0x82>
 8004120:	4629      	mov	r1, r5
 8004122:	4638      	mov	r0, r7
 8004124:	f7ff ffc2 	bl	80040ac <sbrk_aligned>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	4604      	mov	r4, r0
 800412c:	d14d      	bne.n	80041ca <_malloc_r+0xde>
 800412e:	6834      	ldr	r4, [r6, #0]
 8004130:	4626      	mov	r6, r4
 8004132:	2e00      	cmp	r6, #0
 8004134:	d140      	bne.n	80041b8 <_malloc_r+0xcc>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4631      	mov	r1, r6
 800413a:	4638      	mov	r0, r7
 800413c:	eb04 0803 	add.w	r8, r4, r3
 8004140:	f000 f848 	bl	80041d4 <_sbrk_r>
 8004144:	4580      	cmp	r8, r0
 8004146:	d13a      	bne.n	80041be <_malloc_r+0xd2>
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	3503      	adds	r5, #3
 800414c:	1a6d      	subs	r5, r5, r1
 800414e:	f025 0503 	bic.w	r5, r5, #3
 8004152:	3508      	adds	r5, #8
 8004154:	2d0c      	cmp	r5, #12
 8004156:	bf38      	it	cc
 8004158:	250c      	movcc	r5, #12
 800415a:	4629      	mov	r1, r5
 800415c:	4638      	mov	r0, r7
 800415e:	f7ff ffa5 	bl	80040ac <sbrk_aligned>
 8004162:	3001      	adds	r0, #1
 8004164:	d02b      	beq.n	80041be <_malloc_r+0xd2>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	442b      	add	r3, r5
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	e00e      	b.n	800418c <_malloc_r+0xa0>
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	1b52      	subs	r2, r2, r5
 8004172:	d41e      	bmi.n	80041b2 <_malloc_r+0xc6>
 8004174:	2a0b      	cmp	r2, #11
 8004176:	d916      	bls.n	80041a6 <_malloc_r+0xba>
 8004178:	1961      	adds	r1, r4, r5
 800417a:	42a3      	cmp	r3, r4
 800417c:	6025      	str	r5, [r4, #0]
 800417e:	bf18      	it	ne
 8004180:	6059      	strne	r1, [r3, #4]
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	bf08      	it	eq
 8004186:	6031      	streq	r1, [r6, #0]
 8004188:	5162      	str	r2, [r4, r5]
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	4638      	mov	r0, r7
 800418e:	f104 060b 	add.w	r6, r4, #11
 8004192:	f000 f877 	bl	8004284 <__malloc_unlock>
 8004196:	f026 0607 	bic.w	r6, r6, #7
 800419a:	1d23      	adds	r3, r4, #4
 800419c:	1af2      	subs	r2, r6, r3
 800419e:	d0b6      	beq.n	800410e <_malloc_r+0x22>
 80041a0:	1b9b      	subs	r3, r3, r6
 80041a2:	50a3      	str	r3, [r4, r2]
 80041a4:	e7b3      	b.n	800410e <_malloc_r+0x22>
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	bf0c      	ite	eq
 80041ac:	6032      	streq	r2, [r6, #0]
 80041ae:	605a      	strne	r2, [r3, #4]
 80041b0:	e7ec      	b.n	800418c <_malloc_r+0xa0>
 80041b2:	4623      	mov	r3, r4
 80041b4:	6864      	ldr	r4, [r4, #4]
 80041b6:	e7b2      	b.n	800411e <_malloc_r+0x32>
 80041b8:	4634      	mov	r4, r6
 80041ba:	6876      	ldr	r6, [r6, #4]
 80041bc:	e7b9      	b.n	8004132 <_malloc_r+0x46>
 80041be:	230c      	movs	r3, #12
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4638      	mov	r0, r7
 80041c4:	f000 f85e 	bl	8004284 <__malloc_unlock>
 80041c8:	e7a1      	b.n	800410e <_malloc_r+0x22>
 80041ca:	6025      	str	r5, [r4, #0]
 80041cc:	e7de      	b.n	800418c <_malloc_r+0xa0>
 80041ce:	bf00      	nop
 80041d0:	20000200 	.word	0x20000200

080041d4 <_sbrk_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4d06      	ldr	r5, [pc, #24]	; (80041f0 <_sbrk_r+0x1c>)
 80041d8:	2300      	movs	r3, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	f7fc ff1e 	bl	8001020 <_sbrk>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_sbrk_r+0x1a>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_sbrk_r+0x1a>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	20000208 	.word	0x20000208

080041f4 <__assert_func>:
 80041f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041f6:	4614      	mov	r4, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <__assert_func+0x2c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4605      	mov	r5, r0
 8004200:	68d8      	ldr	r0, [r3, #12]
 8004202:	b14c      	cbz	r4, 8004218 <__assert_func+0x24>
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <__assert_func+0x30>)
 8004206:	9100      	str	r1, [sp, #0]
 8004208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800420c:	4906      	ldr	r1, [pc, #24]	; (8004228 <__assert_func+0x34>)
 800420e:	462b      	mov	r3, r5
 8004210:	f000 f80e 	bl	8004230 <fiprintf>
 8004214:	f000 fa64 	bl	80046e0 <abort>
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <__assert_func+0x38>)
 800421a:	461c      	mov	r4, r3
 800421c:	e7f3      	b.n	8004206 <__assert_func+0x12>
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c
 8004224:	08004f9c 	.word	0x08004f9c
 8004228:	08004fa9 	.word	0x08004fa9
 800422c:	08004fd7 	.word	0x08004fd7

08004230 <fiprintf>:
 8004230:	b40e      	push	{r1, r2, r3}
 8004232:	b503      	push	{r0, r1, lr}
 8004234:	4601      	mov	r1, r0
 8004236:	ab03      	add	r3, sp, #12
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <fiprintf+0x20>)
 800423a:	f853 2b04 	ldr.w	r2, [r3], #4
 800423e:	6800      	ldr	r0, [r0, #0]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	f000 f84f 	bl	80042e4 <_vfiprintf_r>
 8004246:	b002      	add	sp, #8
 8004248:	f85d eb04 	ldr.w	lr, [sp], #4
 800424c:	b003      	add	sp, #12
 800424e:	4770      	bx	lr
 8004250:	2000000c 	.word	0x2000000c

08004254 <__ascii_mbtowc>:
 8004254:	b082      	sub	sp, #8
 8004256:	b901      	cbnz	r1, 800425a <__ascii_mbtowc+0x6>
 8004258:	a901      	add	r1, sp, #4
 800425a:	b142      	cbz	r2, 800426e <__ascii_mbtowc+0x1a>
 800425c:	b14b      	cbz	r3, 8004272 <__ascii_mbtowc+0x1e>
 800425e:	7813      	ldrb	r3, [r2, #0]
 8004260:	600b      	str	r3, [r1, #0]
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	1e10      	subs	r0, r2, #0
 8004266:	bf18      	it	ne
 8004268:	2001      	movne	r0, #1
 800426a:	b002      	add	sp, #8
 800426c:	4770      	bx	lr
 800426e:	4610      	mov	r0, r2
 8004270:	e7fb      	b.n	800426a <__ascii_mbtowc+0x16>
 8004272:	f06f 0001 	mvn.w	r0, #1
 8004276:	e7f8      	b.n	800426a <__ascii_mbtowc+0x16>

08004278 <__malloc_lock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_lock+0x8>)
 800427a:	f000 bbf1 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 800427e:	bf00      	nop
 8004280:	2000020c 	.word	0x2000020c

08004284 <__malloc_unlock>:
 8004284:	4801      	ldr	r0, [pc, #4]	; (800428c <__malloc_unlock+0x8>)
 8004286:	f000 bbec 	b.w	8004a62 <__retarget_lock_release_recursive>
 800428a:	bf00      	nop
 800428c:	2000020c 	.word	0x2000020c

08004290 <__sfputc_r>:
 8004290:	6893      	ldr	r3, [r2, #8]
 8004292:	3b01      	subs	r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	b410      	push	{r4}
 8004298:	6093      	str	r3, [r2, #8]
 800429a:	da08      	bge.n	80042ae <__sfputc_r+0x1e>
 800429c:	6994      	ldr	r4, [r2, #24]
 800429e:	42a3      	cmp	r3, r4
 80042a0:	db01      	blt.n	80042a6 <__sfputc_r+0x16>
 80042a2:	290a      	cmp	r1, #10
 80042a4:	d103      	bne.n	80042ae <__sfputc_r+0x1e>
 80042a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042aa:	f000 b94b 	b.w	8004544 <__swbuf_r>
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	1c58      	adds	r0, r3, #1
 80042b2:	6010      	str	r0, [r2, #0]
 80042b4:	7019      	strb	r1, [r3, #0]
 80042b6:	4608      	mov	r0, r1
 80042b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042bc:	4770      	bx	lr

080042be <__sfputs_r>:
 80042be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c0:	4606      	mov	r6, r0
 80042c2:	460f      	mov	r7, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	18d5      	adds	r5, r2, r3
 80042c8:	42ac      	cmp	r4, r5
 80042ca:	d101      	bne.n	80042d0 <__sfputs_r+0x12>
 80042cc:	2000      	movs	r0, #0
 80042ce:	e007      	b.n	80042e0 <__sfputs_r+0x22>
 80042d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d4:	463a      	mov	r2, r7
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff ffda 	bl	8004290 <__sfputc_r>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d1f3      	bne.n	80042c8 <__sfputs_r+0xa>
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042e4 <_vfiprintf_r>:
 80042e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e8:	460d      	mov	r5, r1
 80042ea:	b09d      	sub	sp, #116	; 0x74
 80042ec:	4614      	mov	r4, r2
 80042ee:	4698      	mov	r8, r3
 80042f0:	4606      	mov	r6, r0
 80042f2:	b118      	cbz	r0, 80042fc <_vfiprintf_r+0x18>
 80042f4:	6983      	ldr	r3, [r0, #24]
 80042f6:	b90b      	cbnz	r3, 80042fc <_vfiprintf_r+0x18>
 80042f8:	f000 fb14 	bl	8004924 <__sinit>
 80042fc:	4b89      	ldr	r3, [pc, #548]	; (8004524 <_vfiprintf_r+0x240>)
 80042fe:	429d      	cmp	r5, r3
 8004300:	d11b      	bne.n	800433a <_vfiprintf_r+0x56>
 8004302:	6875      	ldr	r5, [r6, #4]
 8004304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004306:	07d9      	lsls	r1, r3, #31
 8004308:	d405      	bmi.n	8004316 <_vfiprintf_r+0x32>
 800430a:	89ab      	ldrh	r3, [r5, #12]
 800430c:	059a      	lsls	r2, r3, #22
 800430e:	d402      	bmi.n	8004316 <_vfiprintf_r+0x32>
 8004310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004312:	f000 fba5 	bl	8004a60 <__retarget_lock_acquire_recursive>
 8004316:	89ab      	ldrh	r3, [r5, #12]
 8004318:	071b      	lsls	r3, r3, #28
 800431a:	d501      	bpl.n	8004320 <_vfiprintf_r+0x3c>
 800431c:	692b      	ldr	r3, [r5, #16]
 800431e:	b9eb      	cbnz	r3, 800435c <_vfiprintf_r+0x78>
 8004320:	4629      	mov	r1, r5
 8004322:	4630      	mov	r0, r6
 8004324:	f000 f96e 	bl	8004604 <__swsetup_r>
 8004328:	b1c0      	cbz	r0, 800435c <_vfiprintf_r+0x78>
 800432a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800432c:	07dc      	lsls	r4, r3, #31
 800432e:	d50e      	bpl.n	800434e <_vfiprintf_r+0x6a>
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	b01d      	add	sp, #116	; 0x74
 8004336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433a:	4b7b      	ldr	r3, [pc, #492]	; (8004528 <_vfiprintf_r+0x244>)
 800433c:	429d      	cmp	r5, r3
 800433e:	d101      	bne.n	8004344 <_vfiprintf_r+0x60>
 8004340:	68b5      	ldr	r5, [r6, #8]
 8004342:	e7df      	b.n	8004304 <_vfiprintf_r+0x20>
 8004344:	4b79      	ldr	r3, [pc, #484]	; (800452c <_vfiprintf_r+0x248>)
 8004346:	429d      	cmp	r5, r3
 8004348:	bf08      	it	eq
 800434a:	68f5      	ldreq	r5, [r6, #12]
 800434c:	e7da      	b.n	8004304 <_vfiprintf_r+0x20>
 800434e:	89ab      	ldrh	r3, [r5, #12]
 8004350:	0598      	lsls	r0, r3, #22
 8004352:	d4ed      	bmi.n	8004330 <_vfiprintf_r+0x4c>
 8004354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004356:	f000 fb84 	bl	8004a62 <__retarget_lock_release_recursive>
 800435a:	e7e9      	b.n	8004330 <_vfiprintf_r+0x4c>
 800435c:	2300      	movs	r3, #0
 800435e:	9309      	str	r3, [sp, #36]	; 0x24
 8004360:	2320      	movs	r3, #32
 8004362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004366:	f8cd 800c 	str.w	r8, [sp, #12]
 800436a:	2330      	movs	r3, #48	; 0x30
 800436c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004530 <_vfiprintf_r+0x24c>
 8004370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004374:	f04f 0901 	mov.w	r9, #1
 8004378:	4623      	mov	r3, r4
 800437a:	469a      	mov	sl, r3
 800437c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004380:	b10a      	cbz	r2, 8004386 <_vfiprintf_r+0xa2>
 8004382:	2a25      	cmp	r2, #37	; 0x25
 8004384:	d1f9      	bne.n	800437a <_vfiprintf_r+0x96>
 8004386:	ebba 0b04 	subs.w	fp, sl, r4
 800438a:	d00b      	beq.n	80043a4 <_vfiprintf_r+0xc0>
 800438c:	465b      	mov	r3, fp
 800438e:	4622      	mov	r2, r4
 8004390:	4629      	mov	r1, r5
 8004392:	4630      	mov	r0, r6
 8004394:	f7ff ff93 	bl	80042be <__sfputs_r>
 8004398:	3001      	adds	r0, #1
 800439a:	f000 80aa 	beq.w	80044f2 <_vfiprintf_r+0x20e>
 800439e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a0:	445a      	add	r2, fp
 80043a2:	9209      	str	r2, [sp, #36]	; 0x24
 80043a4:	f89a 3000 	ldrb.w	r3, [sl]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80a2 	beq.w	80044f2 <_vfiprintf_r+0x20e>
 80043ae:	2300      	movs	r3, #0
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043b8:	f10a 0a01 	add.w	sl, sl, #1
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	9307      	str	r3, [sp, #28]
 80043c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043c4:	931a      	str	r3, [sp, #104]	; 0x68
 80043c6:	4654      	mov	r4, sl
 80043c8:	2205      	movs	r2, #5
 80043ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ce:	4858      	ldr	r0, [pc, #352]	; (8004530 <_vfiprintf_r+0x24c>)
 80043d0:	f7fb ff1e 	bl	8000210 <memchr>
 80043d4:	9a04      	ldr	r2, [sp, #16]
 80043d6:	b9d8      	cbnz	r0, 8004410 <_vfiprintf_r+0x12c>
 80043d8:	06d1      	lsls	r1, r2, #27
 80043da:	bf44      	itt	mi
 80043dc:	2320      	movmi	r3, #32
 80043de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043e2:	0713      	lsls	r3, r2, #28
 80043e4:	bf44      	itt	mi
 80043e6:	232b      	movmi	r3, #43	; 0x2b
 80043e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ec:	f89a 3000 	ldrb.w	r3, [sl]
 80043f0:	2b2a      	cmp	r3, #42	; 0x2a
 80043f2:	d015      	beq.n	8004420 <_vfiprintf_r+0x13c>
 80043f4:	9a07      	ldr	r2, [sp, #28]
 80043f6:	4654      	mov	r4, sl
 80043f8:	2000      	movs	r0, #0
 80043fa:	f04f 0c0a 	mov.w	ip, #10
 80043fe:	4621      	mov	r1, r4
 8004400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004404:	3b30      	subs	r3, #48	; 0x30
 8004406:	2b09      	cmp	r3, #9
 8004408:	d94e      	bls.n	80044a8 <_vfiprintf_r+0x1c4>
 800440a:	b1b0      	cbz	r0, 800443a <_vfiprintf_r+0x156>
 800440c:	9207      	str	r2, [sp, #28]
 800440e:	e014      	b.n	800443a <_vfiprintf_r+0x156>
 8004410:	eba0 0308 	sub.w	r3, r0, r8
 8004414:	fa09 f303 	lsl.w	r3, r9, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	9304      	str	r3, [sp, #16]
 800441c:	46a2      	mov	sl, r4
 800441e:	e7d2      	b.n	80043c6 <_vfiprintf_r+0xe2>
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	1d19      	adds	r1, r3, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	9103      	str	r1, [sp, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	bfbb      	ittet	lt
 800442c:	425b      	neglt	r3, r3
 800442e:	f042 0202 	orrlt.w	r2, r2, #2
 8004432:	9307      	strge	r3, [sp, #28]
 8004434:	9307      	strlt	r3, [sp, #28]
 8004436:	bfb8      	it	lt
 8004438:	9204      	strlt	r2, [sp, #16]
 800443a:	7823      	ldrb	r3, [r4, #0]
 800443c:	2b2e      	cmp	r3, #46	; 0x2e
 800443e:	d10c      	bne.n	800445a <_vfiprintf_r+0x176>
 8004440:	7863      	ldrb	r3, [r4, #1]
 8004442:	2b2a      	cmp	r3, #42	; 0x2a
 8004444:	d135      	bne.n	80044b2 <_vfiprintf_r+0x1ce>
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	1d1a      	adds	r2, r3, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	9203      	str	r2, [sp, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfb8      	it	lt
 8004452:	f04f 33ff 	movlt.w	r3, #4294967295
 8004456:	3402      	adds	r4, #2
 8004458:	9305      	str	r3, [sp, #20]
 800445a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004540 <_vfiprintf_r+0x25c>
 800445e:	7821      	ldrb	r1, [r4, #0]
 8004460:	2203      	movs	r2, #3
 8004462:	4650      	mov	r0, sl
 8004464:	f7fb fed4 	bl	8000210 <memchr>
 8004468:	b140      	cbz	r0, 800447c <_vfiprintf_r+0x198>
 800446a:	2340      	movs	r3, #64	; 0x40
 800446c:	eba0 000a 	sub.w	r0, r0, sl
 8004470:	fa03 f000 	lsl.w	r0, r3, r0
 8004474:	9b04      	ldr	r3, [sp, #16]
 8004476:	4303      	orrs	r3, r0
 8004478:	3401      	adds	r4, #1
 800447a:	9304      	str	r3, [sp, #16]
 800447c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004480:	482c      	ldr	r0, [pc, #176]	; (8004534 <_vfiprintf_r+0x250>)
 8004482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004486:	2206      	movs	r2, #6
 8004488:	f7fb fec2 	bl	8000210 <memchr>
 800448c:	2800      	cmp	r0, #0
 800448e:	d03f      	beq.n	8004510 <_vfiprintf_r+0x22c>
 8004490:	4b29      	ldr	r3, [pc, #164]	; (8004538 <_vfiprintf_r+0x254>)
 8004492:	bb1b      	cbnz	r3, 80044dc <_vfiprintf_r+0x1f8>
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	3307      	adds	r3, #7
 8004498:	f023 0307 	bic.w	r3, r3, #7
 800449c:	3308      	adds	r3, #8
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a2:	443b      	add	r3, r7
 80044a4:	9309      	str	r3, [sp, #36]	; 0x24
 80044a6:	e767      	b.n	8004378 <_vfiprintf_r+0x94>
 80044a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80044ac:	460c      	mov	r4, r1
 80044ae:	2001      	movs	r0, #1
 80044b0:	e7a5      	b.n	80043fe <_vfiprintf_r+0x11a>
 80044b2:	2300      	movs	r3, #0
 80044b4:	3401      	adds	r4, #1
 80044b6:	9305      	str	r3, [sp, #20]
 80044b8:	4619      	mov	r1, r3
 80044ba:	f04f 0c0a 	mov.w	ip, #10
 80044be:	4620      	mov	r0, r4
 80044c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044c4:	3a30      	subs	r2, #48	; 0x30
 80044c6:	2a09      	cmp	r2, #9
 80044c8:	d903      	bls.n	80044d2 <_vfiprintf_r+0x1ee>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0c5      	beq.n	800445a <_vfiprintf_r+0x176>
 80044ce:	9105      	str	r1, [sp, #20]
 80044d0:	e7c3      	b.n	800445a <_vfiprintf_r+0x176>
 80044d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044d6:	4604      	mov	r4, r0
 80044d8:	2301      	movs	r3, #1
 80044da:	e7f0      	b.n	80044be <_vfiprintf_r+0x1da>
 80044dc:	ab03      	add	r3, sp, #12
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	462a      	mov	r2, r5
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <_vfiprintf_r+0x258>)
 80044e4:	a904      	add	r1, sp, #16
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7fd ff9c 	bl	8002424 <_printf_float>
 80044ec:	4607      	mov	r7, r0
 80044ee:	1c78      	adds	r0, r7, #1
 80044f0:	d1d6      	bne.n	80044a0 <_vfiprintf_r+0x1bc>
 80044f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044f4:	07d9      	lsls	r1, r3, #31
 80044f6:	d405      	bmi.n	8004504 <_vfiprintf_r+0x220>
 80044f8:	89ab      	ldrh	r3, [r5, #12]
 80044fa:	059a      	lsls	r2, r3, #22
 80044fc:	d402      	bmi.n	8004504 <_vfiprintf_r+0x220>
 80044fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004500:	f000 faaf 	bl	8004a62 <__retarget_lock_release_recursive>
 8004504:	89ab      	ldrh	r3, [r5, #12]
 8004506:	065b      	lsls	r3, r3, #25
 8004508:	f53f af12 	bmi.w	8004330 <_vfiprintf_r+0x4c>
 800450c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800450e:	e711      	b.n	8004334 <_vfiprintf_r+0x50>
 8004510:	ab03      	add	r3, sp, #12
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	462a      	mov	r2, r5
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <_vfiprintf_r+0x258>)
 8004518:	a904      	add	r1, sp, #16
 800451a:	4630      	mov	r0, r6
 800451c:	f7fe fa26 	bl	800296c <_printf_i>
 8004520:	e7e4      	b.n	80044ec <_vfiprintf_r+0x208>
 8004522:	bf00      	nop
 8004524:	08005114 	.word	0x08005114
 8004528:	08005134 	.word	0x08005134
 800452c:	080050f4 	.word	0x080050f4
 8004530:	08004fe2 	.word	0x08004fe2
 8004534:	08004fec 	.word	0x08004fec
 8004538:	08002425 	.word	0x08002425
 800453c:	080042bf 	.word	0x080042bf
 8004540:	08004fe8 	.word	0x08004fe8

08004544 <__swbuf_r>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	460e      	mov	r6, r1
 8004548:	4614      	mov	r4, r2
 800454a:	4605      	mov	r5, r0
 800454c:	b118      	cbz	r0, 8004556 <__swbuf_r+0x12>
 800454e:	6983      	ldr	r3, [r0, #24]
 8004550:	b90b      	cbnz	r3, 8004556 <__swbuf_r+0x12>
 8004552:	f000 f9e7 	bl	8004924 <__sinit>
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <__swbuf_r+0x98>)
 8004558:	429c      	cmp	r4, r3
 800455a:	d12b      	bne.n	80045b4 <__swbuf_r+0x70>
 800455c:	686c      	ldr	r4, [r5, #4]
 800455e:	69a3      	ldr	r3, [r4, #24]
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	071a      	lsls	r2, r3, #28
 8004566:	d52f      	bpl.n	80045c8 <__swbuf_r+0x84>
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	b36b      	cbz	r3, 80045c8 <__swbuf_r+0x84>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	6820      	ldr	r0, [r4, #0]
 8004570:	1ac0      	subs	r0, r0, r3
 8004572:	6963      	ldr	r3, [r4, #20]
 8004574:	b2f6      	uxtb	r6, r6
 8004576:	4283      	cmp	r3, r0
 8004578:	4637      	mov	r7, r6
 800457a:	dc04      	bgt.n	8004586 <__swbuf_r+0x42>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f93c 	bl	80047fc <_fflush_r>
 8004584:	bb30      	cbnz	r0, 80045d4 <__swbuf_r+0x90>
 8004586:	68a3      	ldr	r3, [r4, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	60a3      	str	r3, [r4, #8]
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	6022      	str	r2, [r4, #0]
 8004592:	701e      	strb	r6, [r3, #0]
 8004594:	6963      	ldr	r3, [r4, #20]
 8004596:	3001      	adds	r0, #1
 8004598:	4283      	cmp	r3, r0
 800459a:	d004      	beq.n	80045a6 <__swbuf_r+0x62>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	07db      	lsls	r3, r3, #31
 80045a0:	d506      	bpl.n	80045b0 <__swbuf_r+0x6c>
 80045a2:	2e0a      	cmp	r6, #10
 80045a4:	d104      	bne.n	80045b0 <__swbuf_r+0x6c>
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 f927 	bl	80047fc <_fflush_r>
 80045ae:	b988      	cbnz	r0, 80045d4 <__swbuf_r+0x90>
 80045b0:	4638      	mov	r0, r7
 80045b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <__swbuf_r+0x9c>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d101      	bne.n	80045be <__swbuf_r+0x7a>
 80045ba:	68ac      	ldr	r4, [r5, #8]
 80045bc:	e7cf      	b.n	800455e <__swbuf_r+0x1a>
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <__swbuf_r+0xa0>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	bf08      	it	eq
 80045c4:	68ec      	ldreq	r4, [r5, #12]
 80045c6:	e7ca      	b.n	800455e <__swbuf_r+0x1a>
 80045c8:	4621      	mov	r1, r4
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 f81a 	bl	8004604 <__swsetup_r>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d0cb      	beq.n	800456c <__swbuf_r+0x28>
 80045d4:	f04f 37ff 	mov.w	r7, #4294967295
 80045d8:	e7ea      	b.n	80045b0 <__swbuf_r+0x6c>
 80045da:	bf00      	nop
 80045dc:	08005114 	.word	0x08005114
 80045e0:	08005134 	.word	0x08005134
 80045e4:	080050f4 	.word	0x080050f4

080045e8 <__ascii_wctomb>:
 80045e8:	b149      	cbz	r1, 80045fe <__ascii_wctomb+0x16>
 80045ea:	2aff      	cmp	r2, #255	; 0xff
 80045ec:	bf85      	ittet	hi
 80045ee:	238a      	movhi	r3, #138	; 0x8a
 80045f0:	6003      	strhi	r3, [r0, #0]
 80045f2:	700a      	strbls	r2, [r1, #0]
 80045f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80045f8:	bf98      	it	ls
 80045fa:	2001      	movls	r0, #1
 80045fc:	4770      	bx	lr
 80045fe:	4608      	mov	r0, r1
 8004600:	4770      	bx	lr
	...

08004604 <__swsetup_r>:
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <__swsetup_r+0xcc>)
 8004606:	b570      	push	{r4, r5, r6, lr}
 8004608:	681d      	ldr	r5, [r3, #0]
 800460a:	4606      	mov	r6, r0
 800460c:	460c      	mov	r4, r1
 800460e:	b125      	cbz	r5, 800461a <__swsetup_r+0x16>
 8004610:	69ab      	ldr	r3, [r5, #24]
 8004612:	b913      	cbnz	r3, 800461a <__swsetup_r+0x16>
 8004614:	4628      	mov	r0, r5
 8004616:	f000 f985 	bl	8004924 <__sinit>
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <__swsetup_r+0xd0>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d10f      	bne.n	8004640 <__swsetup_r+0x3c>
 8004620:	686c      	ldr	r4, [r5, #4]
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004628:	0719      	lsls	r1, r3, #28
 800462a:	d42c      	bmi.n	8004686 <__swsetup_r+0x82>
 800462c:	06dd      	lsls	r5, r3, #27
 800462e:	d411      	bmi.n	8004654 <__swsetup_r+0x50>
 8004630:	2309      	movs	r3, #9
 8004632:	6033      	str	r3, [r6, #0]
 8004634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004638:	81a3      	strh	r3, [r4, #12]
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	e03e      	b.n	80046be <__swsetup_r+0xba>
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <__swsetup_r+0xd4>)
 8004642:	429c      	cmp	r4, r3
 8004644:	d101      	bne.n	800464a <__swsetup_r+0x46>
 8004646:	68ac      	ldr	r4, [r5, #8]
 8004648:	e7eb      	b.n	8004622 <__swsetup_r+0x1e>
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <__swsetup_r+0xd8>)
 800464c:	429c      	cmp	r4, r3
 800464e:	bf08      	it	eq
 8004650:	68ec      	ldreq	r4, [r5, #12]
 8004652:	e7e6      	b.n	8004622 <__swsetup_r+0x1e>
 8004654:	0758      	lsls	r0, r3, #29
 8004656:	d512      	bpl.n	800467e <__swsetup_r+0x7a>
 8004658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800465a:	b141      	cbz	r1, 800466e <__swsetup_r+0x6a>
 800465c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004660:	4299      	cmp	r1, r3
 8004662:	d002      	beq.n	800466a <__swsetup_r+0x66>
 8004664:	4630      	mov	r0, r6
 8004666:	f7ff fcd5 	bl	8004014 <_free_r>
 800466a:	2300      	movs	r3, #0
 800466c:	6363      	str	r3, [r4, #52]	; 0x34
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	2300      	movs	r3, #0
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f043 0308 	orr.w	r3, r3, #8
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	b94b      	cbnz	r3, 800469e <__swsetup_r+0x9a>
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004694:	d003      	beq.n	800469e <__swsetup_r+0x9a>
 8004696:	4621      	mov	r1, r4
 8004698:	4630      	mov	r0, r6
 800469a:	f000 fa09 	bl	8004ab0 <__smakebuf_r>
 800469e:	89a0      	ldrh	r0, [r4, #12]
 80046a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046a4:	f010 0301 	ands.w	r3, r0, #1
 80046a8:	d00a      	beq.n	80046c0 <__swsetup_r+0xbc>
 80046aa:	2300      	movs	r3, #0
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	6963      	ldr	r3, [r4, #20]
 80046b0:	425b      	negs	r3, r3
 80046b2:	61a3      	str	r3, [r4, #24]
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	b943      	cbnz	r3, 80046ca <__swsetup_r+0xc6>
 80046b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046bc:	d1ba      	bne.n	8004634 <__swsetup_r+0x30>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	0781      	lsls	r1, r0, #30
 80046c2:	bf58      	it	pl
 80046c4:	6963      	ldrpl	r3, [r4, #20]
 80046c6:	60a3      	str	r3, [r4, #8]
 80046c8:	e7f4      	b.n	80046b4 <__swsetup_r+0xb0>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e7f7      	b.n	80046be <__swsetup_r+0xba>
 80046ce:	bf00      	nop
 80046d0:	2000000c 	.word	0x2000000c
 80046d4:	08005114 	.word	0x08005114
 80046d8:	08005134 	.word	0x08005134
 80046dc:	080050f4 	.word	0x080050f4

080046e0 <abort>:
 80046e0:	b508      	push	{r3, lr}
 80046e2:	2006      	movs	r0, #6
 80046e4:	f000 fa4c 	bl	8004b80 <raise>
 80046e8:	2001      	movs	r0, #1
 80046ea:	f7fc fc3d 	bl	8000f68 <_exit>
	...

080046f0 <__sflush_r>:
 80046f0:	898a      	ldrh	r2, [r1, #12]
 80046f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	4605      	mov	r5, r0
 80046f8:	0710      	lsls	r0, r2, #28
 80046fa:	460c      	mov	r4, r1
 80046fc:	d458      	bmi.n	80047b0 <__sflush_r+0xc0>
 80046fe:	684b      	ldr	r3, [r1, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	dc05      	bgt.n	8004710 <__sflush_r+0x20>
 8004704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	dc02      	bgt.n	8004710 <__sflush_r+0x20>
 800470a:	2000      	movs	r0, #0
 800470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004712:	2e00      	cmp	r6, #0
 8004714:	d0f9      	beq.n	800470a <__sflush_r+0x1a>
 8004716:	2300      	movs	r3, #0
 8004718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800471c:	682f      	ldr	r7, [r5, #0]
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	d032      	beq.n	8004788 <__sflush_r+0x98>
 8004722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	075a      	lsls	r2, r3, #29
 8004728:	d505      	bpl.n	8004736 <__sflush_r+0x46>
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004730:	b10b      	cbz	r3, 8004736 <__sflush_r+0x46>
 8004732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	2300      	movs	r3, #0
 8004738:	4602      	mov	r2, r0
 800473a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800473c:	6a21      	ldr	r1, [r4, #32]
 800473e:	4628      	mov	r0, r5
 8004740:	47b0      	blx	r6
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	d106      	bne.n	8004756 <__sflush_r+0x66>
 8004748:	6829      	ldr	r1, [r5, #0]
 800474a:	291d      	cmp	r1, #29
 800474c:	d82c      	bhi.n	80047a8 <__sflush_r+0xb8>
 800474e:	4a2a      	ldr	r2, [pc, #168]	; (80047f8 <__sflush_r+0x108>)
 8004750:	40ca      	lsrs	r2, r1
 8004752:	07d6      	lsls	r6, r2, #31
 8004754:	d528      	bpl.n	80047a8 <__sflush_r+0xb8>
 8004756:	2200      	movs	r2, #0
 8004758:	6062      	str	r2, [r4, #4]
 800475a:	04d9      	lsls	r1, r3, #19
 800475c:	6922      	ldr	r2, [r4, #16]
 800475e:	6022      	str	r2, [r4, #0]
 8004760:	d504      	bpl.n	800476c <__sflush_r+0x7c>
 8004762:	1c42      	adds	r2, r0, #1
 8004764:	d101      	bne.n	800476a <__sflush_r+0x7a>
 8004766:	682b      	ldr	r3, [r5, #0]
 8004768:	b903      	cbnz	r3, 800476c <__sflush_r+0x7c>
 800476a:	6560      	str	r0, [r4, #84]	; 0x54
 800476c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800476e:	602f      	str	r7, [r5, #0]
 8004770:	2900      	cmp	r1, #0
 8004772:	d0ca      	beq.n	800470a <__sflush_r+0x1a>
 8004774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004778:	4299      	cmp	r1, r3
 800477a:	d002      	beq.n	8004782 <__sflush_r+0x92>
 800477c:	4628      	mov	r0, r5
 800477e:	f7ff fc49 	bl	8004014 <_free_r>
 8004782:	2000      	movs	r0, #0
 8004784:	6360      	str	r0, [r4, #52]	; 0x34
 8004786:	e7c1      	b.n	800470c <__sflush_r+0x1c>
 8004788:	6a21      	ldr	r1, [r4, #32]
 800478a:	2301      	movs	r3, #1
 800478c:	4628      	mov	r0, r5
 800478e:	47b0      	blx	r6
 8004790:	1c41      	adds	r1, r0, #1
 8004792:	d1c7      	bne.n	8004724 <__sflush_r+0x34>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0c4      	beq.n	8004724 <__sflush_r+0x34>
 800479a:	2b1d      	cmp	r3, #29
 800479c:	d001      	beq.n	80047a2 <__sflush_r+0xb2>
 800479e:	2b16      	cmp	r3, #22
 80047a0:	d101      	bne.n	80047a6 <__sflush_r+0xb6>
 80047a2:	602f      	str	r7, [r5, #0]
 80047a4:	e7b1      	b.n	800470a <__sflush_r+0x1a>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ac:	81a3      	strh	r3, [r4, #12]
 80047ae:	e7ad      	b.n	800470c <__sflush_r+0x1c>
 80047b0:	690f      	ldr	r7, [r1, #16]
 80047b2:	2f00      	cmp	r7, #0
 80047b4:	d0a9      	beq.n	800470a <__sflush_r+0x1a>
 80047b6:	0793      	lsls	r3, r2, #30
 80047b8:	680e      	ldr	r6, [r1, #0]
 80047ba:	bf08      	it	eq
 80047bc:	694b      	ldreq	r3, [r1, #20]
 80047be:	600f      	str	r7, [r1, #0]
 80047c0:	bf18      	it	ne
 80047c2:	2300      	movne	r3, #0
 80047c4:	eba6 0807 	sub.w	r8, r6, r7
 80047c8:	608b      	str	r3, [r1, #8]
 80047ca:	f1b8 0f00 	cmp.w	r8, #0
 80047ce:	dd9c      	ble.n	800470a <__sflush_r+0x1a>
 80047d0:	6a21      	ldr	r1, [r4, #32]
 80047d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047d4:	4643      	mov	r3, r8
 80047d6:	463a      	mov	r2, r7
 80047d8:	4628      	mov	r0, r5
 80047da:	47b0      	blx	r6
 80047dc:	2800      	cmp	r0, #0
 80047de:	dc06      	bgt.n	80047ee <__sflush_r+0xfe>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e78e      	b.n	800470c <__sflush_r+0x1c>
 80047ee:	4407      	add	r7, r0
 80047f0:	eba8 0800 	sub.w	r8, r8, r0
 80047f4:	e7e9      	b.n	80047ca <__sflush_r+0xda>
 80047f6:	bf00      	nop
 80047f8:	20400001 	.word	0x20400001

080047fc <_fflush_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	690b      	ldr	r3, [r1, #16]
 8004800:	4605      	mov	r5, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b913      	cbnz	r3, 800480c <_fflush_r+0x10>
 8004806:	2500      	movs	r5, #0
 8004808:	4628      	mov	r0, r5
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	b118      	cbz	r0, 8004816 <_fflush_r+0x1a>
 800480e:	6983      	ldr	r3, [r0, #24]
 8004810:	b90b      	cbnz	r3, 8004816 <_fflush_r+0x1a>
 8004812:	f000 f887 	bl	8004924 <__sinit>
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <_fflush_r+0x6c>)
 8004818:	429c      	cmp	r4, r3
 800481a:	d11b      	bne.n	8004854 <_fflush_r+0x58>
 800481c:	686c      	ldr	r4, [r5, #4]
 800481e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0ef      	beq.n	8004806 <_fflush_r+0xa>
 8004826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004828:	07d0      	lsls	r0, r2, #31
 800482a:	d404      	bmi.n	8004836 <_fflush_r+0x3a>
 800482c:	0599      	lsls	r1, r3, #22
 800482e:	d402      	bmi.n	8004836 <_fflush_r+0x3a>
 8004830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004832:	f000 f915 	bl	8004a60 <__retarget_lock_acquire_recursive>
 8004836:	4628      	mov	r0, r5
 8004838:	4621      	mov	r1, r4
 800483a:	f7ff ff59 	bl	80046f0 <__sflush_r>
 800483e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004840:	07da      	lsls	r2, r3, #31
 8004842:	4605      	mov	r5, r0
 8004844:	d4e0      	bmi.n	8004808 <_fflush_r+0xc>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	059b      	lsls	r3, r3, #22
 800484a:	d4dd      	bmi.n	8004808 <_fflush_r+0xc>
 800484c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800484e:	f000 f908 	bl	8004a62 <__retarget_lock_release_recursive>
 8004852:	e7d9      	b.n	8004808 <_fflush_r+0xc>
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <_fflush_r+0x70>)
 8004856:	429c      	cmp	r4, r3
 8004858:	d101      	bne.n	800485e <_fflush_r+0x62>
 800485a:	68ac      	ldr	r4, [r5, #8]
 800485c:	e7df      	b.n	800481e <_fflush_r+0x22>
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <_fflush_r+0x74>)
 8004860:	429c      	cmp	r4, r3
 8004862:	bf08      	it	eq
 8004864:	68ec      	ldreq	r4, [r5, #12]
 8004866:	e7da      	b.n	800481e <_fflush_r+0x22>
 8004868:	08005114 	.word	0x08005114
 800486c:	08005134 	.word	0x08005134
 8004870:	080050f4 	.word	0x080050f4

08004874 <std>:
 8004874:	2300      	movs	r3, #0
 8004876:	b510      	push	{r4, lr}
 8004878:	4604      	mov	r4, r0
 800487a:	e9c0 3300 	strd	r3, r3, [r0]
 800487e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004882:	6083      	str	r3, [r0, #8]
 8004884:	8181      	strh	r1, [r0, #12]
 8004886:	6643      	str	r3, [r0, #100]	; 0x64
 8004888:	81c2      	strh	r2, [r0, #14]
 800488a:	6183      	str	r3, [r0, #24]
 800488c:	4619      	mov	r1, r3
 800488e:	2208      	movs	r2, #8
 8004890:	305c      	adds	r0, #92	; 0x5c
 8004892:	f7fd fd1f 	bl	80022d4 <memset>
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <std+0x38>)
 8004898:	6263      	str	r3, [r4, #36]	; 0x24
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <std+0x3c>)
 800489c:	62a3      	str	r3, [r4, #40]	; 0x28
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <std+0x40>)
 80048a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <std+0x44>)
 80048a4:	6224      	str	r4, [r4, #32]
 80048a6:	6323      	str	r3, [r4, #48]	; 0x30
 80048a8:	bd10      	pop	{r4, pc}
 80048aa:	bf00      	nop
 80048ac:	08004bb9 	.word	0x08004bb9
 80048b0:	08004bdb 	.word	0x08004bdb
 80048b4:	08004c13 	.word	0x08004c13
 80048b8:	08004c37 	.word	0x08004c37

080048bc <_cleanup_r>:
 80048bc:	4901      	ldr	r1, [pc, #4]	; (80048c4 <_cleanup_r+0x8>)
 80048be:	f000 b8af 	b.w	8004a20 <_fwalk_reent>
 80048c2:	bf00      	nop
 80048c4:	080047fd 	.word	0x080047fd

080048c8 <__sfmoreglue>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	2268      	movs	r2, #104	; 0x68
 80048cc:	1e4d      	subs	r5, r1, #1
 80048ce:	4355      	muls	r5, r2
 80048d0:	460e      	mov	r6, r1
 80048d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048d6:	f7ff fc09 	bl	80040ec <_malloc_r>
 80048da:	4604      	mov	r4, r0
 80048dc:	b140      	cbz	r0, 80048f0 <__sfmoreglue+0x28>
 80048de:	2100      	movs	r1, #0
 80048e0:	e9c0 1600 	strd	r1, r6, [r0]
 80048e4:	300c      	adds	r0, #12
 80048e6:	60a0      	str	r0, [r4, #8]
 80048e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048ec:	f7fd fcf2 	bl	80022d4 <memset>
 80048f0:	4620      	mov	r0, r4
 80048f2:	bd70      	pop	{r4, r5, r6, pc}

080048f4 <__sfp_lock_acquire>:
 80048f4:	4801      	ldr	r0, [pc, #4]	; (80048fc <__sfp_lock_acquire+0x8>)
 80048f6:	f000 b8b3 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	2000020d 	.word	0x2000020d

08004900 <__sfp_lock_release>:
 8004900:	4801      	ldr	r0, [pc, #4]	; (8004908 <__sfp_lock_release+0x8>)
 8004902:	f000 b8ae 	b.w	8004a62 <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	2000020d 	.word	0x2000020d

0800490c <__sinit_lock_acquire>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__sinit_lock_acquire+0x8>)
 800490e:	f000 b8a7 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 8004912:	bf00      	nop
 8004914:	2000020e 	.word	0x2000020e

08004918 <__sinit_lock_release>:
 8004918:	4801      	ldr	r0, [pc, #4]	; (8004920 <__sinit_lock_release+0x8>)
 800491a:	f000 b8a2 	b.w	8004a62 <__retarget_lock_release_recursive>
 800491e:	bf00      	nop
 8004920:	2000020e 	.word	0x2000020e

08004924 <__sinit>:
 8004924:	b510      	push	{r4, lr}
 8004926:	4604      	mov	r4, r0
 8004928:	f7ff fff0 	bl	800490c <__sinit_lock_acquire>
 800492c:	69a3      	ldr	r3, [r4, #24]
 800492e:	b11b      	cbz	r3, 8004938 <__sinit+0x14>
 8004930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004934:	f7ff bff0 	b.w	8004918 <__sinit_lock_release>
 8004938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800493c:	6523      	str	r3, [r4, #80]	; 0x50
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <__sinit+0x68>)
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <__sinit+0x6c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	62a2      	str	r2, [r4, #40]	; 0x28
 8004946:	42a3      	cmp	r3, r4
 8004948:	bf04      	itt	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	61a3      	streq	r3, [r4, #24]
 800494e:	4620      	mov	r0, r4
 8004950:	f000 f820 	bl	8004994 <__sfp>
 8004954:	6060      	str	r0, [r4, #4]
 8004956:	4620      	mov	r0, r4
 8004958:	f000 f81c 	bl	8004994 <__sfp>
 800495c:	60a0      	str	r0, [r4, #8]
 800495e:	4620      	mov	r0, r4
 8004960:	f000 f818 	bl	8004994 <__sfp>
 8004964:	2200      	movs	r2, #0
 8004966:	60e0      	str	r0, [r4, #12]
 8004968:	2104      	movs	r1, #4
 800496a:	6860      	ldr	r0, [r4, #4]
 800496c:	f7ff ff82 	bl	8004874 <std>
 8004970:	68a0      	ldr	r0, [r4, #8]
 8004972:	2201      	movs	r2, #1
 8004974:	2109      	movs	r1, #9
 8004976:	f7ff ff7d 	bl	8004874 <std>
 800497a:	68e0      	ldr	r0, [r4, #12]
 800497c:	2202      	movs	r2, #2
 800497e:	2112      	movs	r1, #18
 8004980:	f7ff ff78 	bl	8004874 <std>
 8004984:	2301      	movs	r3, #1
 8004986:	61a3      	str	r3, [r4, #24]
 8004988:	e7d2      	b.n	8004930 <__sinit+0xc>
 800498a:	bf00      	nop
 800498c:	08004d7c 	.word	0x08004d7c
 8004990:	080048bd 	.word	0x080048bd

08004994 <__sfp>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	4607      	mov	r7, r0
 8004998:	f7ff ffac 	bl	80048f4 <__sfp_lock_acquire>
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <__sfp+0x84>)
 800499e:	681e      	ldr	r6, [r3, #0]
 80049a0:	69b3      	ldr	r3, [r6, #24]
 80049a2:	b913      	cbnz	r3, 80049aa <__sfp+0x16>
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff ffbd 	bl	8004924 <__sinit>
 80049aa:	3648      	adds	r6, #72	; 0x48
 80049ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	d503      	bpl.n	80049bc <__sfp+0x28>
 80049b4:	6833      	ldr	r3, [r6, #0]
 80049b6:	b30b      	cbz	r3, 80049fc <__sfp+0x68>
 80049b8:	6836      	ldr	r6, [r6, #0]
 80049ba:	e7f7      	b.n	80049ac <__sfp+0x18>
 80049bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049c0:	b9d5      	cbnz	r5, 80049f8 <__sfp+0x64>
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <__sfp+0x88>)
 80049c4:	60e3      	str	r3, [r4, #12]
 80049c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049ca:	6665      	str	r5, [r4, #100]	; 0x64
 80049cc:	f000 f847 	bl	8004a5e <__retarget_lock_init_recursive>
 80049d0:	f7ff ff96 	bl	8004900 <__sfp_lock_release>
 80049d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049dc:	6025      	str	r5, [r4, #0]
 80049de:	61a5      	str	r5, [r4, #24]
 80049e0:	2208      	movs	r2, #8
 80049e2:	4629      	mov	r1, r5
 80049e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049e8:	f7fd fc74 	bl	80022d4 <memset>
 80049ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049f4:	4620      	mov	r0, r4
 80049f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f8:	3468      	adds	r4, #104	; 0x68
 80049fa:	e7d9      	b.n	80049b0 <__sfp+0x1c>
 80049fc:	2104      	movs	r1, #4
 80049fe:	4638      	mov	r0, r7
 8004a00:	f7ff ff62 	bl	80048c8 <__sfmoreglue>
 8004a04:	4604      	mov	r4, r0
 8004a06:	6030      	str	r0, [r6, #0]
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d1d5      	bne.n	80049b8 <__sfp+0x24>
 8004a0c:	f7ff ff78 	bl	8004900 <__sfp_lock_release>
 8004a10:	230c      	movs	r3, #12
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	e7ee      	b.n	80049f4 <__sfp+0x60>
 8004a16:	bf00      	nop
 8004a18:	08004d7c 	.word	0x08004d7c
 8004a1c:	ffff0001 	.word	0xffff0001

08004a20 <_fwalk_reent>:
 8004a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a24:	4606      	mov	r6, r0
 8004a26:	4688      	mov	r8, r1
 8004a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a2c:	2700      	movs	r7, #0
 8004a2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a32:	f1b9 0901 	subs.w	r9, r9, #1
 8004a36:	d505      	bpl.n	8004a44 <_fwalk_reent+0x24>
 8004a38:	6824      	ldr	r4, [r4, #0]
 8004a3a:	2c00      	cmp	r4, #0
 8004a3c:	d1f7      	bne.n	8004a2e <_fwalk_reent+0xe>
 8004a3e:	4638      	mov	r0, r7
 8004a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a44:	89ab      	ldrh	r3, [r5, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d907      	bls.n	8004a5a <_fwalk_reent+0x3a>
 8004a4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	d003      	beq.n	8004a5a <_fwalk_reent+0x3a>
 8004a52:	4629      	mov	r1, r5
 8004a54:	4630      	mov	r0, r6
 8004a56:	47c0      	blx	r8
 8004a58:	4307      	orrs	r7, r0
 8004a5a:	3568      	adds	r5, #104	; 0x68
 8004a5c:	e7e9      	b.n	8004a32 <_fwalk_reent+0x12>

08004a5e <__retarget_lock_init_recursive>:
 8004a5e:	4770      	bx	lr

08004a60 <__retarget_lock_acquire_recursive>:
 8004a60:	4770      	bx	lr

08004a62 <__retarget_lock_release_recursive>:
 8004a62:	4770      	bx	lr

08004a64 <__swhatbuf_r>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	460e      	mov	r6, r1
 8004a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6c:	2900      	cmp	r1, #0
 8004a6e:	b096      	sub	sp, #88	; 0x58
 8004a70:	4614      	mov	r4, r2
 8004a72:	461d      	mov	r5, r3
 8004a74:	da08      	bge.n	8004a88 <__swhatbuf_r+0x24>
 8004a76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	602a      	str	r2, [r5, #0]
 8004a7e:	061a      	lsls	r2, r3, #24
 8004a80:	d410      	bmi.n	8004aa4 <__swhatbuf_r+0x40>
 8004a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a86:	e00e      	b.n	8004aa6 <__swhatbuf_r+0x42>
 8004a88:	466a      	mov	r2, sp
 8004a8a:	f000 f8fb 	bl	8004c84 <_fstat_r>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	dbf1      	blt.n	8004a76 <__swhatbuf_r+0x12>
 8004a92:	9a01      	ldr	r2, [sp, #4]
 8004a94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a9c:	425a      	negs	r2, r3
 8004a9e:	415a      	adcs	r2, r3
 8004aa0:	602a      	str	r2, [r5, #0]
 8004aa2:	e7ee      	b.n	8004a82 <__swhatbuf_r+0x1e>
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	b016      	add	sp, #88	; 0x58
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ab0 <__smakebuf_r>:
 8004ab0:	898b      	ldrh	r3, [r1, #12]
 8004ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ab4:	079d      	lsls	r5, r3, #30
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	d507      	bpl.n	8004acc <__smakebuf_r+0x1c>
 8004abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6163      	str	r3, [r4, #20]
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	ab01      	add	r3, sp, #4
 8004ace:	466a      	mov	r2, sp
 8004ad0:	f7ff ffc8 	bl	8004a64 <__swhatbuf_r>
 8004ad4:	9900      	ldr	r1, [sp, #0]
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff fb07 	bl	80040ec <_malloc_r>
 8004ade:	b948      	cbnz	r0, 8004af4 <__smakebuf_r+0x44>
 8004ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae4:	059a      	lsls	r2, r3, #22
 8004ae6:	d4ef      	bmi.n	8004ac8 <__smakebuf_r+0x18>
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	e7e3      	b.n	8004abc <__smakebuf_r+0xc>
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <__smakebuf_r+0x7c>)
 8004af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	6020      	str	r0, [r4, #0]
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	9b00      	ldr	r3, [sp, #0]
 8004b04:	6163      	str	r3, [r4, #20]
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	6120      	str	r0, [r4, #16]
 8004b0a:	b15b      	cbz	r3, 8004b24 <__smakebuf_r+0x74>
 8004b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 f8c9 	bl	8004ca8 <_isatty_r>
 8004b16:	b128      	cbz	r0, 8004b24 <__smakebuf_r+0x74>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	89a0      	ldrh	r0, [r4, #12]
 8004b26:	4305      	orrs	r5, r0
 8004b28:	81a5      	strh	r5, [r4, #12]
 8004b2a:	e7cd      	b.n	8004ac8 <__smakebuf_r+0x18>
 8004b2c:	080048bd 	.word	0x080048bd

08004b30 <_raise_r>:
 8004b30:	291f      	cmp	r1, #31
 8004b32:	b538      	push	{r3, r4, r5, lr}
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	d904      	bls.n	8004b44 <_raise_r+0x14>
 8004b3a:	2316      	movs	r3, #22
 8004b3c:	6003      	str	r3, [r0, #0]
 8004b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b46:	b112      	cbz	r2, 8004b4e <_raise_r+0x1e>
 8004b48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b4c:	b94b      	cbnz	r3, 8004b62 <_raise_r+0x32>
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f000 f830 	bl	8004bb4 <_getpid_r>
 8004b54:	462a      	mov	r2, r5
 8004b56:	4601      	mov	r1, r0
 8004b58:	4620      	mov	r0, r4
 8004b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b5e:	f000 b817 	b.w	8004b90 <_kill_r>
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d00a      	beq.n	8004b7c <_raise_r+0x4c>
 8004b66:	1c59      	adds	r1, r3, #1
 8004b68:	d103      	bne.n	8004b72 <_raise_r+0x42>
 8004b6a:	2316      	movs	r3, #22
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	2001      	movs	r0, #1
 8004b70:	e7e7      	b.n	8004b42 <_raise_r+0x12>
 8004b72:	2400      	movs	r4, #0
 8004b74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b78:	4628      	mov	r0, r5
 8004b7a:	4798      	blx	r3
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e7e0      	b.n	8004b42 <_raise_r+0x12>

08004b80 <raise>:
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <raise+0xc>)
 8004b82:	4601      	mov	r1, r0
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	f7ff bfd3 	b.w	8004b30 <_raise_r>
 8004b8a:	bf00      	nop
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <_kill_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d07      	ldr	r5, [pc, #28]	; (8004bb0 <_kill_r+0x20>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	4604      	mov	r4, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	f7fc f9d3 	bl	8000f48 <_kill>
 8004ba2:	1c43      	adds	r3, r0, #1
 8004ba4:	d102      	bne.n	8004bac <_kill_r+0x1c>
 8004ba6:	682b      	ldr	r3, [r5, #0]
 8004ba8:	b103      	cbz	r3, 8004bac <_kill_r+0x1c>
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000208 	.word	0x20000208

08004bb4 <_getpid_r>:
 8004bb4:	f7fc b9c0 	b.w	8000f38 <_getpid>

08004bb8 <__sread>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	460c      	mov	r4, r1
 8004bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc0:	f000 f894 	bl	8004cec <_read_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	bfab      	itete	ge
 8004bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bca:	89a3      	ldrhlt	r3, [r4, #12]
 8004bcc:	181b      	addge	r3, r3, r0
 8004bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bd2:	bfac      	ite	ge
 8004bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bd6:	81a3      	strhlt	r3, [r4, #12]
 8004bd8:	bd10      	pop	{r4, pc}

08004bda <__swrite>:
 8004bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bde:	461f      	mov	r7, r3
 8004be0:	898b      	ldrh	r3, [r1, #12]
 8004be2:	05db      	lsls	r3, r3, #23
 8004be4:	4605      	mov	r5, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	4616      	mov	r6, r2
 8004bea:	d505      	bpl.n	8004bf8 <__swrite+0x1e>
 8004bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f000 f868 	bl	8004cc8 <_lseek_r>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	4632      	mov	r2, r6
 8004c06:	463b      	mov	r3, r7
 8004c08:	4628      	mov	r0, r5
 8004c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0e:	f000 b817 	b.w	8004c40 <_write_r>

08004c12 <__sseek>:
 8004c12:	b510      	push	{r4, lr}
 8004c14:	460c      	mov	r4, r1
 8004c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1a:	f000 f855 	bl	8004cc8 <_lseek_r>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	bf15      	itete	ne
 8004c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c2e:	81a3      	strheq	r3, [r4, #12]
 8004c30:	bf18      	it	ne
 8004c32:	81a3      	strhne	r3, [r4, #12]
 8004c34:	bd10      	pop	{r4, pc}

08004c36 <__sclose>:
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 b813 	b.w	8004c64 <_close_r>
	...

08004c40 <_write_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d07      	ldr	r5, [pc, #28]	; (8004c60 <_write_r+0x20>)
 8004c44:	4604      	mov	r4, r0
 8004c46:	4608      	mov	r0, r1
 8004c48:	4611      	mov	r1, r2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	602a      	str	r2, [r5, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f7fc f903 	bl	8000e5a <_write>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_write_r+0x1e>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_write_r+0x1e>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20000208 	.word	0x20000208

08004c64 <_close_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	; (8004c80 <_close_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fc f9a1 	bl	8000fb6 <_close>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_close_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_close_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000208 	.word	0x20000208

08004c84 <_fstat_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d07      	ldr	r5, [pc, #28]	; (8004ca4 <_fstat_r+0x20>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	f7fc f99c 	bl	8000fce <_fstat>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d102      	bne.n	8004ca0 <_fstat_r+0x1c>
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	b103      	cbz	r3, 8004ca0 <_fstat_r+0x1c>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000208 	.word	0x20000208

08004ca8 <_isatty_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	; (8004cc4 <_isatty_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc f99b 	bl	8000fee <_isatty>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_isatty_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_isatty_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000208 	.word	0x20000208

08004cc8 <_lseek_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d07      	ldr	r5, [pc, #28]	; (8004ce8 <_lseek_r+0x20>)
 8004ccc:	4604      	mov	r4, r0
 8004cce:	4608      	mov	r0, r1
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	602a      	str	r2, [r5, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f7fc f994 	bl	8001004 <_lseek>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_lseek_r+0x1e>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_lseek_r+0x1e>
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	20000208 	.word	0x20000208

08004cec <_read_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d07      	ldr	r5, [pc, #28]	; (8004d0c <_read_r+0x20>)
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	4608      	mov	r0, r1
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	602a      	str	r2, [r5, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f7fc f93e 	bl	8000f7c <_read>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_read_r+0x1e>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_read_r+0x1e>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	20000208 	.word	0x20000208

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
