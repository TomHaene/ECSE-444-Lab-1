
Lab1-Tom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08005cb0  08005cb0  00015cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006274  08006274  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006274  08006274  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006274  08006274  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800627c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  08006458  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08006458  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b20  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017be  00000000  00000000  00026d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  000284f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  00028bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c05  00000000  00000000  000291c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bb3  00000000  00000000  00052dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb86c  00000000  00000000  00059980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001551ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  001552b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000042a  00000000  00000000  00157c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005c98 	.word	0x08005c98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08005c98 	.word	0x08005c98

08000200 <kalmanfilter_single_asm>:
.global kalmanfilter_single_asm



kalmanfilter_single_asm:
	push {R4, LR}
 8000200:	b510      	push	{r4, lr}
	vpush {S4-S10} //Note the syntax difference when pushing a range of registers
 8000202:	ed2d 2a07 	vpush	{s4-s10}
	VLDR.F32 S1, [R0]  //q
 8000206:	edd0 0a00 	vldr	s1, [r0]
	VLDR.F32 S2, [R0, #4] //r
 800020a:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.F32 S3, [R0, #8]   //x
 800020e:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.F32 S4, [R0, #12]   //p
 8000212:	ed90 2a03 	vldr	s4, [r0, #12]
	VLDR.F32 S5, [R0, #16]   //k
 8000216:	edd0 2a04 	vldr	s5, [r0, #16]

@Registers used: R2, R3,

VADD.F32 S4, S4, S1  @ p = p + q
 800021a:	ee32 2a20 	vadd.f32	s4, s4, s1

VADD.F32 S6, S4, S2  @ p + r
 800021e:	ee32 3a01 	vadd.f32	s6, s4, s2

VDIV.F32 S5, S4, S6 @ k = p / (p + r)
 8000222:	eec2 2a03 	vdiv.f32	s5, s4, s6

VSUB.F32 S7, S0, S3 @ (measurement - x)
 8000226:	ee70 3a61 	vsub.f32	s7, s0, s3

VMUL.F32 S8, S5, S7 @ k * (measurement - x)
 800022a:	ee22 4aa3 	vmul.f32	s8, s5, s7

VADD.F32 S3, S3, S8 @ x + k*(measurement - x)
 800022e:	ee71 1a84 	vadd.f32	s3, s3, s8


VMOV.F32 S10, #1
 8000232:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
VSUB.F32 S9, S10, S5 @1 - k
 8000236:	ee75 4a62 	vsub.f32	s9, s10, s5

VMUL.F32 S4, S9, S4 @ (1 - k) * p
 800023a:	ee24 2a82 	vmul.f32	s4, s9, s4



VMRS R3, FPSCR
 800023e:	eef1 3a10 	vmrs	r3, fpscr
//mathematically indeterminate forms like 0/0, square root of a negative number,
//infinity minus infinity, etc.
@Also check


LDR R4, =0x0000000F
 8000242:	f04f 040f 	mov.w	r4, #15
AND R4, R3, R4
 8000246:	401c      	ands	r4, r3
CMP R4, #0
 8000248:	2c00      	cmp	r4, #0
//If R4 is more than 0 it means at least one of the flags is 1
BGT overflow_handler
 800024a:	dc0a      	bgt.n	8000262 <overflow_handler>

	VSTR.F32 S1, [R0]  //q
 800024c:	edc0 0a00 	vstr	s1, [r0]
	VSTR.F32 S2, [R0, #4] //r
 8000250:	ed80 1a01 	vstr	s2, [r0, #4]
	VSTR.F32 S3, [R0, #8]   //x
 8000254:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR.F32 S4, [R0, #12]   //p
 8000258:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR.F32 S5, [R0, #16]   //k
 800025c:	edc0 2a04 	vstr	s5, [r0, #16]
B end
 8000260:	e005      	b.n	800026e <end>

08000262 <overflow_handler>:


overflow_handler:
	//Will just return 1 if error
	@ALso need to reset the FCSCR now
	LDR R6, =0xFFFFFFF0
 8000262:	f06f 060f 	mvn.w	r6, #15
	// Move the value 0 into another general-purpose register (R7)
	AND R3, R3, R6
 8000266:	4033      	ands	r3, r6
	VMSR FPSCR, R3
 8000268:	eee1 3a10 	vmsr	fpscr, r3
	MOV R0, #1
 800026c:	2001      	movs	r0, #1

0800026e <end>:


end:
	vpop {S4-S10}
 800026e:	ecbd 2a07 	vpop	{s4-s10}
	pop {R4, PC}
 8000272:	bd10      	pop	{r4, pc}

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <calculateDifference>:

void calculateDifference(float* inputArray, float* outputArray, float* differenceArray, int size){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < size; i++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e016      	b.n	8000d3a <calculateDifference+0x42>
	        differenceArray[i] = inputArray[i] - outputArray[i];
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	ed93 7a00 	vldr	s14, [r3]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	4413      	add	r3, r2
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d30:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++) {
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbe4      	blt.n	8000d0c <calculateDifference+0x14>
	    }

}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <calculateStats>:

void calculateStats(const float* differenceArray, int size, float *average, float *stdDev) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
    float sum = 0.0, variance = 0.0;
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]

    // Calculate average
    for (int i = 0; i < size; ++i) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e00e      	b.n	8000d8e <calculateStats+0x3e>
    	sum += differenceArray[i];
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d84:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < size; ++i) {
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbec      	blt.n	8000d70 <calculateStats+0x20>
    }
    *average = sum / size;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8000da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a00 	vstr	s15, [r3]

    // Calculate variance
    for (int i = 0; i < size; ++i) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e020      	b.n	8000df6 <calculateStats+0xa6>
        variance += (differenceArray[i] - *average) * (differenceArray[i] - *average);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edd3 6a00 	vldr	s13, [r3]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < size; ++i) {
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	3301      	adds	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbda      	blt.n	8000db4 <calculateStats+0x64>
    }
    variance /= size;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e08:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e10:	edc7 7a06 	vstr	s15, [r7, #24]

    // Calculate standard deviation
    *stdDev = sqrt(variance);
 8000e14:	69b8      	ldr	r0, [r7, #24]
 8000e16:	f7ff fbef 	bl	80005f8 <__aeabi_f2d>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	ec43 2b10 	vmov	d0, r2, r3
 8000e22:	f004 fe5b 	bl	8005adc <sqrt>
 8000e26:	ec53 2b10 	vmov	r2, r3, d0
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff ff13 	bl	8000c58 <__aeabi_d2f>
 8000e32:	4602      	mov	r2, r0
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <calculateCorrelation>:


float calculateCorrelation(const float* x, const float* y, int size) {
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
    float sumX = 0.0, sumY = 0.0, sumXY = 0.0;
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    float squareSumX = 0.0, squareSumY = 0.0;
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < size; ++i) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	e056      	b.n	8000f1e <calculateCorrelation+0xde>
        // Sum of elements of array X.
        sumX = sumX + x[i];
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        // Sum of elements of array Y.
        sumY = sumY + y[i];
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        // Sum of X[i] * Y[i].
        sumXY = sumXY + x[i] * y[i];
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        // Sum of square of array elements.
        squareSumX = squareSumX + x[i] * x[i];
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	edc7 7a08 	vstr	s15, [r7, #32]
        squareSumY = squareSumY + y[i] * y[i];
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	ed93 7a00 	vldr	s14, [r3]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < size; ++i) {
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dba4      	blt.n	8000e70 <calculateCorrelation+0x30>
    }

    // Use correlation formula
    float corr = (size * sumXY - sumX * sumY) /
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f38:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f48:	ee17 0a90 	vmov	r0, s15
 8000f4c:	f7ff fb54 	bl	80005f8 <__aeabi_f2d>
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
                 (sqrt((size * squareSumX - sumX * sumX) * (size * squareSumY - sumY * sumY)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	ee17 0a90 	vmov	r0, s15
 8000f98:	f7ff fb2e 	bl	80005f8 <__aeabi_f2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	ec43 2b10 	vmov	d0, r2, r3
 8000fa4:	f004 fd9a 	bl	8005adc <sqrt>
 8000fa8:	ec53 2b10 	vmov	r2, r3, d0
    float corr = (size * sumXY - sumX * sumY) /
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	f7ff fca4 	bl	80008fc <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fe4c 	bl	8000c58 <__aeabi_d2f>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	617b      	str	r3, [r7, #20]
    return corr;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	ee07 3a90 	vmov	s15, r3
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}

08000fd4 <convolution>:


void convolution(const float* x, const float* h, int N, float result[]) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
    int totalLength = 2 * N - 1; // Length of the convolution result for vectors of the same size
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]

    // Initialize result array
    for (int i = 0; i < totalLength; ++i) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e009      	b.n	8001004 <convolution+0x30>
        result[i] = 0;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < totalLength; ++i) {
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <convolution+0x1c>
    }

    // Compute the convolution
    for (int i = 0; i < N; ++i) {
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	e02c      	b.n	800106c <convolution+0x98>
        for (int j = 0; j < N; ++j) { // Use N again since both vectors are the same length
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e022      	b.n	800105e <convolution+0x8a>
            result[i + j] += x[i] * h[j];
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	edd3 6a00 	vldr	s13, [r3]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; ++j) { // Use N again since both vectors are the same length
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbd8      	blt.n	8001018 <convolution+0x44>
    for (int i = 0; i < N; ++i) {
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbce      	blt.n	8001012 <convolution+0x3e>
        }
    }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800108a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800108e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d013      	beq.n	80010c2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800109a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800109e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010a2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010aa:	e000      	b.n	80010ae <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ac:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f9      	beq.n	80010ac <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <kalmanfilter_ASM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int kalmanfilter_ASM(float* inputArray, float* outputArray, kalman_state* myState, int size){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
	int result;
	for (uint32_t i = 0; i < size ; i++){
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e01a      	b.n	800111a <kalmanfilter_ASM+0x4a>
		  	result = kalmanfilter_single_asm(myState, inputArray[i]);  // Kalman algorithm in assembly
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff f883 	bl	8000200 <kalmanfilter_single_asm>
 80010fa:	6138      	str	r0, [r7, #16]
		  	if (result == 1){
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <kalmanfilter_ASM+0x36>
		  		return 1; //Error code
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <kalmanfilter_ASM+0x54>
		  	}
		  	outputArray[i] = myState->x;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6892      	ldr	r2, [r2, #8]
 8001112:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < size ; i++){
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3e0      	bcc.n	80010e4 <kalmanfilter_ASM+0x14>
	      }

	return 0;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Kalmanfilter_C>:



//--------------------------------old------------

int Kalmanfilter_C(float* InputArray, float* OutputArray, kalman_state* kstate, int Length){
 800112c:	b480      	push	{r7}
 800112e:	b08d      	sub	sp, #52	; 0x34
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
	//Since I have the pointer to the struct I need to use the arrow operator to get fields
		 // Guard against null pointers.
		  if (InputArray == NULL || OutputArray == NULL || kstate == NULL || Length <= 0){
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <Kalmanfilter_C+0x26>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <Kalmanfilter_C+0x26>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <Kalmanfilter_C+0x26>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dc02      	bgt.n	8001158 <Kalmanfilter_C+0x2c>
		    return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e074      	b.n	8001242 <Kalmanfilter_C+0x116>
		  }
		  uint32_t fpscrValueOld;
		  uint32_t fpscrValueNew;
		  uint32_t bitmask = 0x0000000F;
 8001158:	230f      	movs	r3, #15
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
		  uint32_t resetBitmask = 0xFFFFFFE0;
 800115c:	f06f 031f 	mvn.w	r3, #31
 8001160:	623b      	str	r3, [r7, #32]
		  uint32_t result;

		  for (int i = 0; i < Length; i++){
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
 8001166:	e05d      	b.n	8001224 <Kalmanfilter_C+0xf8>
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8001168:	eef1 3a10 	vmrs	r3, fpscr
			fpscrValueOld = __get_FPSCR();
 800116c:	61bb      	str	r3, [r7, #24]


		    kstate->p = kstate->p + kstate->q;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a03 	vldr	s14, [r3, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a03 	vstr	s15, [r3, #12]
		    kstate->k = kstate->p / (kstate->p + kstate->r);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 6a03 	vldr	s13, [r3, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edd3 7a01 	vldr	s15, [r3, #4]
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a04 	vstr	s15, [r3, #16]
		    kstate->x = kstate->x + kstate->k * (InputArray[i] - kstate->x);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 6a04 	vldr	s13, [r3, #16]
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	ed93 6a00 	vldr	s12, [r3]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edc3 7a02 	vstr	s15, [r3, #8]
		    kstate->p = (1 - kstate->k) * kstate->p;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80011da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edc3 7a03 	vstr	s15, [r3, #12]
		    OutputArray[i] = kstate->x;
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	4413      	add	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	eef1 3a10 	vmrs	r3, fpscr


			fpscrValueNew = __get_FPSCR();
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
		    result = fpscrValueNew & bitmask;
 8001206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	4013      	ands	r3, r2
 800120c:	61fb      	str	r3, [r7, #28]

		    //Check if the result is non-zero
		    //I also allow bit 4 to be set because that can happen in C but doesn't mean there was
		    //a exception
		    if (result != 0 && result != 16) {
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <Kalmanfilter_C+0xf2>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d001      	beq.n	800121e <Kalmanfilter_C+0xf2>

		    	return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e011      	b.n	8001242 <Kalmanfilter_C+0x116>
		  for (int i = 0; i < Length; i++){
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	3301      	adds	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
 8001224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	db9d      	blt.n	8001168 <Kalmanfilter_C+0x3c>
		    }

		  }
		  //After each iteration, set the relevant bits of the FPSCR to zero
		  result = fpscrValueNew & resetBitmask;
 800122c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	4013      	ands	r3, r2
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	617b      	str	r3, [r7, #20]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
#endif
#else
  (void)fpscr;
#endif
}
 800123e:	bf00      	nop
		  __set_FPSCR(result);
		  return 0;
 8001240:	2300      	movs	r3, #0

	}
 8001242:	4618      	mov	r0, r3
 8001244:	3734      	adds	r7, #52	; 0x34
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <Kalmanfilter_DSP>:
//--------------------------------old------------


// CMSIS DSP implementation.
int Kalmanfilter_DSP(float *InputArray, float *OutputArray, kalman_state *kstate, int Length)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b08c      	sub	sp, #48	; 0x30
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
  // Guard against null pointers.
  if (InputArray == NULL || OutputArray == NULL || kstate == NULL || Length <= 0)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <Kalmanfilter_DSP+0x26>
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <Kalmanfilter_DSP+0x26>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <Kalmanfilter_DSP+0x26>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dc02      	bgt.n	800127a <Kalmanfilter_DSP+0x2c>
  {
    return -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	e08a      	b.n	8001390 <Kalmanfilter_DSP+0x142>
  }

  for (int i = 0; i < Length; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127e:	e081      	b.n	8001384 <Kalmanfilter_DSP+0x136>
  {
    // Use single-element arrays to hold scalar values
    float32_t p_array[1] = {kstate->p};
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t q_array[1] = {kstate->q};
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t r_array[1] = {kstate->r};
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	623b      	str	r3, [r7, #32]
    float32_t result[1];

    // p = p + q (scalar addition using single-element arrays)
    p_array[0] = kstate->p;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    q_array[0] = kstate->q;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    r_array[0] = kstate->r;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	623b      	str	r3, [r7, #32]
    arm_add_f32(p_array, q_array, result, 1);
 80012a4:	f107 021c 	add.w	r2, r7, #28
 80012a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012b0:	2301      	movs	r3, #1
 80012b2:	f001 fe6f 	bl	8002f94 <arm_add_f32>
    kstate->p = result[0]; // Update p with the result
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	60da      	str	r2, [r3, #12]

    // TODO? k = p / (p + r), since no division in CMSIS-DSP
    kstate->k = kstate->p / (kstate->p + kstate->r);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 6a03 	vldr	s13, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate x = x + k * (InputArray[i] - x) using CMSIS-DSP
    float32_t input_minus_x_array[1] = {InputArray[i] - kstate->x};
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f2:	edc7 7a06 	vstr	s15, [r7, #24]
    float32_t k_array[1] = {kstate->k};
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	617b      	str	r3, [r7, #20]

    p_array[0] = kstate->p;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    q_array[0] = kstate->q;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    r_array[0] = kstate->r;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	623b      	str	r3, [r7, #32]
    arm_mult_f32(k_array, input_minus_x_array, result, 1); // k * (input - x)
 800130e:	f107 021c 	add.w	r2, r7, #28
 8001312:	f107 0118 	add.w	r1, r7, #24
 8001316:	f107 0014 	add.w	r0, r7, #20
 800131a:	2301      	movs	r3, #1
 800131c:	f001 fde0 	bl	8002ee0 <arm_mult_f32>
    kstate->x += result[0];                                // Update x with the result
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a02 	vldr	s14, [r3, #8]
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update error covariance: p = (1 - k) * p using CMSIS-DSP
    float32_t one_minus_k_array[1] = {1.0f - kstate->k};
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edd3 7a04 	vldr	s15, [r3, #16]
 800133a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	edc7 7a04 	vstr	s15, [r7, #16]
    p_array[0] = kstate->p;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    q_array[0] = kstate->q;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    r_array[0] = kstate->r;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	623b      	str	r3, [r7, #32]
    arm_mult_f32(one_minus_k_array, p_array, result, 1); // (1 - k) * p
 8001358:	f107 021c 	add.w	r2, r7, #28
 800135c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001360:	f107 0010 	add.w	r0, r7, #16
 8001364:	2301      	movs	r3, #1
 8001366:	f001 fdbb 	bl	8002ee0 <arm_mult_f32>
    kstate->p = result[0];                               // Update p with the result
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

    // Store the updated estimate in the output array
    OutputArray[i] = kstate->x;
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6892      	ldr	r2, [r2, #8]
 800137c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < Length; i++)
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	3301      	adds	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	f6ff af79 	blt.w	8001280 <Kalmanfilter_DSP+0x32>


  }

  // Success.
  return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <initialize_output>:


void initialize_output(float* arr, int n){
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	for (int i =0; i<n; i++){
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e009      	b.n	80013bc <initialize_output+0x24>
		arr[i] = 0.0;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
	for (int i =0; i<n; i++){
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <initialize_output+0x10>
	}
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d8:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80013de:	f000 fcc0 	bl	8001d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 fb19 	bl	8001a18 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 80013e6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80013ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80013ee:	4ae3      	ldr	r2, [pc, #908]	; (800177c <main+0x3a8>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	4611      	mov	r1, r2
 80013f4:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80013f8:	461a      	mov	r2, r3
 80013fa:	f001 fe4f 	bl	800309c <memcpy>
    	                    9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
    	                    10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
    	                    9.5799256668};


  int size = sizeof(TEST_ARRAY) / sizeof(TEST_ARRAY[0]);
 80013fe:	2365      	movs	r3, #101	; 0x65
 8001400:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8


  kalman_state ASM_state;
  ASM_state.q = 0.1;
 8001404:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001408:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800140c:	4bdc      	ldr	r3, [pc, #880]	; (8001780 <main+0x3ac>)
 800140e:	6013      	str	r3, [r2, #0]
  ASM_state.r = 0.1;
 8001410:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001414:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001418:	4bd9      	ldr	r3, [pc, #868]	; (8001780 <main+0x3ac>)
 800141a:	6053      	str	r3, [r2, #4]
  ASM_state.p = 0.1;
 800141c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001420:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001424:	4bd6      	ldr	r3, [pc, #856]	; (8001780 <main+0x3ac>)
 8001426:	60d3      	str	r3, [r2, #12]
  ASM_state.x = 5.0;
 8001428:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800142c:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001430:	4bd4      	ldr	r3, [pc, #848]	; (8001784 <main+0x3b0>)
 8001432:	6093      	str	r3, [r2, #8]
  ASM_state.k = 0.0;
 8001434:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001438:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	6113      	str	r3, [r2, #16]
  float asm_output[size];
 8001442:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8001446:	1e4b      	subs	r3, r1, #1
 8001448:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800144c:	460a      	mov	r2, r1
 800144e:	2300      	movs	r3, #0
 8001450:	4614      	mov	r4, r2
 8001452:	461d      	mov	r5, r3
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	016b      	lsls	r3, r5, #5
 800145e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001462:	0162      	lsls	r2, r4, #5
 8001464:	460a      	mov	r2, r1
 8001466:	2300      	movs	r3, #0
 8001468:	4690      	mov	r8, r2
 800146a:	4699      	mov	r9, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001478:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800147c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001480:	460b      	mov	r3, r1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	3307      	adds	r3, #7
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	ebad 0d03 	sub.w	sp, sp, r3
 800148e:	466b      	mov	r3, sp
 8001490:	3303      	adds	r3, #3
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
  initialize_output(asm_output, size);
 800149a:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 800149e:	f8d7 02d0 	ldr.w	r0, [r7, #720]	; 0x2d0
 80014a2:	f7ff ff79 	bl	8001398 <initialize_output>

  kalman_state C_state;
  C_state.q = 0.1;
 80014a6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014aa:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80014ae:	4bb4      	ldr	r3, [pc, #720]	; (8001780 <main+0x3ac>)
 80014b0:	6013      	str	r3, [r2, #0]
  C_state.r = 0.1;
 80014b2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014b6:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80014ba:	4bb1      	ldr	r3, [pc, #708]	; (8001780 <main+0x3ac>)
 80014bc:	6053      	str	r3, [r2, #4]
  C_state.p = 0.1;
 80014be:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014c2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80014c6:	4bae      	ldr	r3, [pc, #696]	; (8001780 <main+0x3ac>)
 80014c8:	60d3      	str	r3, [r2, #12]
  C_state.x = 5.0;
 80014ca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014ce:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80014d2:	4bac      	ldr	r3, [pc, #688]	; (8001784 <main+0x3b0>)
 80014d4:	6093      	str	r3, [r2, #8]
  C_state.k = 0.0;
 80014d6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014da:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	6113      	str	r3, [r2, #16]
  float c_output[size];
 80014e4:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80014e8:	1e4b      	subs	r3, r1, #1
 80014ea:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80014ee:	460a      	mov	r2, r1
 80014f0:	2300      	movs	r3, #0
 80014f2:	4692      	mov	sl, r2
 80014f4:	469b      	mov	fp, r3
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001502:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001506:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800150a:	460a      	mov	r2, r1
 800150c:	2300      	movs	r3, #0
 800150e:	673a      	str	r2, [r7, #112]	; 0x70
 8001510:	677b      	str	r3, [r7, #116]	; 0x74
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800151e:	4628      	mov	r0, r5
 8001520:	0143      	lsls	r3, r0, #5
 8001522:	4620      	mov	r0, r4
 8001524:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001528:	4620      	mov	r0, r4
 800152a:	0142      	lsls	r2, r0, #5
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	3307      	adds	r3, #7
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	ebad 0d03 	sub.w	sp, sp, r3
 800153a:	466b      	mov	r3, sp
 800153c:	3303      	adds	r3, #3
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
  initialize_output(c_output, size);
 8001546:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 800154a:	f8d7 02d8 	ldr.w	r0, [r7, #728]	; 0x2d8
 800154e:	f7ff ff23 	bl	8001398 <initialize_output>



  kalman_state CMSIS_state;
  CMSIS_state.q = 0.1;
 8001552:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001556:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800155a:	4b89      	ldr	r3, [pc, #548]	; (8001780 <main+0x3ac>)
 800155c:	6013      	str	r3, [r2, #0]
  CMSIS_state.r = 0.1;
 800155e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001562:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8001566:	4b86      	ldr	r3, [pc, #536]	; (8001780 <main+0x3ac>)
 8001568:	6053      	str	r3, [r2, #4]
  CMSIS_state.p = 0.1;
 800156a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800156e:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8001572:	4b83      	ldr	r3, [pc, #524]	; (8001780 <main+0x3ac>)
 8001574:	60d3      	str	r3, [r2, #12]
  CMSIS_state.x = 5.0;
 8001576:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800157a:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800157e:	4b81      	ldr	r3, [pc, #516]	; (8001784 <main+0x3b0>)
 8001580:	6093      	str	r3, [r2, #8]
  CMSIS_state.k = 0.0;
 8001582:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001586:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	6113      	str	r3, [r2, #16]
  float cmsis_output[size];
 8001590:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8001594:	1e4b      	subs	r3, r1, #1
 8001596:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800159a:	460a      	mov	r2, r1
 800159c:	2300      	movs	r3, #0
 800159e:	66ba      	str	r2, [r7, #104]	; 0x68
 80015a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80015ae:	4628      	mov	r0, r5
 80015b0:	0143      	lsls	r3, r0, #5
 80015b2:	4620      	mov	r0, r4
 80015b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015b8:	4620      	mov	r0, r4
 80015ba:	0142      	lsls	r2, r0, #5
 80015bc:	460a      	mov	r2, r1
 80015be:	2300      	movs	r3, #0
 80015c0:	663a      	str	r2, [r7, #96]	; 0x60
 80015c2:	667b      	str	r3, [r7, #100]	; 0x64
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015d0:	4628      	mov	r0, r5
 80015d2:	0143      	lsls	r3, r0, #5
 80015d4:	4620      	mov	r0, r4
 80015d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015da:	4620      	mov	r0, r4
 80015dc:	0142      	lsls	r2, r0, #5
 80015de:	460b      	mov	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	3307      	adds	r3, #7
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	ebad 0d03 	sub.w	sp, sp, r3
 80015ec:	466b      	mov	r3, sp
 80015ee:	3303      	adds	r3, #3
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
  initialize_output(cmsis_output, size);
 80015f8:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80015fc:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 8001600:	f7ff feca 	bl	8001398 <initialize_output>



  float input[] = {0,1,2,3,4};
 8001604:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001608:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800160c:	4a5e      	ldr	r2, [pc, #376]	; (8001788 <main+0x3b4>)
 800160e:	461d      	mov	r5, r3
 8001610:	4614      	mov	r4, r2
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	602b      	str	r3, [r5, #0]



  	float asm_average;
  	float asm_stdDev;
  	float asm_diffArray[size];
 800161a:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 800161e:	1e4b      	subs	r3, r1, #1
 8001620:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001624:	460a      	mov	r2, r1
 8001626:	2300      	movs	r3, #0
 8001628:	65ba      	str	r2, [r7, #88]	; 0x58
 800162a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001638:	4628      	mov	r0, r5
 800163a:	0143      	lsls	r3, r0, #5
 800163c:	4620      	mov	r0, r4
 800163e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001642:	4620      	mov	r0, r4
 8001644:	0142      	lsls	r2, r0, #5
 8001646:	460a      	mov	r2, r1
 8001648:	2300      	movs	r3, #0
 800164a:	653a      	str	r2, [r7, #80]	; 0x50
 800164c:	657b      	str	r3, [r7, #84]	; 0x54
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800165a:	4628      	mov	r0, r5
 800165c:	0143      	lsls	r3, r0, #5
 800165e:	4620      	mov	r0, r4
 8001660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001664:	4620      	mov	r0, r4
 8001666:	0142      	lsls	r2, r0, #5
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3307      	adds	r3, #7
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	ebad 0d03 	sub.w	sp, sp, r3
 8001676:	466b      	mov	r3, sp
 8001678:	3303      	adds	r3, #3
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

	float c_average;
  	float c_stdDev;
  	float c_diffArray[size];
 8001682:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8001686:	1e4b      	subs	r3, r1, #1
 8001688:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800168c:	460a      	mov	r2, r1
 800168e:	2300      	movs	r3, #0
 8001690:	64ba      	str	r2, [r7, #72]	; 0x48
 8001692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80016a0:	4628      	mov	r0, r5
 80016a2:	0143      	lsls	r3, r0, #5
 80016a4:	4620      	mov	r0, r4
 80016a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016aa:	4620      	mov	r0, r4
 80016ac:	0142      	lsls	r2, r0, #5
 80016ae:	460a      	mov	r2, r1
 80016b0:	2300      	movs	r3, #0
 80016b2:	643a      	str	r2, [r7, #64]	; 0x40
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016c2:	4628      	mov	r0, r5
 80016c4:	0143      	lsls	r3, r0, #5
 80016c6:	4620      	mov	r0, r4
 80016c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016cc:	4620      	mov	r0, r4
 80016ce:	0142      	lsls	r2, r0, #5
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	3307      	adds	r3, #7
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	ebad 0d03 	sub.w	sp, sp, r3
 80016de:	466b      	mov	r3, sp
 80016e0:	3303      	adds	r3, #3
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4


	float cmsis_average;
  	float cmsis_stdDev;
  	float cmsis_diffArray[size];
 80016ea:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80016ee:	1e4b      	subs	r3, r1, #1
 80016f0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80016f4:	460a      	mov	r2, r1
 80016f6:	2300      	movs	r3, #0
 80016f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001708:	4628      	mov	r0, r5
 800170a:	0143      	lsls	r3, r0, #5
 800170c:	4620      	mov	r0, r4
 800170e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001712:	4620      	mov	r0, r4
 8001714:	0142      	lsls	r2, r0, #5
 8001716:	460a      	mov	r2, r1
 8001718:	2300      	movs	r3, #0
 800171a:	633a      	str	r2, [r7, #48]	; 0x30
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800172a:	4628      	mov	r0, r5
 800172c:	0143      	lsls	r3, r0, #5
 800172e:	4620      	mov	r0, r4
 8001730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001734:	4620      	mov	r0, r4
 8001736:	0142      	lsls	r2, r0, #5
 8001738:	460b      	mov	r3, r1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	3307      	adds	r3, #7
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	ebad 0d03 	sub.w	sp, sp, r3
 8001746:	466b      	mov	r3, sp
 8001748:	3303      	adds	r3, #3
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac


  	kalman_state testState;
  	testState.q = 0.0;
 8001752:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001756:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  	testState.r = 0.0;
 8001760:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001764:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  	testState.p = 0.0;
 800176e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001772:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	e007      	b.n	800178c <main+0x3b8>
 800177c:	08005cb0 	.word	0x08005cb0
 8001780:	3dcccccd 	.word	0x3dcccccd
 8001784:	40a00000 	.word	0x40a00000
 8001788:	08005e44 	.word	0x08005e44
 800178c:	60da      	str	r2, [r3, #12]
  	testState.x = 5.0;
 800178e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001792:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001796:	4a9f      	ldr	r2, [pc, #636]	; (8001a14 <main+0x640>)
 8001798:	609a      	str	r2, [r3, #8]
  	testState.k = 0.0;
 800179a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800179e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]

  	kalmanfilter_ASM(TEST_ARRAY , asm_output, &ASM_state, size);
 80017a8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80017ac:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80017b0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017b4:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 80017b8:	f7ff fc8a 	bl	80010d0 <kalmanfilter_ASM>
  	Kalmanfilter_C(TEST_ARRAY, c_output, &C_state, size);
 80017bc:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80017c0:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80017c4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017c8:	f8d7 12d8 	ldr.w	r1, [r7, #728]	; 0x2d8
 80017cc:	f7ff fcae 	bl	800112c <Kalmanfilter_C>
  	Kalmanfilter_DSP(TEST_ARRAY, cmsis_output, &CMSIS_state, size);
 80017d0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80017d4:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80017d8:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017dc:	f8d7 12c4 	ldr.w	r1, [r7, #708]	; 0x2c4
 80017e0:	f7ff fd35 	bl	800124e <Kalmanfilter_DSP>



//Calculating tracking difference
  	calculateDifference(TEST_ARRAY, asm_output, asm_diffArray, size);
 80017e4:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80017e8:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80017ec:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80017f0:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 80017f4:	f7ff fa80 	bl	8000cf8 <calculateDifference>
	calculateDifference(TEST_ARRAY, c_output, c_diffArray, size);
 80017f8:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80017fc:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001800:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001804:	f8d7 12d8 	ldr.w	r1, [r7, #728]	; 0x2d8
 8001808:	f7ff fa76 	bl	8000cf8 <calculateDifference>
	calculateDifference(TEST_ARRAY, cmsis_output, cmsis_diffArray, size);
 800180c:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001810:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001814:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8001818:	f8d7 12c4 	ldr.w	r1, [r7, #708]	; 0x2c4
 800181c:	f7ff fa6c 	bl	8000cf8 <calculateDifference>


//Calculating average and std deviation
  	calculateStats(asm_diffArray, size, &asm_average, &asm_stdDev);
 8001820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001824:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001828:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 800182c:	f8d7 02bc 	ldr.w	r0, [r7, #700]	; 0x2bc
 8001830:	f7ff fa8e 	bl	8000d50 <calculateStats>
  	calculateStats(c_diffArray, size, &c_average, &c_stdDev);
 8001834:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001838:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800183c:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8001840:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8001844:	f7ff fa84 	bl	8000d50 <calculateStats>
  	calculateStats(cmsis_diffArray, size, &cmsis_average, &cmsis_stdDev);
 8001848:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800184c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001850:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8001854:	f8d7 02ac 	ldr.w	r0, [r7, #684]	; 0x2ac
 8001858:	f7ff fa7a 	bl	8000d50 <calculateStats>


//Calculating correlation
  	float asm_correlation = calculateCorrelation(TEST_ARRAY, asm_output, size);
 800185c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001860:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001864:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fae9 	bl	8000e40 <calculateCorrelation>
 800186e:	ed87 0aaa 	vstr	s0, [r7, #680]	; 0x2a8
  	float c_correlation = calculateCorrelation(TEST_ARRAY, c_output, size);
 8001872:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001876:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800187a:	f8d7 12d8 	ldr.w	r1, [r7, #728]	; 0x2d8
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fade 	bl	8000e40 <calculateCorrelation>
 8001884:	ed87 0aa9 	vstr	s0, [r7, #676]	; 0x2a4
  	float cmsis_correlation = calculateCorrelation(TEST_ARRAY, cmsis_output, size);
 8001888:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800188c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001890:	f8d7 12c4 	ldr.w	r1, [r7, #708]	; 0x2c4
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fad3 	bl	8000e40 <calculateCorrelation>
 800189a:	ed87 0aa8 	vstr	s0, [r7, #672]	; 0x2a0


//Calculating convolution

  	float asm_convolution_vector[size];
 800189e:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80018a2:	1e4b      	subs	r3, r1, #1
 80018a4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80018a8:	460a      	mov	r2, r1
 80018aa:	2300      	movs	r3, #0
 80018ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018bc:	4628      	mov	r0, r5
 80018be:	0143      	lsls	r3, r0, #5
 80018c0:	4620      	mov	r0, r4
 80018c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018c6:	4620      	mov	r0, r4
 80018c8:	0142      	lsls	r2, r0, #5
 80018ca:	460a      	mov	r2, r1
 80018cc:	2300      	movs	r3, #0
 80018ce:	623a      	str	r2, [r7, #32]
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018de:	4628      	mov	r0, r5
 80018e0:	0143      	lsls	r3, r0, #5
 80018e2:	4620      	mov	r0, r4
 80018e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018e8:	4620      	mov	r0, r4
 80018ea:	0142      	lsls	r2, r0, #5
 80018ec:	460b      	mov	r3, r1
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3303      	adds	r3, #3
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  	float c_convolution_vector[size];
 8001906:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 800190a:	1e4b      	subs	r3, r1, #1
 800190c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8001910:	460a      	mov	r2, r1
 8001912:	2300      	movs	r3, #0
 8001914:	61ba      	str	r2, [r7, #24]
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001924:	4628      	mov	r0, r5
 8001926:	0143      	lsls	r3, r0, #5
 8001928:	4620      	mov	r0, r4
 800192a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800192e:	4620      	mov	r0, r4
 8001930:	0142      	lsls	r2, r0, #5
 8001932:	460a      	mov	r2, r1
 8001934:	2300      	movs	r3, #0
 8001936:	613a      	str	r2, [r7, #16]
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001946:	4628      	mov	r0, r5
 8001948:	0143      	lsls	r3, r0, #5
 800194a:	4620      	mov	r0, r4
 800194c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001950:	4620      	mov	r0, r4
 8001952:	0142      	lsls	r2, r0, #5
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	3307      	adds	r3, #7
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	ebad 0d03 	sub.w	sp, sp, r3
 8001962:	466b      	mov	r3, sp
 8001964:	3303      	adds	r3, #3
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
  	float cmsis_convolution_vector[size];
 800196e:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8001972:	1e4b      	subs	r3, r1, #1
 8001974:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001978:	460a      	mov	r2, r1
 800197a:	2300      	movs	r3, #0
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800198c:	4628      	mov	r0, r5
 800198e:	0143      	lsls	r3, r0, #5
 8001990:	4620      	mov	r0, r4
 8001992:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001996:	4620      	mov	r0, r4
 8001998:	0142      	lsls	r2, r0, #5
 800199a:	460a      	mov	r2, r1
 800199c:	2300      	movs	r3, #0
 800199e:	603a      	str	r2, [r7, #0]
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ae:	4628      	mov	r0, r5
 80019b0:	0143      	lsls	r3, r0, #5
 80019b2:	4620      	mov	r0, r4
 80019b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b8:	4620      	mov	r0, r4
 80019ba:	0142      	lsls	r2, r0, #5
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	3307      	adds	r3, #7
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	ebad 0d03 	sub.w	sp, sp, r3
 80019ca:	466b      	mov	r3, sp
 80019cc:	3303      	adds	r3, #3
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288


  	convolution(TEST_ARRAY, asm_output, size, asm_convolution_vector);
 80019d6:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80019da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80019de:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80019e2:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 80019e6:	f7ff faf5 	bl	8000fd4 <convolution>
  	convolution(TEST_ARRAY, c_output, size, c_convolution_vector);
 80019ea:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80019ee:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80019f2:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80019f6:	f8d7 12d8 	ldr.w	r1, [r7, #728]	; 0x2d8
 80019fa:	f7ff faeb 	bl	8000fd4 <convolution>
  	convolution(TEST_ARRAY, cmsis_output, size, cmsis_convolution_vector);
 80019fe:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001a02:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001a06:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001a0a:	f8d7 12c4 	ldr.w	r1, [r7, #708]	; 0x2c4
 8001a0e:	f7ff fae1 	bl	8000fd4 <convolution>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <main+0x63e>
 8001a14:	40a00000 	.word	0x40a00000

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b096      	sub	sp, #88	; 0x58
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	2244      	movs	r2, #68	; 0x44
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fb46 	bl	80030b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 fb0c 	bl	8002058 <HAL_PWREx_ControlVoltageScaling>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001a46:	f000 f854 	bl	8001af2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a56:	2360      	movs	r3, #96	; 0x60
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a66:	233c      	movs	r3, #60	; 0x3c
 8001a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fb90 	bl	80021a0 <HAL_RCC_OscConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a86:	f000 f834 	bl	8001af2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 ff96 	bl	80029d4 <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001aae:	f000 f820 	bl	8001af2 <Error_Handler>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3758      	adds	r7, #88	; 0x58
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e009      	b.n	8001ae0 <_write+0x26>
 {
	ITM_SendChar(*ptr++);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fad4 	bl	8001082 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf1      	blt.n	8001acc <_write+0x12>

 }
 return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af6:	b672      	cpsid	i
}
 8001af8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afa:	e7fe      	b.n	8001afa <Error_Handler+0x8>

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_MspInit+0x44>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x44>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <NMI_Handler+0x4>

08001b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b90:	f000 f93c 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_kill>:

int _kill(int pid, int sig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb2:	f001 fa49 	bl	8003048 <__errno>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2216      	movs	r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_exit>:

void _exit (int status)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ffe7 	bl	8001ba8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bda:	e7fe      	b.n	8001bda <_exit+0x12>

08001bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e00a      	b.n	8001c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bee:	f3af 8000 	nop.w
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	b2ca      	uxtb	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbf0      	blt.n	8001bee <_read+0x12>
  }

  return len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_isatty>:

int _isatty(int file)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f001 f9ca 	bl	8003048 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200a0000 	.word	0x200a0000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	200001f8 	.word	0x200001f8
 8001ce8:	20000210 	.word	0x20000210

08001cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d14:	f7ff ffea 	bl	8001cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1a:	490d      	ldr	r1, [pc, #52]	; (8001d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <LoopForever+0xe>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d30:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <LoopForever+0x16>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f001 f989 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d42:	f7ff fb47 	bl	80013d4 <main>

08001d46 <LoopForever>:

LoopForever:
    b LoopForever
 8001d46:	e7fe      	b.n	8001d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d48:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d54:	0800627c 	.word	0x0800627c
  ldr r2, =_sbss
 8001d58:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d5c:	20000210 	.word	0x20000210

08001d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_IRQHandler>

08001d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f000 f91f 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f80e 	bl	8001d94 <HAL_InitTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	e001      	b.n	8001d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d84:	f7ff feba 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d88:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_InitTick+0x6c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_InitTick+0x70>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_InitTick+0x6c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f91d 	bl	8001ffe <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10f      	bne.n	8001dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d809      	bhi.n	8001de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f000 f8f5 	bl	8001fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_InitTick+0x74>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e007      	b.n	8001df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e004      	b.n	8001df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e001      	b.n	8001df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	200001fc 	.word	0x200001fc

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200001fc 	.word	0x200001fc

08001e4c <__NVIC_SetPriorityGrouping>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_SetPriority>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff47 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff5c 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff8e 	bl	8001f04 <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5d 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffb0 	bl	8001f6c <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_PWREx_GetVoltageRange+0x3c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	d102      	bne.n	8002030 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800202a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202e:	e00b      	b.n	8002048 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002044:	e000      	b.n	8002048 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002046:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d141      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002066:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d131      	bne.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002074:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208c:	4a41      	ldr	r2, [pc, #260]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002094:	4b40      	ldr	r3, [pc, #256]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2232      	movs	r2, #50	; 0x32
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	4a3f      	ldr	r2, [pc, #252]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	3301      	adds	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020aa:	e002      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020be:	d102      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f2      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c6:	4b33      	ldr	r3, [pc, #204]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d2:	d158      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e057      	b.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020de:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020e8:	e04d      	b.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f0:	d141      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fe:	d131      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2232      	movs	r2, #50	; 0x32
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	0c9b      	lsrs	r3, r3, #18
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002136:	e002      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3b01      	subs	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d102      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f2      	bne.n	8002138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d112      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e011      	b.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002174:	e007      	b.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002184:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40007000 	.word	0x40007000
 8002198:	20000000 	.word	0x20000000
 800219c:	431bde83 	.word	0x431bde83

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f000 bc08 	b.w	80029c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b4:	4b96      	ldr	r3, [pc, #600]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021be:	4b94      	ldr	r3, [pc, #592]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80e4 	beq.w	800239e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_RCC_OscConfig+0x4c>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	f040 808b 	bne.w	80022fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	f040 8087 	bne.w	80022fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ec:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x64>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e3df      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_RCC_OscConfig+0x7e>
 8002214:	4b7e      	ldr	r3, [pc, #504]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221c:	e005      	b.n	800222a <HAL_RCC_OscConfig+0x8a>
 800221e:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222a:	4293      	cmp	r3, r2
 800222c:	d223      	bcs.n	8002276 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd94 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e3c0      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002242:	4b73      	ldr	r3, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a72      	ldr	r2, [pc, #456]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b70      	ldr	r3, [pc, #448]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	496d      	ldr	r1, [pc, #436]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	4968      	ldr	r1, [pc, #416]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e025      	b.n	80022c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002276:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a65      	ldr	r2, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4960      	ldr	r1, [pc, #384]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	495b      	ldr	r1, [pc, #364]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fd54 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e380      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c2:	f000 fcc1 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4950      	ldr	r1, [pc, #320]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_RCC_OscConfig+0x278>)
 80022e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022e2:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_RCC_OscConfig+0x27c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fd54 	bl	8001d94 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d052      	beq.n	800239c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	e364      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d032      	beq.n	8002368 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800230e:	f7ff fd91 	bl	8001e34 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002316:	f7ff fd8d 	bl	8001e34 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e34d      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a35      	ldr	r2, [pc, #212]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4930      	ldr	r1, [pc, #192]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002352:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	492b      	ldr	r1, [pc, #172]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
 8002366:	e01a      	b.n	800239e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002374:	f7ff fd5e 	bl	8001e34 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237c:	f7ff fd5a 	bl	8001e34 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e31a      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1dc>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d073      	beq.n	8002492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x21c>
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d10e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d063      	beq.n	8002490 <HAL_RCC_OscConfig+0x2f0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d15f      	bne.n	8002490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e2f7      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x24c>
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e025      	b.n	8002438 <HAL_RCC_OscConfig+0x298>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d114      	bne.n	8002420 <HAL_RCC_OscConfig+0x280>
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a02      	ldr	r2, [pc, #8]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e013      	b.n	8002438 <HAL_RCC_OscConfig+0x298>
 8002410:	40021000 	.word	0x40021000
 8002414:	08005e58 	.word	0x08005e58
 8002418:	20000000 	.word	0x20000000
 800241c:	20000004 	.word	0x20000004
 8002420:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a9f      	ldr	r2, [pc, #636]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b9d      	ldr	r3, [pc, #628]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a9c      	ldr	r2, [pc, #624]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fcf8 	bl	8001e34 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fcf4 	bl	8001e34 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e2b4      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245a:	4b92      	ldr	r3, [pc, #584]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x2a8>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fce4 	bl	8001e34 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fce0 	bl	8001e34 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e2a0      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x2d0>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d060      	beq.n	8002560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_OscConfig+0x310>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d119      	bne.n	80024de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d116      	bne.n	80024de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	4b7c      	ldr	r3, [pc, #496]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_OscConfig+0x328>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e27d      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	4973      	ldr	r1, [pc, #460]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024dc:	e040      	b.n	8002560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d023      	beq.n	800252e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e6:	4b6f      	ldr	r3, [pc, #444]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6e      	ldr	r2, [pc, #440]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7ff fc9f 	bl	8001e34 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fa:	f7ff fc9b 	bl	8001e34 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e25b      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250c:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	495f      	ldr	r1, [pc, #380]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
 800252c:	e018      	b.n	8002560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252e:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7ff fc7b 	bl	8001e34 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff fc77 	bl	8001e34 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e237      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d03c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01c      	beq.n	80025ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257a:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff fc56 	bl	8001e34 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff fc52 	bl	8001e34 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e212      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ef      	beq.n	800258c <HAL_RCC_OscConfig+0x3ec>
 80025ac:	e01b      	b.n	80025e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7ff fc39 	bl	8001e34 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7ff fc35 	bl	8001e34 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1f5      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ef      	bne.n	80025c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80a6 	beq.w	8002740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f4:	2300      	movs	r3, #0
 80025f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10d      	bne.n	8002620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260e:	6593      	str	r3, [r2, #88]	; 0x58
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261c:	2301      	movs	r3, #1
 800261e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x508>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d118      	bne.n	800265e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_OscConfig+0x508>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_RCC_OscConfig+0x508>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002638:	f7ff fbfc 	bl	8001e34 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002640:	f7ff fbf8 	bl	8001e34 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1b8      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCC_OscConfig+0x508>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x4d8>
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002676:	e029      	b.n	80026cc <HAL_RCC_OscConfig+0x52c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d115      	bne.n	80026ac <HAL_RCC_OscConfig+0x50c>
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_RCC_OscConfig+0x504>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a0:	e014      	b.n	80026cc <HAL_RCC_OscConfig+0x52c>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
 80026ac:	4b9d      	ldr	r3, [pc, #628]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a9c      	ldr	r2, [pc, #624]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026bc:	4b99      	ldr	r3, [pc, #612]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	4a98      	ldr	r2, [pc, #608]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d016      	beq.n	8002702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7ff fbae 	bl	8001e34 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7ff fbaa 	bl	8001e34 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e168      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f2:	4b8c      	ldr	r3, [pc, #560]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ed      	beq.n	80026dc <HAL_RCC_OscConfig+0x53c>
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7ff fb97 	bl	8001e34 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff fb93 	bl	8001e34 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e151      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002720:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ed      	bne.n	800270a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272e:	7ffb      	ldrb	r3, [r7, #31]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002734:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 800273a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d03c      	beq.n	80027c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01c      	beq.n	800278e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002754:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800275a:	4a72      	ldr	r2, [pc, #456]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7ff fb66 	bl	8001e34 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276c:	f7ff fb62 	bl	8001e34 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e122      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800277e:	4b69      	ldr	r3, [pc, #420]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ef      	beq.n	800276c <HAL_RCC_OscConfig+0x5cc>
 800278c:	e01b      	b.n	80027c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002794:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7ff fb49 	bl	8001e34 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a6:	f7ff fb45 	bl	8001e34 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e105      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b8:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80027ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1ef      	bne.n	80027a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80f9 	beq.w	80029c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	f040 80cf 	bne.w	8002978 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027da:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0203 	and.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d12c      	bne.n	8002848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	3b01      	subs	r3, #1
 80027fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d123      	bne.n	8002848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d11b      	bne.n	8002848 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d113      	bne.n	8002848 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d109      	bne.n	8002848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	3b01      	subs	r3, #1
 8002842:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d071      	beq.n	800292c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d068      	beq.n	8002920 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800284e:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800285a:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0ac      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800286a:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002874:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002876:	f7ff fadd 	bl	8001e34 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7ff fad9 	bl	8001e34 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e099      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_OscConfig+0x788>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b6:	0212      	lsls	r2, r2, #8
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0552      	lsls	r2, r2, #21
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0652      	lsls	r2, r2, #25
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d6:	06d2      	lsls	r2, r2, #27
 80028d8:	430a      	orrs	r2, r1
 80028da:	4912      	ldr	r1, [pc, #72]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f8:	f7ff fa9c 	bl	8001e34 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7ff fa98 	bl	8001e34 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e058      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_RCC_OscConfig+0x784>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291e:	e050      	b.n	80029c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04f      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
 8002924:	40021000 	.word	0x40021000
 8002928:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d144      	bne.n	80029c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002950:	f7ff fa70 	bl	8001e34 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7ff fa6c 	bl	8001e34 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e02c      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x7b8>
 8002976:	e024      	b.n	80029c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d01f      	beq.n	80029be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 8002984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff fa53 	bl	8001e34 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7ff fa4f 	bl	8001e34 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	4905      	ldr	r1, [pc, #20]	; (80029cc <HAL_RCC_OscConfig+0x82c>)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x830>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
 80029bc:	e001      	b.n	80029c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	feeefffc 	.word	0xfeeefffc

080029d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e11d      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b90      	ldr	r3, [pc, #576]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b8d      	ldr	r3, [pc, #564]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 020f 	bic.w	r2, r3, #15
 8002a02:	498b      	ldr	r1, [pc, #556]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b89      	ldr	r3, [pc, #548]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e105      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d908      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	497b      	ldr	r1, [pc, #492]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d079      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d11e      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0dc      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a6e:	f000 f9d1 	bl	8002e14 <RCC_GetSysClockFreqFromPLLSource>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4a70      	ldr	r2, [pc, #448]	; (8002c38 <HAL_RCC_ClockConfig+0x264>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d946      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d140      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a86:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8e:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e035      	b.n	8002b08 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa4:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d115      	bne.n	8002adc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b9      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002abc:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0ad      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0a5      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002adc:	f000 f8b4 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d90f      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ae8:	4b52      	ldr	r3, [pc, #328]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002af4:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afc:	4a4d      	ldr	r2, [pc, #308]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b08:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 0203 	bic.w	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4947      	ldr	r1, [pc, #284]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1a:	f7ff f98b 	bl	8001e34 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b22:	f7ff f987 	bl	8001e34 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e077      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b38:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 020c 	and.w	r2, r3, #12
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d1eb      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b50:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b5a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d208      	bcs.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	492b      	ldr	r1, [pc, #172]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d210      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 020f 	bic.w	r2, r3, #15
 8002ba0:	4923      	ldr	r1, [pc, #140]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e036      	b.n	8002c28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4918      	ldr	r1, [pc, #96]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4910      	ldr	r1, [pc, #64]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf8:	f000 f826 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	490c      	ldr	r1, [pc, #48]	; (8002c3c <HAL_RCC_ClockConfig+0x268>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x26c>)
 8002c16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x270>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f8b9 	bl	8001d94 <HAL_InitTick>
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	04c4b400 	.word	0x04c4b400
 8002c3c:	08005e58 	.word	0x08005e58
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c60:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x34>
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d121      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d11e      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c7c:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c88:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e005      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e004      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d134      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0xa6>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d003      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8002cec:	e005      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf0:	617b      	str	r3, [r7, #20]
      break;
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf6:	617b      	str	r3, [r7, #20]
      break;
 8002cf8:	e002      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	fb03 f202 	mul.w	r2, r3, r2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	0e5b      	lsrs	r3, r3, #25
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	3301      	adds	r3, #1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d40:	69bb      	ldr	r3, [r7, #24]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08005e68 	.word	0x08005e68
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d78:	f7ff f94e 	bl	8002018 <HAL_PWREx_GetVoltageRange>
 8002d7c:	6178      	str	r0, [r7, #20]
 8002d7e:	e014      	b.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d98:	f7ff f93e 	bl	8002018 <HAL_PWREx_GetVoltageRange>
 8002d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db0:	d10b      	bne.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d913      	bls.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2ba0      	cmp	r3, #160	; 0xa0
 8002dbc:	d902      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e00d      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	e00a      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8002dce:	d902      	bls.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e004      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d101      	bne.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ddc:	2301      	movs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 020f 	bic.w	r2, r3, #15
 8002de8:	4909      	ldr	r1, [pc, #36]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40022000 	.word	0x40022000

08002e14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d00b      	beq.n	8002e42 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d825      	bhi.n	8002e7c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d008      	beq.n	8002e48 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d11f      	bne.n	8002e7c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e3e:	613b      	str	r3, [r7, #16]
    break;
 8002e40:	e01f      	b.n	8002e82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e44:	613b      	str	r3, [r7, #16]
    break;
 8002e46:	e01c      	b.n	8002e82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e54:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e005      	b.n	8002e70 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e70:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	613b      	str	r3, [r7, #16]
    break;
 8002e7a:	e002      	b.n	8002e82 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
    break;
 8002e80:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	fb03 f202 	mul.w	r2, r3, r2
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0e5b      	lsrs	r3, r3, #25
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ec2:	683b      	ldr	r3, [r7, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	08005e68 	.word	0x08005e68

08002ee0 <arm_mult_f32>:
 8002ee0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002ee4:	b4f0      	push	{r4, r5, r6, r7}
 8002ee6:	d033      	beq.n	8002f50 <arm_mult_f32+0x70>
 8002ee8:	f100 0610 	add.w	r6, r0, #16
 8002eec:	f101 0510 	add.w	r5, r1, #16
 8002ef0:	f102 0410 	add.w	r4, r2, #16
 8002ef4:	4667      	mov	r7, ip
 8002ef6:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002efa:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f02:	3f01      	subs	r7, #1
 8002f04:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002f08:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002f0c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f14:	f106 0610 	add.w	r6, r6, #16
 8002f18:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002f1c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002f20:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8002f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f28:	f105 0510 	add.w	r5, r5, #16
 8002f2c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002f30:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8002f34:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3c:	f104 0410 	add.w	r4, r4, #16
 8002f40:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8002f44:	d1d7      	bne.n	8002ef6 <arm_mult_f32+0x16>
 8002f46:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002f4a:	4420      	add	r0, r4
 8002f4c:	4421      	add	r1, r4
 8002f4e:	4422      	add	r2, r4
 8002f50:	f013 0303 	ands.w	r3, r3, #3
 8002f54:	d01b      	beq.n	8002f8e <arm_mult_f32+0xae>
 8002f56:	edd1 7a00 	vldr	s15, [r1]
 8002f5a:	ed90 7a00 	vldr	s14, [r0]
 8002f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f62:	3b01      	subs	r3, #1
 8002f64:	edc2 7a00 	vstr	s15, [r2]
 8002f68:	d011      	beq.n	8002f8e <arm_mult_f32+0xae>
 8002f6a:	edd0 7a01 	vldr	s15, [r0, #4]
 8002f6e:	ed91 7a01 	vldr	s14, [r1, #4]
 8002f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	edc2 7a01 	vstr	s15, [r2, #4]
 8002f7c:	d007      	beq.n	8002f8e <arm_mult_f32+0xae>
 8002f7e:	edd0 7a02 	vldr	s15, [r0, #8]
 8002f82:	ed91 7a02 	vldr	s14, [r1, #8]
 8002f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8a:	edc2 7a02 	vstr	s15, [r2, #8]
 8002f8e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <arm_add_f32>:
 8002f94:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002f98:	b4f0      	push	{r4, r5, r6, r7}
 8002f9a:	d033      	beq.n	8003004 <arm_add_f32+0x70>
 8002f9c:	f100 0610 	add.w	r6, r0, #16
 8002fa0:	f101 0510 	add.w	r5, r1, #16
 8002fa4:	f102 0410 	add.w	r4, r2, #16
 8002fa8:	4667      	mov	r7, ip
 8002faa:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002fae:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb6:	3f01      	subs	r7, #1
 8002fb8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002fbc:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002fc0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc8:	f106 0610 	add.w	r6, r6, #16
 8002fcc:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002fd0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002fd4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8002fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fdc:	f105 0510 	add.w	r5, r5, #16
 8002fe0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002fe4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8002fe8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ff0:	f104 0410 	add.w	r4, r4, #16
 8002ff4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8002ff8:	d1d7      	bne.n	8002faa <arm_add_f32+0x16>
 8002ffa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002ffe:	4420      	add	r0, r4
 8003000:	4421      	add	r1, r4
 8003002:	4422      	add	r2, r4
 8003004:	f013 0303 	ands.w	r3, r3, #3
 8003008:	d01b      	beq.n	8003042 <arm_add_f32+0xae>
 800300a:	edd1 7a00 	vldr	s15, [r1]
 800300e:	ed90 7a00 	vldr	s14, [r0]
 8003012:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003016:	3b01      	subs	r3, #1
 8003018:	edc2 7a00 	vstr	s15, [r2]
 800301c:	d011      	beq.n	8003042 <arm_add_f32+0xae>
 800301e:	edd0 7a01 	vldr	s15, [r0, #4]
 8003022:	ed91 7a01 	vldr	s14, [r1, #4]
 8003026:	ee77 7a87 	vadd.f32	s15, s15, s14
 800302a:	2b01      	cmp	r3, #1
 800302c:	edc2 7a01 	vstr	s15, [r2, #4]
 8003030:	d007      	beq.n	8003042 <arm_add_f32+0xae>
 8003032:	edd0 7a02 	vldr	s15, [r0, #8]
 8003036:	ed91 7a02 	vldr	s14, [r1, #8]
 800303a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800303e:	edc2 7a02 	vstr	s15, [r2, #8]
 8003042:	bcf0      	pop	{r4, r5, r6, r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <__errno>:
 8003048:	4b01      	ldr	r3, [pc, #4]	; (8003050 <__errno+0x8>)
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	2000000c 	.word	0x2000000c

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4d0d      	ldr	r5, [pc, #52]	; (800308c <__libc_init_array+0x38>)
 8003058:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305a:	1b64      	subs	r4, r4, r5
 800305c:	10a4      	asrs	r4, r4, #2
 800305e:	2600      	movs	r6, #0
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	4d0b      	ldr	r5, [pc, #44]	; (8003094 <__libc_init_array+0x40>)
 8003066:	4c0c      	ldr	r4, [pc, #48]	; (8003098 <__libc_init_array+0x44>)
 8003068:	f002 fe16 	bl	8005c98 <_init>
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	2600      	movs	r6, #0
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f855 3b04 	ldr.w	r3, [r5], #4
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f855 3b04 	ldr.w	r3, [r5], #4
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	08006274 	.word	0x08006274
 8003090:	08006274 	.word	0x08006274
 8003094:	08006274 	.word	0x08006274
 8003098:	08006278 	.word	0x08006278

0800309c <memcpy>:
 800309c:	440a      	add	r2, r1
 800309e:	4291      	cmp	r1, r2
 80030a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80030a4:	d100      	bne.n	80030a8 <memcpy+0xc>
 80030a6:	4770      	bx	lr
 80030a8:	b510      	push	{r4, lr}
 80030aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030b2:	4291      	cmp	r1, r2
 80030b4:	d1f9      	bne.n	80030aa <memcpy+0xe>
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <memset>:
 80030b8:	4402      	add	r2, r0
 80030ba:	4603      	mov	r3, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <__cvt>:
 80030c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030cc:	ec55 4b10 	vmov	r4, r5, d0
 80030d0:	2d00      	cmp	r5, #0
 80030d2:	460e      	mov	r6, r1
 80030d4:	4619      	mov	r1, r3
 80030d6:	462b      	mov	r3, r5
 80030d8:	bfbb      	ittet	lt
 80030da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80030de:	461d      	movlt	r5, r3
 80030e0:	2300      	movge	r3, #0
 80030e2:	232d      	movlt	r3, #45	; 0x2d
 80030e4:	700b      	strb	r3, [r1, #0]
 80030e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030ec:	4691      	mov	r9, r2
 80030ee:	f023 0820 	bic.w	r8, r3, #32
 80030f2:	bfbc      	itt	lt
 80030f4:	4622      	movlt	r2, r4
 80030f6:	4614      	movlt	r4, r2
 80030f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030fc:	d005      	beq.n	800310a <__cvt+0x42>
 80030fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003102:	d100      	bne.n	8003106 <__cvt+0x3e>
 8003104:	3601      	adds	r6, #1
 8003106:	2102      	movs	r1, #2
 8003108:	e000      	b.n	800310c <__cvt+0x44>
 800310a:	2103      	movs	r1, #3
 800310c:	ab03      	add	r3, sp, #12
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	ab02      	add	r3, sp, #8
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	ec45 4b10 	vmov	d0, r4, r5
 8003118:	4653      	mov	r3, sl
 800311a:	4632      	mov	r2, r6
 800311c:	f000 fccc 	bl	8003ab8 <_dtoa_r>
 8003120:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003124:	4607      	mov	r7, r0
 8003126:	d102      	bne.n	800312e <__cvt+0x66>
 8003128:	f019 0f01 	tst.w	r9, #1
 800312c:	d022      	beq.n	8003174 <__cvt+0xac>
 800312e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003132:	eb07 0906 	add.w	r9, r7, r6
 8003136:	d110      	bne.n	800315a <__cvt+0x92>
 8003138:	783b      	ldrb	r3, [r7, #0]
 800313a:	2b30      	cmp	r3, #48	; 0x30
 800313c:	d10a      	bne.n	8003154 <__cvt+0x8c>
 800313e:	2200      	movs	r2, #0
 8003140:	2300      	movs	r3, #0
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd fd17 	bl	8000b78 <__aeabi_dcmpeq>
 800314a:	b918      	cbnz	r0, 8003154 <__cvt+0x8c>
 800314c:	f1c6 0601 	rsb	r6, r6, #1
 8003150:	f8ca 6000 	str.w	r6, [sl]
 8003154:	f8da 3000 	ldr.w	r3, [sl]
 8003158:	4499      	add	r9, r3
 800315a:	2200      	movs	r2, #0
 800315c:	2300      	movs	r3, #0
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
 8003162:	f7fd fd09 	bl	8000b78 <__aeabi_dcmpeq>
 8003166:	b108      	cbz	r0, 800316c <__cvt+0xa4>
 8003168:	f8cd 900c 	str.w	r9, [sp, #12]
 800316c:	2230      	movs	r2, #48	; 0x30
 800316e:	9b03      	ldr	r3, [sp, #12]
 8003170:	454b      	cmp	r3, r9
 8003172:	d307      	bcc.n	8003184 <__cvt+0xbc>
 8003174:	9b03      	ldr	r3, [sp, #12]
 8003176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003178:	1bdb      	subs	r3, r3, r7
 800317a:	4638      	mov	r0, r7
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	b004      	add	sp, #16
 8003180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003184:	1c59      	adds	r1, r3, #1
 8003186:	9103      	str	r1, [sp, #12]
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e7f0      	b.n	800316e <__cvt+0xa6>

0800318c <__exponent>:
 800318c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800318e:	4603      	mov	r3, r0
 8003190:	2900      	cmp	r1, #0
 8003192:	bfb8      	it	lt
 8003194:	4249      	neglt	r1, r1
 8003196:	f803 2b02 	strb.w	r2, [r3], #2
 800319a:	bfb4      	ite	lt
 800319c:	222d      	movlt	r2, #45	; 0x2d
 800319e:	222b      	movge	r2, #43	; 0x2b
 80031a0:	2909      	cmp	r1, #9
 80031a2:	7042      	strb	r2, [r0, #1]
 80031a4:	dd2a      	ble.n	80031fc <__exponent+0x70>
 80031a6:	f10d 0407 	add.w	r4, sp, #7
 80031aa:	46a4      	mov	ip, r4
 80031ac:	270a      	movs	r7, #10
 80031ae:	46a6      	mov	lr, r4
 80031b0:	460a      	mov	r2, r1
 80031b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80031b6:	fb07 1516 	mls	r5, r7, r6, r1
 80031ba:	3530      	adds	r5, #48	; 0x30
 80031bc:	2a63      	cmp	r2, #99	; 0x63
 80031be:	f104 34ff 	add.w	r4, r4, #4294967295
 80031c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031c6:	4631      	mov	r1, r6
 80031c8:	dcf1      	bgt.n	80031ae <__exponent+0x22>
 80031ca:	3130      	adds	r1, #48	; 0x30
 80031cc:	f1ae 0502 	sub.w	r5, lr, #2
 80031d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031d4:	1c44      	adds	r4, r0, #1
 80031d6:	4629      	mov	r1, r5
 80031d8:	4561      	cmp	r1, ip
 80031da:	d30a      	bcc.n	80031f2 <__exponent+0x66>
 80031dc:	f10d 0209 	add.w	r2, sp, #9
 80031e0:	eba2 020e 	sub.w	r2, r2, lr
 80031e4:	4565      	cmp	r5, ip
 80031e6:	bf88      	it	hi
 80031e8:	2200      	movhi	r2, #0
 80031ea:	4413      	add	r3, r2
 80031ec:	1a18      	subs	r0, r3, r0
 80031ee:	b003      	add	sp, #12
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80031fa:	e7ed      	b.n	80031d8 <__exponent+0x4c>
 80031fc:	2330      	movs	r3, #48	; 0x30
 80031fe:	3130      	adds	r1, #48	; 0x30
 8003200:	7083      	strb	r3, [r0, #2]
 8003202:	70c1      	strb	r1, [r0, #3]
 8003204:	1d03      	adds	r3, r0, #4
 8003206:	e7f1      	b.n	80031ec <__exponent+0x60>

08003208 <_printf_float>:
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	ed2d 8b02 	vpush	{d8}
 8003210:	b08d      	sub	sp, #52	; 0x34
 8003212:	460c      	mov	r4, r1
 8003214:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003218:	4616      	mov	r6, r2
 800321a:	461f      	mov	r7, r3
 800321c:	4605      	mov	r5, r0
 800321e:	f001 fa39 	bl	8004694 <_localeconv_r>
 8003222:	f8d0 a000 	ldr.w	sl, [r0]
 8003226:	4650      	mov	r0, sl
 8003228:	f7fd f824 	bl	8000274 <strlen>
 800322c:	2300      	movs	r3, #0
 800322e:	930a      	str	r3, [sp, #40]	; 0x28
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	9305      	str	r3, [sp, #20]
 8003234:	f8d8 3000 	ldr.w	r3, [r8]
 8003238:	f894 b018 	ldrb.w	fp, [r4, #24]
 800323c:	3307      	adds	r3, #7
 800323e:	f023 0307 	bic.w	r3, r3, #7
 8003242:	f103 0208 	add.w	r2, r3, #8
 8003246:	f8c8 2000 	str.w	r2, [r8]
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003252:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800325a:	9307      	str	r3, [sp, #28]
 800325c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003260:	ee08 0a10 	vmov	s16, r0
 8003264:	4b9f      	ldr	r3, [pc, #636]	; (80034e4 <_printf_float+0x2dc>)
 8003266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	f7fd fcb5 	bl	8000bdc <__aeabi_dcmpun>
 8003272:	bb88      	cbnz	r0, 80032d8 <_printf_float+0xd0>
 8003274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003278:	4b9a      	ldr	r3, [pc, #616]	; (80034e4 <_printf_float+0x2dc>)
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	f7fd fc8f 	bl	8000ba0 <__aeabi_dcmple>
 8003282:	bb48      	cbnz	r0, 80032d8 <_printf_float+0xd0>
 8003284:	2200      	movs	r2, #0
 8003286:	2300      	movs	r3, #0
 8003288:	4640      	mov	r0, r8
 800328a:	4649      	mov	r1, r9
 800328c:	f7fd fc7e 	bl	8000b8c <__aeabi_dcmplt>
 8003290:	b110      	cbz	r0, 8003298 <_printf_float+0x90>
 8003292:	232d      	movs	r3, #45	; 0x2d
 8003294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003298:	4b93      	ldr	r3, [pc, #588]	; (80034e8 <_printf_float+0x2e0>)
 800329a:	4894      	ldr	r0, [pc, #592]	; (80034ec <_printf_float+0x2e4>)
 800329c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80032a0:	bf94      	ite	ls
 80032a2:	4698      	movls	r8, r3
 80032a4:	4680      	movhi	r8, r0
 80032a6:	2303      	movs	r3, #3
 80032a8:	6123      	str	r3, [r4, #16]
 80032aa:	9b05      	ldr	r3, [sp, #20]
 80032ac:	f023 0204 	bic.w	r2, r3, #4
 80032b0:	6022      	str	r2, [r4, #0]
 80032b2:	f04f 0900 	mov.w	r9, #0
 80032b6:	9700      	str	r7, [sp, #0]
 80032b8:	4633      	mov	r3, r6
 80032ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80032bc:	4621      	mov	r1, r4
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f9d8 	bl	8003674 <_printf_common>
 80032c4:	3001      	adds	r0, #1
 80032c6:	f040 8090 	bne.w	80033ea <_printf_float+0x1e2>
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
 80032ce:	b00d      	add	sp, #52	; 0x34
 80032d0:	ecbd 8b02 	vpop	{d8}
 80032d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	4640      	mov	r0, r8
 80032de:	4649      	mov	r1, r9
 80032e0:	f7fd fc7c 	bl	8000bdc <__aeabi_dcmpun>
 80032e4:	b140      	cbz	r0, 80032f8 <_printf_float+0xf0>
 80032e6:	464b      	mov	r3, r9
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bfbc      	itt	lt
 80032ec:	232d      	movlt	r3, #45	; 0x2d
 80032ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032f2:	487f      	ldr	r0, [pc, #508]	; (80034f0 <_printf_float+0x2e8>)
 80032f4:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <_printf_float+0x2ec>)
 80032f6:	e7d1      	b.n	800329c <_printf_float+0x94>
 80032f8:	6863      	ldr	r3, [r4, #4]
 80032fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80032fe:	9206      	str	r2, [sp, #24]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	d13f      	bne.n	8003384 <_printf_float+0x17c>
 8003304:	2306      	movs	r3, #6
 8003306:	6063      	str	r3, [r4, #4]
 8003308:	9b05      	ldr	r3, [sp, #20]
 800330a:	6861      	ldr	r1, [r4, #4]
 800330c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003310:	2300      	movs	r3, #0
 8003312:	9303      	str	r3, [sp, #12]
 8003314:	ab0a      	add	r3, sp, #40	; 0x28
 8003316:	e9cd b301 	strd	fp, r3, [sp, #4]
 800331a:	ab09      	add	r3, sp, #36	; 0x24
 800331c:	ec49 8b10 	vmov	d0, r8, r9
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6022      	str	r2, [r4, #0]
 8003324:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff fecd 	bl	80030c8 <__cvt>
 800332e:	9b06      	ldr	r3, [sp, #24]
 8003330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003332:	2b47      	cmp	r3, #71	; 0x47
 8003334:	4680      	mov	r8, r0
 8003336:	d108      	bne.n	800334a <_printf_float+0x142>
 8003338:	1cc8      	adds	r0, r1, #3
 800333a:	db02      	blt.n	8003342 <_printf_float+0x13a>
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	4299      	cmp	r1, r3
 8003340:	dd41      	ble.n	80033c6 <_printf_float+0x1be>
 8003342:	f1ab 0b02 	sub.w	fp, fp, #2
 8003346:	fa5f fb8b 	uxtb.w	fp, fp
 800334a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800334e:	d820      	bhi.n	8003392 <_printf_float+0x18a>
 8003350:	3901      	subs	r1, #1
 8003352:	465a      	mov	r2, fp
 8003354:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003358:	9109      	str	r1, [sp, #36]	; 0x24
 800335a:	f7ff ff17 	bl	800318c <__exponent>
 800335e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003360:	1813      	adds	r3, r2, r0
 8003362:	2a01      	cmp	r2, #1
 8003364:	4681      	mov	r9, r0
 8003366:	6123      	str	r3, [r4, #16]
 8003368:	dc02      	bgt.n	8003370 <_printf_float+0x168>
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	07d2      	lsls	r2, r2, #31
 800336e:	d501      	bpl.n	8003374 <_printf_float+0x16c>
 8003370:	3301      	adds	r3, #1
 8003372:	6123      	str	r3, [r4, #16]
 8003374:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003378:	2b00      	cmp	r3, #0
 800337a:	d09c      	beq.n	80032b6 <_printf_float+0xae>
 800337c:	232d      	movs	r3, #45	; 0x2d
 800337e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003382:	e798      	b.n	80032b6 <_printf_float+0xae>
 8003384:	9a06      	ldr	r2, [sp, #24]
 8003386:	2a47      	cmp	r2, #71	; 0x47
 8003388:	d1be      	bne.n	8003308 <_printf_float+0x100>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1bc      	bne.n	8003308 <_printf_float+0x100>
 800338e:	2301      	movs	r3, #1
 8003390:	e7b9      	b.n	8003306 <_printf_float+0xfe>
 8003392:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003396:	d118      	bne.n	80033ca <_printf_float+0x1c2>
 8003398:	2900      	cmp	r1, #0
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	dd0b      	ble.n	80033b6 <_printf_float+0x1ae>
 800339e:	6121      	str	r1, [r4, #16]
 80033a0:	b913      	cbnz	r3, 80033a8 <_printf_float+0x1a0>
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	07d0      	lsls	r0, r2, #31
 80033a6:	d502      	bpl.n	80033ae <_printf_float+0x1a6>
 80033a8:	3301      	adds	r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	6123      	str	r3, [r4, #16]
 80033ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80033b0:	f04f 0900 	mov.w	r9, #0
 80033b4:	e7de      	b.n	8003374 <_printf_float+0x16c>
 80033b6:	b913      	cbnz	r3, 80033be <_printf_float+0x1b6>
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	07d2      	lsls	r2, r2, #31
 80033bc:	d501      	bpl.n	80033c2 <_printf_float+0x1ba>
 80033be:	3302      	adds	r3, #2
 80033c0:	e7f4      	b.n	80033ac <_printf_float+0x1a4>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e7f2      	b.n	80033ac <_printf_float+0x1a4>
 80033c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80033ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033cc:	4299      	cmp	r1, r3
 80033ce:	db05      	blt.n	80033dc <_printf_float+0x1d4>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	6121      	str	r1, [r4, #16]
 80033d4:	07d8      	lsls	r0, r3, #31
 80033d6:	d5ea      	bpl.n	80033ae <_printf_float+0x1a6>
 80033d8:	1c4b      	adds	r3, r1, #1
 80033da:	e7e7      	b.n	80033ac <_printf_float+0x1a4>
 80033dc:	2900      	cmp	r1, #0
 80033de:	bfd4      	ite	le
 80033e0:	f1c1 0202 	rsble	r2, r1, #2
 80033e4:	2201      	movgt	r2, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	e7e0      	b.n	80033ac <_printf_float+0x1a4>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	055a      	lsls	r2, r3, #21
 80033ee:	d407      	bmi.n	8003400 <_printf_float+0x1f8>
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	4642      	mov	r2, r8
 80033f4:	4631      	mov	r1, r6
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b8      	blx	r7
 80033fa:	3001      	adds	r0, #1
 80033fc:	d12c      	bne.n	8003458 <_printf_float+0x250>
 80033fe:	e764      	b.n	80032ca <_printf_float+0xc2>
 8003400:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003404:	f240 80e0 	bls.w	80035c8 <_printf_float+0x3c0>
 8003408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800340c:	2200      	movs	r2, #0
 800340e:	2300      	movs	r3, #0
 8003410:	f7fd fbb2 	bl	8000b78 <__aeabi_dcmpeq>
 8003414:	2800      	cmp	r0, #0
 8003416:	d034      	beq.n	8003482 <_printf_float+0x27a>
 8003418:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <_printf_float+0x2f0>)
 800341a:	2301      	movs	r3, #1
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	f43f af51 	beq.w	80032ca <_printf_float+0xc2>
 8003428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800342c:	429a      	cmp	r2, r3
 800342e:	db02      	blt.n	8003436 <_printf_float+0x22e>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	07d8      	lsls	r0, r3, #31
 8003434:	d510      	bpl.n	8003458 <_printf_float+0x250>
 8003436:	ee18 3a10 	vmov	r3, s16
 800343a:	4652      	mov	r2, sl
 800343c:	4631      	mov	r1, r6
 800343e:	4628      	mov	r0, r5
 8003440:	47b8      	blx	r7
 8003442:	3001      	adds	r0, #1
 8003444:	f43f af41 	beq.w	80032ca <_printf_float+0xc2>
 8003448:	f04f 0800 	mov.w	r8, #0
 800344c:	f104 091a 	add.w	r9, r4, #26
 8003450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	4543      	cmp	r3, r8
 8003456:	dc09      	bgt.n	800346c <_printf_float+0x264>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	079b      	lsls	r3, r3, #30
 800345c:	f100 8105 	bmi.w	800366a <_printf_float+0x462>
 8003460:	68e0      	ldr	r0, [r4, #12]
 8003462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003464:	4298      	cmp	r0, r3
 8003466:	bfb8      	it	lt
 8003468:	4618      	movlt	r0, r3
 800346a:	e730      	b.n	80032ce <_printf_float+0xc6>
 800346c:	2301      	movs	r3, #1
 800346e:	464a      	mov	r2, r9
 8003470:	4631      	mov	r1, r6
 8003472:	4628      	mov	r0, r5
 8003474:	47b8      	blx	r7
 8003476:	3001      	adds	r0, #1
 8003478:	f43f af27 	beq.w	80032ca <_printf_float+0xc2>
 800347c:	f108 0801 	add.w	r8, r8, #1
 8003480:	e7e6      	b.n	8003450 <_printf_float+0x248>
 8003482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	dc39      	bgt.n	80034fc <_printf_float+0x2f4>
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <_printf_float+0x2f0>)
 800348a:	2301      	movs	r3, #1
 800348c:	4631      	mov	r1, r6
 800348e:	4628      	mov	r0, r5
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	f43f af19 	beq.w	80032ca <_printf_float+0xc2>
 8003498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800349c:	4313      	orrs	r3, r2
 800349e:	d102      	bne.n	80034a6 <_printf_float+0x29e>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	07d9      	lsls	r1, r3, #31
 80034a4:	d5d8      	bpl.n	8003458 <_printf_float+0x250>
 80034a6:	ee18 3a10 	vmov	r3, s16
 80034aa:	4652      	mov	r2, sl
 80034ac:	4631      	mov	r1, r6
 80034ae:	4628      	mov	r0, r5
 80034b0:	47b8      	blx	r7
 80034b2:	3001      	adds	r0, #1
 80034b4:	f43f af09 	beq.w	80032ca <_printf_float+0xc2>
 80034b8:	f04f 0900 	mov.w	r9, #0
 80034bc:	f104 0a1a 	add.w	sl, r4, #26
 80034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c2:	425b      	negs	r3, r3
 80034c4:	454b      	cmp	r3, r9
 80034c6:	dc01      	bgt.n	80034cc <_printf_float+0x2c4>
 80034c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ca:	e792      	b.n	80033f2 <_printf_float+0x1ea>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4652      	mov	r2, sl
 80034d0:	4631      	mov	r1, r6
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b8      	blx	r7
 80034d6:	3001      	adds	r0, #1
 80034d8:	f43f aef7 	beq.w	80032ca <_printf_float+0xc2>
 80034dc:	f109 0901 	add.w	r9, r9, #1
 80034e0:	e7ee      	b.n	80034c0 <_printf_float+0x2b8>
 80034e2:	bf00      	nop
 80034e4:	7fefffff 	.word	0x7fefffff
 80034e8:	08005e9c 	.word	0x08005e9c
 80034ec:	08005ea0 	.word	0x08005ea0
 80034f0:	08005ea8 	.word	0x08005ea8
 80034f4:	08005ea4 	.word	0x08005ea4
 80034f8:	08005eac 	.word	0x08005eac
 80034fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003500:	429a      	cmp	r2, r3
 8003502:	bfa8      	it	ge
 8003504:	461a      	movge	r2, r3
 8003506:	2a00      	cmp	r2, #0
 8003508:	4691      	mov	r9, r2
 800350a:	dc37      	bgt.n	800357c <_printf_float+0x374>
 800350c:	f04f 0b00 	mov.w	fp, #0
 8003510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003514:	f104 021a 	add.w	r2, r4, #26
 8003518:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	eba3 0309 	sub.w	r3, r3, r9
 8003520:	455b      	cmp	r3, fp
 8003522:	dc33      	bgt.n	800358c <_printf_float+0x384>
 8003524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003528:	429a      	cmp	r2, r3
 800352a:	db3b      	blt.n	80035a4 <_printf_float+0x39c>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	07da      	lsls	r2, r3, #31
 8003530:	d438      	bmi.n	80035a4 <_printf_float+0x39c>
 8003532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003534:	9a05      	ldr	r2, [sp, #20]
 8003536:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003538:	1a9a      	subs	r2, r3, r2
 800353a:	eba3 0901 	sub.w	r9, r3, r1
 800353e:	4591      	cmp	r9, r2
 8003540:	bfa8      	it	ge
 8003542:	4691      	movge	r9, r2
 8003544:	f1b9 0f00 	cmp.w	r9, #0
 8003548:	dc35      	bgt.n	80035b6 <_printf_float+0x3ae>
 800354a:	f04f 0800 	mov.w	r8, #0
 800354e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003552:	f104 0a1a 	add.w	sl, r4, #26
 8003556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	eba3 0309 	sub.w	r3, r3, r9
 8003560:	4543      	cmp	r3, r8
 8003562:	f77f af79 	ble.w	8003458 <_printf_float+0x250>
 8003566:	2301      	movs	r3, #1
 8003568:	4652      	mov	r2, sl
 800356a:	4631      	mov	r1, r6
 800356c:	4628      	mov	r0, r5
 800356e:	47b8      	blx	r7
 8003570:	3001      	adds	r0, #1
 8003572:	f43f aeaa 	beq.w	80032ca <_printf_float+0xc2>
 8003576:	f108 0801 	add.w	r8, r8, #1
 800357a:	e7ec      	b.n	8003556 <_printf_float+0x34e>
 800357c:	4613      	mov	r3, r2
 800357e:	4631      	mov	r1, r6
 8003580:	4642      	mov	r2, r8
 8003582:	4628      	mov	r0, r5
 8003584:	47b8      	blx	r7
 8003586:	3001      	adds	r0, #1
 8003588:	d1c0      	bne.n	800350c <_printf_float+0x304>
 800358a:	e69e      	b.n	80032ca <_printf_float+0xc2>
 800358c:	2301      	movs	r3, #1
 800358e:	4631      	mov	r1, r6
 8003590:	4628      	mov	r0, r5
 8003592:	9205      	str	r2, [sp, #20]
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f ae97 	beq.w	80032ca <_printf_float+0xc2>
 800359c:	9a05      	ldr	r2, [sp, #20]
 800359e:	f10b 0b01 	add.w	fp, fp, #1
 80035a2:	e7b9      	b.n	8003518 <_printf_float+0x310>
 80035a4:	ee18 3a10 	vmov	r3, s16
 80035a8:	4652      	mov	r2, sl
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	47b8      	blx	r7
 80035b0:	3001      	adds	r0, #1
 80035b2:	d1be      	bne.n	8003532 <_printf_float+0x32a>
 80035b4:	e689      	b.n	80032ca <_printf_float+0xc2>
 80035b6:	9a05      	ldr	r2, [sp, #20]
 80035b8:	464b      	mov	r3, r9
 80035ba:	4442      	add	r2, r8
 80035bc:	4631      	mov	r1, r6
 80035be:	4628      	mov	r0, r5
 80035c0:	47b8      	blx	r7
 80035c2:	3001      	adds	r0, #1
 80035c4:	d1c1      	bne.n	800354a <_printf_float+0x342>
 80035c6:	e680      	b.n	80032ca <_printf_float+0xc2>
 80035c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035ca:	2a01      	cmp	r2, #1
 80035cc:	dc01      	bgt.n	80035d2 <_printf_float+0x3ca>
 80035ce:	07db      	lsls	r3, r3, #31
 80035d0:	d538      	bpl.n	8003644 <_printf_float+0x43c>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4642      	mov	r2, r8
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f ae74 	beq.w	80032ca <_printf_float+0xc2>
 80035e2:	ee18 3a10 	vmov	r3, s16
 80035e6:	4652      	mov	r2, sl
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f ae6b 	beq.w	80032ca <_printf_float+0xc2>
 80035f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035f8:	2200      	movs	r2, #0
 80035fa:	2300      	movs	r3, #0
 80035fc:	f7fd fabc 	bl	8000b78 <__aeabi_dcmpeq>
 8003600:	b9d8      	cbnz	r0, 800363a <_printf_float+0x432>
 8003602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003604:	f108 0201 	add.w	r2, r8, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	4631      	mov	r1, r6
 800360c:	4628      	mov	r0, r5
 800360e:	47b8      	blx	r7
 8003610:	3001      	adds	r0, #1
 8003612:	d10e      	bne.n	8003632 <_printf_float+0x42a>
 8003614:	e659      	b.n	80032ca <_printf_float+0xc2>
 8003616:	2301      	movs	r3, #1
 8003618:	4652      	mov	r2, sl
 800361a:	4631      	mov	r1, r6
 800361c:	4628      	mov	r0, r5
 800361e:	47b8      	blx	r7
 8003620:	3001      	adds	r0, #1
 8003622:	f43f ae52 	beq.w	80032ca <_printf_float+0xc2>
 8003626:	f108 0801 	add.w	r8, r8, #1
 800362a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	4543      	cmp	r3, r8
 8003630:	dcf1      	bgt.n	8003616 <_printf_float+0x40e>
 8003632:	464b      	mov	r3, r9
 8003634:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003638:	e6dc      	b.n	80033f4 <_printf_float+0x1ec>
 800363a:	f04f 0800 	mov.w	r8, #0
 800363e:	f104 0a1a 	add.w	sl, r4, #26
 8003642:	e7f2      	b.n	800362a <_printf_float+0x422>
 8003644:	2301      	movs	r3, #1
 8003646:	4642      	mov	r2, r8
 8003648:	e7df      	b.n	800360a <_printf_float+0x402>
 800364a:	2301      	movs	r3, #1
 800364c:	464a      	mov	r2, r9
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f ae38 	beq.w	80032ca <_printf_float+0xc2>
 800365a:	f108 0801 	add.w	r8, r8, #1
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003662:	1a5b      	subs	r3, r3, r1
 8003664:	4543      	cmp	r3, r8
 8003666:	dcf0      	bgt.n	800364a <_printf_float+0x442>
 8003668:	e6fa      	b.n	8003460 <_printf_float+0x258>
 800366a:	f04f 0800 	mov.w	r8, #0
 800366e:	f104 0919 	add.w	r9, r4, #25
 8003672:	e7f4      	b.n	800365e <_printf_float+0x456>

08003674 <_printf_common>:
 8003674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003678:	4616      	mov	r6, r2
 800367a:	4699      	mov	r9, r3
 800367c:	688a      	ldr	r2, [r1, #8]
 800367e:	690b      	ldr	r3, [r1, #16]
 8003680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003684:	4293      	cmp	r3, r2
 8003686:	bfb8      	it	lt
 8003688:	4613      	movlt	r3, r2
 800368a:	6033      	str	r3, [r6, #0]
 800368c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003690:	4607      	mov	r7, r0
 8003692:	460c      	mov	r4, r1
 8003694:	b10a      	cbz	r2, 800369a <_printf_common+0x26>
 8003696:	3301      	adds	r3, #1
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	0699      	lsls	r1, r3, #26
 800369e:	bf42      	ittt	mi
 80036a0:	6833      	ldrmi	r3, [r6, #0]
 80036a2:	3302      	addmi	r3, #2
 80036a4:	6033      	strmi	r3, [r6, #0]
 80036a6:	6825      	ldr	r5, [r4, #0]
 80036a8:	f015 0506 	ands.w	r5, r5, #6
 80036ac:	d106      	bne.n	80036bc <_printf_common+0x48>
 80036ae:	f104 0a19 	add.w	sl, r4, #25
 80036b2:	68e3      	ldr	r3, [r4, #12]
 80036b4:	6832      	ldr	r2, [r6, #0]
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	42ab      	cmp	r3, r5
 80036ba:	dc26      	bgt.n	800370a <_printf_common+0x96>
 80036bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036c0:	1e13      	subs	r3, r2, #0
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	bf18      	it	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	0692      	lsls	r2, r2, #26
 80036ca:	d42b      	bmi.n	8003724 <_printf_common+0xb0>
 80036cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036d0:	4649      	mov	r1, r9
 80036d2:	4638      	mov	r0, r7
 80036d4:	47c0      	blx	r8
 80036d6:	3001      	adds	r0, #1
 80036d8:	d01e      	beq.n	8003718 <_printf_common+0xa4>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	68e5      	ldr	r5, [r4, #12]
 80036de:	6832      	ldr	r2, [r6, #0]
 80036e0:	f003 0306 	and.w	r3, r3, #6
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	bf08      	it	eq
 80036e8:	1aad      	subeq	r5, r5, r2
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	6922      	ldr	r2, [r4, #16]
 80036ee:	bf0c      	ite	eq
 80036f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036f4:	2500      	movne	r5, #0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	bfc4      	itt	gt
 80036fa:	1a9b      	subgt	r3, r3, r2
 80036fc:	18ed      	addgt	r5, r5, r3
 80036fe:	2600      	movs	r6, #0
 8003700:	341a      	adds	r4, #26
 8003702:	42b5      	cmp	r5, r6
 8003704:	d11a      	bne.n	800373c <_printf_common+0xc8>
 8003706:	2000      	movs	r0, #0
 8003708:	e008      	b.n	800371c <_printf_common+0xa8>
 800370a:	2301      	movs	r3, #1
 800370c:	4652      	mov	r2, sl
 800370e:	4649      	mov	r1, r9
 8003710:	4638      	mov	r0, r7
 8003712:	47c0      	blx	r8
 8003714:	3001      	adds	r0, #1
 8003716:	d103      	bne.n	8003720 <_printf_common+0xac>
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003720:	3501      	adds	r5, #1
 8003722:	e7c6      	b.n	80036b2 <_printf_common+0x3e>
 8003724:	18e1      	adds	r1, r4, r3
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	2030      	movs	r0, #48	; 0x30
 800372a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800372e:	4422      	add	r2, r4
 8003730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003738:	3302      	adds	r3, #2
 800373a:	e7c7      	b.n	80036cc <_printf_common+0x58>
 800373c:	2301      	movs	r3, #1
 800373e:	4622      	mov	r2, r4
 8003740:	4649      	mov	r1, r9
 8003742:	4638      	mov	r0, r7
 8003744:	47c0      	blx	r8
 8003746:	3001      	adds	r0, #1
 8003748:	d0e6      	beq.n	8003718 <_printf_common+0xa4>
 800374a:	3601      	adds	r6, #1
 800374c:	e7d9      	b.n	8003702 <_printf_common+0x8e>
	...

08003750 <_printf_i>:
 8003750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003754:	7e0f      	ldrb	r7, [r1, #24]
 8003756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003758:	2f78      	cmp	r7, #120	; 0x78
 800375a:	4691      	mov	r9, r2
 800375c:	4680      	mov	r8, r0
 800375e:	460c      	mov	r4, r1
 8003760:	469a      	mov	sl, r3
 8003762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003766:	d807      	bhi.n	8003778 <_printf_i+0x28>
 8003768:	2f62      	cmp	r7, #98	; 0x62
 800376a:	d80a      	bhi.n	8003782 <_printf_i+0x32>
 800376c:	2f00      	cmp	r7, #0
 800376e:	f000 80d8 	beq.w	8003922 <_printf_i+0x1d2>
 8003772:	2f58      	cmp	r7, #88	; 0x58
 8003774:	f000 80a3 	beq.w	80038be <_printf_i+0x16e>
 8003778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003780:	e03a      	b.n	80037f8 <_printf_i+0xa8>
 8003782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003786:	2b15      	cmp	r3, #21
 8003788:	d8f6      	bhi.n	8003778 <_printf_i+0x28>
 800378a:	a101      	add	r1, pc, #4	; (adr r1, 8003790 <_printf_i+0x40>)
 800378c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003790:	080037e9 	.word	0x080037e9
 8003794:	080037fd 	.word	0x080037fd
 8003798:	08003779 	.word	0x08003779
 800379c:	08003779 	.word	0x08003779
 80037a0:	08003779 	.word	0x08003779
 80037a4:	08003779 	.word	0x08003779
 80037a8:	080037fd 	.word	0x080037fd
 80037ac:	08003779 	.word	0x08003779
 80037b0:	08003779 	.word	0x08003779
 80037b4:	08003779 	.word	0x08003779
 80037b8:	08003779 	.word	0x08003779
 80037bc:	08003909 	.word	0x08003909
 80037c0:	0800382d 	.word	0x0800382d
 80037c4:	080038eb 	.word	0x080038eb
 80037c8:	08003779 	.word	0x08003779
 80037cc:	08003779 	.word	0x08003779
 80037d0:	0800392b 	.word	0x0800392b
 80037d4:	08003779 	.word	0x08003779
 80037d8:	0800382d 	.word	0x0800382d
 80037dc:	08003779 	.word	0x08003779
 80037e0:	08003779 	.word	0x08003779
 80037e4:	080038f3 	.word	0x080038f3
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	602a      	str	r2, [r5, #0]
 80037f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0a3      	b.n	8003944 <_printf_i+0x1f4>
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	6829      	ldr	r1, [r5, #0]
 8003800:	0606      	lsls	r6, r0, #24
 8003802:	f101 0304 	add.w	r3, r1, #4
 8003806:	d50a      	bpl.n	800381e <_printf_i+0xce>
 8003808:	680e      	ldr	r6, [r1, #0]
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	2e00      	cmp	r6, #0
 800380e:	da03      	bge.n	8003818 <_printf_i+0xc8>
 8003810:	232d      	movs	r3, #45	; 0x2d
 8003812:	4276      	negs	r6, r6
 8003814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003818:	485e      	ldr	r0, [pc, #376]	; (8003994 <_printf_i+0x244>)
 800381a:	230a      	movs	r3, #10
 800381c:	e019      	b.n	8003852 <_printf_i+0x102>
 800381e:	680e      	ldr	r6, [r1, #0]
 8003820:	602b      	str	r3, [r5, #0]
 8003822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003826:	bf18      	it	ne
 8003828:	b236      	sxthne	r6, r6
 800382a:	e7ef      	b.n	800380c <_printf_i+0xbc>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	1d19      	adds	r1, r3, #4
 8003832:	6029      	str	r1, [r5, #0]
 8003834:	0601      	lsls	r1, r0, #24
 8003836:	d501      	bpl.n	800383c <_printf_i+0xec>
 8003838:	681e      	ldr	r6, [r3, #0]
 800383a:	e002      	b.n	8003842 <_printf_i+0xf2>
 800383c:	0646      	lsls	r6, r0, #25
 800383e:	d5fb      	bpl.n	8003838 <_printf_i+0xe8>
 8003840:	881e      	ldrh	r6, [r3, #0]
 8003842:	4854      	ldr	r0, [pc, #336]	; (8003994 <_printf_i+0x244>)
 8003844:	2f6f      	cmp	r7, #111	; 0x6f
 8003846:	bf0c      	ite	eq
 8003848:	2308      	moveq	r3, #8
 800384a:	230a      	movne	r3, #10
 800384c:	2100      	movs	r1, #0
 800384e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003852:	6865      	ldr	r5, [r4, #4]
 8003854:	60a5      	str	r5, [r4, #8]
 8003856:	2d00      	cmp	r5, #0
 8003858:	bfa2      	ittt	ge
 800385a:	6821      	ldrge	r1, [r4, #0]
 800385c:	f021 0104 	bicge.w	r1, r1, #4
 8003860:	6021      	strge	r1, [r4, #0]
 8003862:	b90e      	cbnz	r6, 8003868 <_printf_i+0x118>
 8003864:	2d00      	cmp	r5, #0
 8003866:	d04d      	beq.n	8003904 <_printf_i+0x1b4>
 8003868:	4615      	mov	r5, r2
 800386a:	fbb6 f1f3 	udiv	r1, r6, r3
 800386e:	fb03 6711 	mls	r7, r3, r1, r6
 8003872:	5dc7      	ldrb	r7, [r0, r7]
 8003874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003878:	4637      	mov	r7, r6
 800387a:	42bb      	cmp	r3, r7
 800387c:	460e      	mov	r6, r1
 800387e:	d9f4      	bls.n	800386a <_printf_i+0x11a>
 8003880:	2b08      	cmp	r3, #8
 8003882:	d10b      	bne.n	800389c <_printf_i+0x14c>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	07de      	lsls	r6, r3, #31
 8003888:	d508      	bpl.n	800389c <_printf_i+0x14c>
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	6861      	ldr	r1, [r4, #4]
 800388e:	4299      	cmp	r1, r3
 8003890:	bfde      	ittt	le
 8003892:	2330      	movle	r3, #48	; 0x30
 8003894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800389c:	1b52      	subs	r2, r2, r5
 800389e:	6122      	str	r2, [r4, #16]
 80038a0:	f8cd a000 	str.w	sl, [sp]
 80038a4:	464b      	mov	r3, r9
 80038a6:	aa03      	add	r2, sp, #12
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f7ff fee2 	bl	8003674 <_printf_common>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d14c      	bne.n	800394e <_printf_i+0x1fe>
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	b004      	add	sp, #16
 80038ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038be:	4835      	ldr	r0, [pc, #212]	; (8003994 <_printf_i+0x244>)
 80038c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038c4:	6829      	ldr	r1, [r5, #0]
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80038cc:	6029      	str	r1, [r5, #0]
 80038ce:	061d      	lsls	r5, r3, #24
 80038d0:	d514      	bpl.n	80038fc <_printf_i+0x1ac>
 80038d2:	07df      	lsls	r7, r3, #31
 80038d4:	bf44      	itt	mi
 80038d6:	f043 0320 	orrmi.w	r3, r3, #32
 80038da:	6023      	strmi	r3, [r4, #0]
 80038dc:	b91e      	cbnz	r6, 80038e6 <_printf_i+0x196>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	f023 0320 	bic.w	r3, r3, #32
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	2310      	movs	r3, #16
 80038e8:	e7b0      	b.n	800384c <_printf_i+0xfc>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f043 0320 	orr.w	r3, r3, #32
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	2378      	movs	r3, #120	; 0x78
 80038f4:	4828      	ldr	r0, [pc, #160]	; (8003998 <_printf_i+0x248>)
 80038f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038fa:	e7e3      	b.n	80038c4 <_printf_i+0x174>
 80038fc:	0659      	lsls	r1, r3, #25
 80038fe:	bf48      	it	mi
 8003900:	b2b6      	uxthmi	r6, r6
 8003902:	e7e6      	b.n	80038d2 <_printf_i+0x182>
 8003904:	4615      	mov	r5, r2
 8003906:	e7bb      	b.n	8003880 <_printf_i+0x130>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	6826      	ldr	r6, [r4, #0]
 800390c:	6961      	ldr	r1, [r4, #20]
 800390e:	1d18      	adds	r0, r3, #4
 8003910:	6028      	str	r0, [r5, #0]
 8003912:	0635      	lsls	r5, r6, #24
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	d501      	bpl.n	800391c <_printf_i+0x1cc>
 8003918:	6019      	str	r1, [r3, #0]
 800391a:	e002      	b.n	8003922 <_printf_i+0x1d2>
 800391c:	0670      	lsls	r0, r6, #25
 800391e:	d5fb      	bpl.n	8003918 <_printf_i+0x1c8>
 8003920:	8019      	strh	r1, [r3, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	6123      	str	r3, [r4, #16]
 8003926:	4615      	mov	r5, r2
 8003928:	e7ba      	b.n	80038a0 <_printf_i+0x150>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	1d1a      	adds	r2, r3, #4
 800392e:	602a      	str	r2, [r5, #0]
 8003930:	681d      	ldr	r5, [r3, #0]
 8003932:	6862      	ldr	r2, [r4, #4]
 8003934:	2100      	movs	r1, #0
 8003936:	4628      	mov	r0, r5
 8003938:	f7fc fcaa 	bl	8000290 <memchr>
 800393c:	b108      	cbz	r0, 8003942 <_printf_i+0x1f2>
 800393e:	1b40      	subs	r0, r0, r5
 8003940:	6060      	str	r0, [r4, #4]
 8003942:	6863      	ldr	r3, [r4, #4]
 8003944:	6123      	str	r3, [r4, #16]
 8003946:	2300      	movs	r3, #0
 8003948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800394c:	e7a8      	b.n	80038a0 <_printf_i+0x150>
 800394e:	6923      	ldr	r3, [r4, #16]
 8003950:	462a      	mov	r2, r5
 8003952:	4649      	mov	r1, r9
 8003954:	4640      	mov	r0, r8
 8003956:	47d0      	blx	sl
 8003958:	3001      	adds	r0, #1
 800395a:	d0ab      	beq.n	80038b4 <_printf_i+0x164>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	079b      	lsls	r3, r3, #30
 8003960:	d413      	bmi.n	800398a <_printf_i+0x23a>
 8003962:	68e0      	ldr	r0, [r4, #12]
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	4298      	cmp	r0, r3
 8003968:	bfb8      	it	lt
 800396a:	4618      	movlt	r0, r3
 800396c:	e7a4      	b.n	80038b8 <_printf_i+0x168>
 800396e:	2301      	movs	r3, #1
 8003970:	4632      	mov	r2, r6
 8003972:	4649      	mov	r1, r9
 8003974:	4640      	mov	r0, r8
 8003976:	47d0      	blx	sl
 8003978:	3001      	adds	r0, #1
 800397a:	d09b      	beq.n	80038b4 <_printf_i+0x164>
 800397c:	3501      	adds	r5, #1
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	9903      	ldr	r1, [sp, #12]
 8003982:	1a5b      	subs	r3, r3, r1
 8003984:	42ab      	cmp	r3, r5
 8003986:	dcf2      	bgt.n	800396e <_printf_i+0x21e>
 8003988:	e7eb      	b.n	8003962 <_printf_i+0x212>
 800398a:	2500      	movs	r5, #0
 800398c:	f104 0619 	add.w	r6, r4, #25
 8003990:	e7f5      	b.n	800397e <_printf_i+0x22e>
 8003992:	bf00      	nop
 8003994:	08005eae 	.word	0x08005eae
 8003998:	08005ebf 	.word	0x08005ebf

0800399c <quorem>:
 800399c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	6903      	ldr	r3, [r0, #16]
 80039a2:	690c      	ldr	r4, [r1, #16]
 80039a4:	42a3      	cmp	r3, r4
 80039a6:	4607      	mov	r7, r0
 80039a8:	f2c0 8081 	blt.w	8003aae <quorem+0x112>
 80039ac:	3c01      	subs	r4, #1
 80039ae:	f101 0814 	add.w	r8, r1, #20
 80039b2:	f100 0514 	add.w	r5, r0, #20
 80039b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80039c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039c4:	3301      	adds	r3, #1
 80039c6:	429a      	cmp	r2, r3
 80039c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80039cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80039d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80039d4:	d331      	bcc.n	8003a3a <quorem+0x9e>
 80039d6:	f04f 0e00 	mov.w	lr, #0
 80039da:	4640      	mov	r0, r8
 80039dc:	46ac      	mov	ip, r5
 80039de:	46f2      	mov	sl, lr
 80039e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80039e4:	b293      	uxth	r3, r2
 80039e6:	fb06 e303 	mla	r3, r6, r3, lr
 80039ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	ebaa 0303 	sub.w	r3, sl, r3
 80039f4:	f8dc a000 	ldr.w	sl, [ip]
 80039f8:	0c12      	lsrs	r2, r2, #16
 80039fa:	fa13 f38a 	uxtah	r3, r3, sl
 80039fe:	fb06 e202 	mla	r2, r6, r2, lr
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	9b00      	ldr	r3, [sp, #0]
 8003a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8003a18:	4581      	cmp	r9, r0
 8003a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8003a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003a26:	d2db      	bcs.n	80039e0 <quorem+0x44>
 8003a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8003a2c:	b92b      	cbnz	r3, 8003a3a <quorem+0x9e>
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	3b04      	subs	r3, #4
 8003a32:	429d      	cmp	r5, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	d32e      	bcc.n	8003a96 <quorem+0xfa>
 8003a38:	613c      	str	r4, [r7, #16]
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f001 f8b8 	bl	8004bb0 <__mcmp>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	db24      	blt.n	8003a8e <quorem+0xf2>
 8003a44:	3601      	adds	r6, #1
 8003a46:	4628      	mov	r0, r5
 8003a48:	f04f 0c00 	mov.w	ip, #0
 8003a4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a50:	f8d0 e000 	ldr.w	lr, [r0]
 8003a54:	b293      	uxth	r3, r2
 8003a56:	ebac 0303 	sub.w	r3, ip, r3
 8003a5a:	0c12      	lsrs	r2, r2, #16
 8003a5c:	fa13 f38e 	uxtah	r3, r3, lr
 8003a60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a6e:	45c1      	cmp	r9, r8
 8003a70:	f840 3b04 	str.w	r3, [r0], #4
 8003a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a78:	d2e8      	bcs.n	8003a4c <quorem+0xb0>
 8003a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a82:	b922      	cbnz	r2, 8003a8e <quorem+0xf2>
 8003a84:	3b04      	subs	r3, #4
 8003a86:	429d      	cmp	r5, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	d30a      	bcc.n	8003aa2 <quorem+0x106>
 8003a8c:	613c      	str	r4, [r7, #16]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	b003      	add	sp, #12
 8003a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	3b04      	subs	r3, #4
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d1cc      	bne.n	8003a38 <quorem+0x9c>
 8003a9e:	3c01      	subs	r4, #1
 8003aa0:	e7c7      	b.n	8003a32 <quorem+0x96>
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d1f0      	bne.n	8003a8c <quorem+0xf0>
 8003aaa:	3c01      	subs	r4, #1
 8003aac:	e7eb      	b.n	8003a86 <quorem+0xea>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e7ee      	b.n	8003a90 <quorem+0xf4>
 8003ab2:	0000      	movs	r0, r0
 8003ab4:	0000      	movs	r0, r0
	...

08003ab8 <_dtoa_r>:
 8003ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003abc:	ed2d 8b04 	vpush	{d8-d9}
 8003ac0:	ec57 6b10 	vmov	r6, r7, d0
 8003ac4:	b093      	sub	sp, #76	; 0x4c
 8003ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003acc:	9106      	str	r1, [sp, #24]
 8003ace:	ee10 aa10 	vmov	sl, s0
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8003ad8:	46bb      	mov	fp, r7
 8003ada:	b975      	cbnz	r5, 8003afa <_dtoa_r+0x42>
 8003adc:	2010      	movs	r0, #16
 8003ade:	f000 fddd 	bl	800469c <malloc>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8003ae6:	b920      	cbnz	r0, 8003af2 <_dtoa_r+0x3a>
 8003ae8:	4ba7      	ldr	r3, [pc, #668]	; (8003d88 <_dtoa_r+0x2d0>)
 8003aea:	21ea      	movs	r1, #234	; 0xea
 8003aec:	48a7      	ldr	r0, [pc, #668]	; (8003d8c <_dtoa_r+0x2d4>)
 8003aee:	f001 fa67 	bl	8004fc0 <__assert_func>
 8003af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003af6:	6005      	str	r5, [r0, #0]
 8003af8:	60c5      	str	r5, [r0, #12]
 8003afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	b151      	cbz	r1, 8003b16 <_dtoa_r+0x5e>
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	604a      	str	r2, [r1, #4]
 8003b04:	2301      	movs	r3, #1
 8003b06:	4093      	lsls	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fe0e 	bl	800472c <_Bfree>
 8003b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	1e3b      	subs	r3, r7, #0
 8003b18:	bfaa      	itet	ge
 8003b1a:	2300      	movge	r3, #0
 8003b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003b20:	f8c8 3000 	strge.w	r3, [r8]
 8003b24:	4b9a      	ldr	r3, [pc, #616]	; (8003d90 <_dtoa_r+0x2d8>)
 8003b26:	bfbc      	itt	lt
 8003b28:	2201      	movlt	r2, #1
 8003b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8003b2e:	ea33 030b 	bics.w	r3, r3, fp
 8003b32:	d11b      	bne.n	8003b6c <_dtoa_r+0xb4>
 8003b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003b40:	4333      	orrs	r3, r6
 8003b42:	f000 8592 	beq.w	800466a <_dtoa_r+0xbb2>
 8003b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b48:	b963      	cbnz	r3, 8003b64 <_dtoa_r+0xac>
 8003b4a:	4b92      	ldr	r3, [pc, #584]	; (8003d94 <_dtoa_r+0x2dc>)
 8003b4c:	e022      	b.n	8003b94 <_dtoa_r+0xdc>
 8003b4e:	4b92      	ldr	r3, [pc, #584]	; (8003d98 <_dtoa_r+0x2e0>)
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	3308      	adds	r3, #8
 8003b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	9801      	ldr	r0, [sp, #4]
 8003b5a:	b013      	add	sp, #76	; 0x4c
 8003b5c:	ecbd 8b04 	vpop	{d8-d9}
 8003b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b64:	4b8b      	ldr	r3, [pc, #556]	; (8003d94 <_dtoa_r+0x2dc>)
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	3303      	adds	r3, #3
 8003b6a:	e7f3      	b.n	8003b54 <_dtoa_r+0x9c>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4650      	mov	r0, sl
 8003b72:	4659      	mov	r1, fp
 8003b74:	f7fd f800 	bl	8000b78 <__aeabi_dcmpeq>
 8003b78:	ec4b ab19 	vmov	d9, sl, fp
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	b158      	cbz	r0, 8003b98 <_dtoa_r+0xe0>
 8003b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b82:	2301      	movs	r3, #1
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 856b 	beq.w	8004664 <_dtoa_r+0xbac>
 8003b8e:	4883      	ldr	r0, [pc, #524]	; (8003d9c <_dtoa_r+0x2e4>)
 8003b90:	6018      	str	r0, [r3, #0]
 8003b92:	1e43      	subs	r3, r0, #1
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	e7df      	b.n	8003b58 <_dtoa_r+0xa0>
 8003b98:	ec4b ab10 	vmov	d0, sl, fp
 8003b9c:	aa10      	add	r2, sp, #64	; 0x40
 8003b9e:	a911      	add	r1, sp, #68	; 0x44
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f001 f8ab 	bl	8004cfc <__d2b>
 8003ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003baa:	ee08 0a10 	vmov	s16, r0
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	f000 8084 	beq.w	8003cbc <_dtoa_r+0x204>
 8003bb4:	ee19 3a90 	vmov	r3, s19
 8003bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003bc0:	4656      	mov	r6, sl
 8003bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003bce:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <_dtoa_r+0x2e8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	4639      	mov	r1, r7
 8003bd6:	f7fc fbaf 	bl	8000338 <__aeabi_dsub>
 8003bda:	a365      	add	r3, pc, #404	; (adr r3, 8003d70 <_dtoa_r+0x2b8>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fd62 	bl	80006a8 <__aeabi_dmul>
 8003be4:	a364      	add	r3, pc, #400	; (adr r3, 8003d78 <_dtoa_r+0x2c0>)
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f7fc fba7 	bl	800033c <__adddf3>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	460f      	mov	r7, r1
 8003bf4:	f7fc fcee 	bl	80005d4 <__aeabi_i2d>
 8003bf8:	a361      	add	r3, pc, #388	; (adr r3, 8003d80 <_dtoa_r+0x2c8>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc fd53 	bl	80006a8 <__aeabi_dmul>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4630      	mov	r0, r6
 8003c08:	4639      	mov	r1, r7
 8003c0a:	f7fc fb97 	bl	800033c <__adddf3>
 8003c0e:	4606      	mov	r6, r0
 8003c10:	460f      	mov	r7, r1
 8003c12:	f7fc fff9 	bl	8000c08 <__aeabi_d2iz>
 8003c16:	2200      	movs	r2, #0
 8003c18:	9000      	str	r0, [sp, #0]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	4639      	mov	r1, r7
 8003c20:	f7fc ffb4 	bl	8000b8c <__aeabi_dcmplt>
 8003c24:	b150      	cbz	r0, 8003c3c <_dtoa_r+0x184>
 8003c26:	9800      	ldr	r0, [sp, #0]
 8003c28:	f7fc fcd4 	bl	80005d4 <__aeabi_i2d>
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	463b      	mov	r3, r7
 8003c30:	f7fc ffa2 	bl	8000b78 <__aeabi_dcmpeq>
 8003c34:	b910      	cbnz	r0, 8003c3c <_dtoa_r+0x184>
 8003c36:	9b00      	ldr	r3, [sp, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	9b00      	ldr	r3, [sp, #0]
 8003c3e:	2b16      	cmp	r3, #22
 8003c40:	d85a      	bhi.n	8003cf8 <_dtoa_r+0x240>
 8003c42:	9a00      	ldr	r2, [sp, #0]
 8003c44:	4b57      	ldr	r3, [pc, #348]	; (8003da4 <_dtoa_r+0x2ec>)
 8003c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	ec51 0b19 	vmov	r0, r1, d9
 8003c52:	f7fc ff9b 	bl	8000b8c <__aeabi_dcmplt>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d050      	beq.n	8003cfc <_dtoa_r+0x244>
 8003c5a:	9b00      	ldr	r3, [sp, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c66:	1b5d      	subs	r5, r3, r5
 8003c68:	1e6b      	subs	r3, r5, #1
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	bf45      	ittet	mi
 8003c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8003c72:	9304      	strmi	r3, [sp, #16]
 8003c74:	2300      	movpl	r3, #0
 8003c76:	2300      	movmi	r3, #0
 8003c78:	bf4c      	ite	mi
 8003c7a:	9305      	strmi	r3, [sp, #20]
 8003c7c:	9304      	strpl	r3, [sp, #16]
 8003c7e:	9b00      	ldr	r3, [sp, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	db3d      	blt.n	8003d00 <_dtoa_r+0x248>
 8003c84:	9b05      	ldr	r3, [sp, #20]
 8003c86:	9a00      	ldr	r2, [sp, #0]
 8003c88:	920a      	str	r2, [sp, #40]	; 0x28
 8003c8a:	4413      	add	r3, r2
 8003c8c:	9305      	str	r3, [sp, #20]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9307      	str	r3, [sp, #28]
 8003c92:	9b06      	ldr	r3, [sp, #24]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	f200 8089 	bhi.w	8003dac <_dtoa_r+0x2f4>
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	bfc4      	itt	gt
 8003c9e:	3b04      	subgt	r3, #4
 8003ca0:	9306      	strgt	r3, [sp, #24]
 8003ca2:	9b06      	ldr	r3, [sp, #24]
 8003ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8003ca8:	bfcc      	ite	gt
 8003caa:	2500      	movgt	r5, #0
 8003cac:	2501      	movle	r5, #1
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	f200 8087 	bhi.w	8003dc2 <_dtoa_r+0x30a>
 8003cb4:	e8df f003 	tbb	[pc, r3]
 8003cb8:	59383a2d 	.word	0x59383a2d
 8003cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003cc0:	441d      	add	r5, r3
 8003cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	bfc1      	itttt	gt
 8003cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8003cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003cda:	bfda      	itte	le
 8003cdc:	f1c3 0320 	rsble	r3, r3, #32
 8003ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8003ce4:	4318      	orrgt	r0, r3
 8003ce6:	f7fc fc65 	bl	80005b4 <__aeabi_ui2d>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4606      	mov	r6, r0
 8003cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003cf2:	3d01      	subs	r5, #1
 8003cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8003cf6:	e76a      	b.n	8003bce <_dtoa_r+0x116>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e7b2      	b.n	8003c62 <_dtoa_r+0x1aa>
 8003cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8003cfe:	e7b1      	b.n	8003c64 <_dtoa_r+0x1ac>
 8003d00:	9b04      	ldr	r3, [sp, #16]
 8003d02:	9a00      	ldr	r2, [sp, #0]
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	9304      	str	r3, [sp, #16]
 8003d08:	4253      	negs	r3, r2
 8003d0a:	9307      	str	r3, [sp, #28]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d10:	e7bf      	b.n	8003c92 <_dtoa_r+0x1da>
 8003d12:	2300      	movs	r3, #0
 8003d14:	9308      	str	r3, [sp, #32]
 8003d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dc55      	bgt.n	8003dc8 <_dtoa_r+0x310>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d22:	461a      	mov	r2, r3
 8003d24:	9209      	str	r2, [sp, #36]	; 0x24
 8003d26:	e00c      	b.n	8003d42 <_dtoa_r+0x28a>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e7f3      	b.n	8003d14 <_dtoa_r+0x25c>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d30:	9308      	str	r3, [sp, #32]
 8003d32:	9b00      	ldr	r3, [sp, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	9302      	str	r3, [sp, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	9303      	str	r3, [sp, #12]
 8003d3e:	bfb8      	it	lt
 8003d40:	2301      	movlt	r3, #1
 8003d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d44:	2200      	movs	r2, #0
 8003d46:	6042      	str	r2, [r0, #4]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	f102 0614 	add.w	r6, r2, #20
 8003d4e:	429e      	cmp	r6, r3
 8003d50:	6841      	ldr	r1, [r0, #4]
 8003d52:	d93d      	bls.n	8003dd0 <_dtoa_r+0x318>
 8003d54:	4620      	mov	r0, r4
 8003d56:	f000 fca9 	bl	80046ac <_Balloc>
 8003d5a:	9001      	str	r0, [sp, #4]
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d13b      	bne.n	8003dd8 <_dtoa_r+0x320>
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <_dtoa_r+0x2f0>)
 8003d62:	4602      	mov	r2, r0
 8003d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d68:	e6c0      	b.n	8003aec <_dtoa_r+0x34>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e7df      	b.n	8003d2e <_dtoa_r+0x276>
 8003d6e:	bf00      	nop
 8003d70:	636f4361 	.word	0x636f4361
 8003d74:	3fd287a7 	.word	0x3fd287a7
 8003d78:	8b60c8b3 	.word	0x8b60c8b3
 8003d7c:	3fc68a28 	.word	0x3fc68a28
 8003d80:	509f79fb 	.word	0x509f79fb
 8003d84:	3fd34413 	.word	0x3fd34413
 8003d88:	08005edd 	.word	0x08005edd
 8003d8c:	08005ef4 	.word	0x08005ef4
 8003d90:	7ff00000 	.word	0x7ff00000
 8003d94:	08005ed9 	.word	0x08005ed9
 8003d98:	08005ed0 	.word	0x08005ed0
 8003d9c:	08005ead 	.word	0x08005ead
 8003da0:	3ff80000 	.word	0x3ff80000
 8003da4:	08005fe8 	.word	0x08005fe8
 8003da8:	08005f4f 	.word	0x08005f4f
 8003dac:	2501      	movs	r5, #1
 8003dae:	2300      	movs	r3, #0
 8003db0:	9306      	str	r3, [sp, #24]
 8003db2:	9508      	str	r5, [sp, #32]
 8003db4:	f04f 33ff 	mov.w	r3, #4294967295
 8003db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2312      	movs	r3, #18
 8003dc0:	e7b0      	b.n	8003d24 <_dtoa_r+0x26c>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	9308      	str	r3, [sp, #32]
 8003dc6:	e7f5      	b.n	8003db4 <_dtoa_r+0x2fc>
 8003dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003dce:	e7b8      	b.n	8003d42 <_dtoa_r+0x28a>
 8003dd0:	3101      	adds	r1, #1
 8003dd2:	6041      	str	r1, [r0, #4]
 8003dd4:	0052      	lsls	r2, r2, #1
 8003dd6:	e7b8      	b.n	8003d4a <_dtoa_r+0x292>
 8003dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dda:	9a01      	ldr	r2, [sp, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	9b03      	ldr	r3, [sp, #12]
 8003de0:	2b0e      	cmp	r3, #14
 8003de2:	f200 809d 	bhi.w	8003f20 <_dtoa_r+0x468>
 8003de6:	2d00      	cmp	r5, #0
 8003de8:	f000 809a 	beq.w	8003f20 <_dtoa_r+0x468>
 8003dec:	9b00      	ldr	r3, [sp, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	dd32      	ble.n	8003e58 <_dtoa_r+0x3a0>
 8003df2:	4ab7      	ldr	r2, [pc, #732]	; (80040d0 <_dtoa_r+0x618>)
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e00:	9b00      	ldr	r3, [sp, #0]
 8003e02:	05d8      	lsls	r0, r3, #23
 8003e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003e08:	d516      	bpl.n	8003e38 <_dtoa_r+0x380>
 8003e0a:	4bb2      	ldr	r3, [pc, #712]	; (80040d4 <_dtoa_r+0x61c>)
 8003e0c:	ec51 0b19 	vmov	r0, r1, d9
 8003e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e14:	f7fc fd72 	bl	80008fc <__aeabi_ddiv>
 8003e18:	f007 070f 	and.w	r7, r7, #15
 8003e1c:	4682      	mov	sl, r0
 8003e1e:	468b      	mov	fp, r1
 8003e20:	2503      	movs	r5, #3
 8003e22:	4eac      	ldr	r6, [pc, #688]	; (80040d4 <_dtoa_r+0x61c>)
 8003e24:	b957      	cbnz	r7, 8003e3c <_dtoa_r+0x384>
 8003e26:	4642      	mov	r2, r8
 8003e28:	464b      	mov	r3, r9
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	f7fc fd65 	bl	80008fc <__aeabi_ddiv>
 8003e32:	4682      	mov	sl, r0
 8003e34:	468b      	mov	fp, r1
 8003e36:	e028      	b.n	8003e8a <_dtoa_r+0x3d2>
 8003e38:	2502      	movs	r5, #2
 8003e3a:	e7f2      	b.n	8003e22 <_dtoa_r+0x36a>
 8003e3c:	07f9      	lsls	r1, r7, #31
 8003e3e:	d508      	bpl.n	8003e52 <_dtoa_r+0x39a>
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e48:	f7fc fc2e 	bl	80006a8 <__aeabi_dmul>
 8003e4c:	3501      	adds	r5, #1
 8003e4e:	4680      	mov	r8, r0
 8003e50:	4689      	mov	r9, r1
 8003e52:	107f      	asrs	r7, r7, #1
 8003e54:	3608      	adds	r6, #8
 8003e56:	e7e5      	b.n	8003e24 <_dtoa_r+0x36c>
 8003e58:	f000 809b 	beq.w	8003f92 <_dtoa_r+0x4da>
 8003e5c:	9b00      	ldr	r3, [sp, #0]
 8003e5e:	4f9d      	ldr	r7, [pc, #628]	; (80040d4 <_dtoa_r+0x61c>)
 8003e60:	425e      	negs	r6, r3
 8003e62:	4b9b      	ldr	r3, [pc, #620]	; (80040d0 <_dtoa_r+0x618>)
 8003e64:	f006 020f 	and.w	r2, r6, #15
 8003e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	ec51 0b19 	vmov	r0, r1, d9
 8003e74:	f7fc fc18 	bl	80006a8 <__aeabi_dmul>
 8003e78:	1136      	asrs	r6, r6, #4
 8003e7a:	4682      	mov	sl, r0
 8003e7c:	468b      	mov	fp, r1
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2502      	movs	r5, #2
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	d17a      	bne.n	8003f7c <_dtoa_r+0x4c4>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1d3      	bne.n	8003e32 <_dtoa_r+0x37a>
 8003e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8082 	beq.w	8003f96 <_dtoa_r+0x4de>
 8003e92:	4b91      	ldr	r3, [pc, #580]	; (80040d8 <_dtoa_r+0x620>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	4650      	mov	r0, sl
 8003e98:	4659      	mov	r1, fp
 8003e9a:	f7fc fe77 	bl	8000b8c <__aeabi_dcmplt>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d079      	beq.n	8003f96 <_dtoa_r+0x4de>
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d076      	beq.n	8003f96 <_dtoa_r+0x4de>
 8003ea8:	9b02      	ldr	r3, [sp, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	dd36      	ble.n	8003f1c <_dtoa_r+0x464>
 8003eae:	9b00      	ldr	r3, [sp, #0]
 8003eb0:	4650      	mov	r0, sl
 8003eb2:	4659      	mov	r1, fp
 8003eb4:	1e5f      	subs	r7, r3, #1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4b88      	ldr	r3, [pc, #544]	; (80040dc <_dtoa_r+0x624>)
 8003eba:	f7fc fbf5 	bl	80006a8 <__aeabi_dmul>
 8003ebe:	9e02      	ldr	r6, [sp, #8]
 8003ec0:	4682      	mov	sl, r0
 8003ec2:	468b      	mov	fp, r1
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f7fc fb84 	bl	80005d4 <__aeabi_i2d>
 8003ecc:	4652      	mov	r2, sl
 8003ece:	465b      	mov	r3, fp
 8003ed0:	f7fc fbea 	bl	80006a8 <__aeabi_dmul>
 8003ed4:	4b82      	ldr	r3, [pc, #520]	; (80040e0 <_dtoa_r+0x628>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f7fc fa30 	bl	800033c <__adddf3>
 8003edc:	46d0      	mov	r8, sl
 8003ede:	46d9      	mov	r9, fp
 8003ee0:	4682      	mov	sl, r0
 8003ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003ee6:	2e00      	cmp	r6, #0
 8003ee8:	d158      	bne.n	8003f9c <_dtoa_r+0x4e4>
 8003eea:	4b7e      	ldr	r3, [pc, #504]	; (80040e4 <_dtoa_r+0x62c>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	f7fc fa21 	bl	8000338 <__aeabi_dsub>
 8003ef6:	4652      	mov	r2, sl
 8003ef8:	465b      	mov	r3, fp
 8003efa:	4680      	mov	r8, r0
 8003efc:	4689      	mov	r9, r1
 8003efe:	f7fc fe63 	bl	8000bc8 <__aeabi_dcmpgt>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f040 8295 	bne.w	8004432 <_dtoa_r+0x97a>
 8003f08:	4652      	mov	r2, sl
 8003f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003f0e:	4640      	mov	r0, r8
 8003f10:	4649      	mov	r1, r9
 8003f12:	f7fc fe3b 	bl	8000b8c <__aeabi_dcmplt>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	f040 8289 	bne.w	800442e <_dtoa_r+0x976>
 8003f1c:	ec5b ab19 	vmov	sl, fp, d9
 8003f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f2c0 8148 	blt.w	80041b8 <_dtoa_r+0x700>
 8003f28:	9a00      	ldr	r2, [sp, #0]
 8003f2a:	2a0e      	cmp	r2, #14
 8003f2c:	f300 8144 	bgt.w	80041b8 <_dtoa_r+0x700>
 8003f30:	4b67      	ldr	r3, [pc, #412]	; (80040d0 <_dtoa_r+0x618>)
 8003f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f280 80d5 	bge.w	80040ec <_dtoa_r+0x634>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f300 80d1 	bgt.w	80040ec <_dtoa_r+0x634>
 8003f4a:	f040 826f 	bne.w	800442c <_dtoa_r+0x974>
 8003f4e:	4b65      	ldr	r3, [pc, #404]	; (80040e4 <_dtoa_r+0x62c>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	4640      	mov	r0, r8
 8003f54:	4649      	mov	r1, r9
 8003f56:	f7fc fba7 	bl	80006a8 <__aeabi_dmul>
 8003f5a:	4652      	mov	r2, sl
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	f7fc fe29 	bl	8000bb4 <__aeabi_dcmpge>
 8003f62:	9e03      	ldr	r6, [sp, #12]
 8003f64:	4637      	mov	r7, r6
 8003f66:	2800      	cmp	r0, #0
 8003f68:	f040 8245 	bne.w	80043f6 <_dtoa_r+0x93e>
 8003f6c:	9d01      	ldr	r5, [sp, #4]
 8003f6e:	2331      	movs	r3, #49	; 0x31
 8003f70:	f805 3b01 	strb.w	r3, [r5], #1
 8003f74:	9b00      	ldr	r3, [sp, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	e240      	b.n	80043fe <_dtoa_r+0x946>
 8003f7c:	07f2      	lsls	r2, r6, #31
 8003f7e:	d505      	bpl.n	8003f8c <_dtoa_r+0x4d4>
 8003f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f84:	f7fc fb90 	bl	80006a8 <__aeabi_dmul>
 8003f88:	3501      	adds	r5, #1
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	1076      	asrs	r6, r6, #1
 8003f8e:	3708      	adds	r7, #8
 8003f90:	e777      	b.n	8003e82 <_dtoa_r+0x3ca>
 8003f92:	2502      	movs	r5, #2
 8003f94:	e779      	b.n	8003e8a <_dtoa_r+0x3d2>
 8003f96:	9f00      	ldr	r7, [sp, #0]
 8003f98:	9e03      	ldr	r6, [sp, #12]
 8003f9a:	e794      	b.n	8003ec6 <_dtoa_r+0x40e>
 8003f9c:	9901      	ldr	r1, [sp, #4]
 8003f9e:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <_dtoa_r+0x618>)
 8003fa0:	4431      	add	r1, r6
 8003fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8003fa4:	9908      	ldr	r1, [sp, #32]
 8003fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	d043      	beq.n	800403a <_dtoa_r+0x582>
 8003fb2:	494d      	ldr	r1, [pc, #308]	; (80040e8 <_dtoa_r+0x630>)
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fca1 	bl	80008fc <__aeabi_ddiv>
 8003fba:	4652      	mov	r2, sl
 8003fbc:	465b      	mov	r3, fp
 8003fbe:	f7fc f9bb 	bl	8000338 <__aeabi_dsub>
 8003fc2:	9d01      	ldr	r5, [sp, #4]
 8003fc4:	4682      	mov	sl, r0
 8003fc6:	468b      	mov	fp, r1
 8003fc8:	4649      	mov	r1, r9
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7fc fe1c 	bl	8000c08 <__aeabi_d2iz>
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	f7fc faff 	bl	80005d4 <__aeabi_i2d>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4649      	mov	r1, r9
 8003fde:	f7fc f9ab 	bl	8000338 <__aeabi_dsub>
 8003fe2:	3630      	adds	r6, #48	; 0x30
 8003fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8003fe8:	4652      	mov	r2, sl
 8003fea:	465b      	mov	r3, fp
 8003fec:	4680      	mov	r8, r0
 8003fee:	4689      	mov	r9, r1
 8003ff0:	f7fc fdcc 	bl	8000b8c <__aeabi_dcmplt>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d163      	bne.n	80040c0 <_dtoa_r+0x608>
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	4936      	ldr	r1, [pc, #216]	; (80040d8 <_dtoa_r+0x620>)
 8003ffe:	2000      	movs	r0, #0
 8004000:	f7fc f99a 	bl	8000338 <__aeabi_dsub>
 8004004:	4652      	mov	r2, sl
 8004006:	465b      	mov	r3, fp
 8004008:	f7fc fdc0 	bl	8000b8c <__aeabi_dcmplt>
 800400c:	2800      	cmp	r0, #0
 800400e:	f040 80b5 	bne.w	800417c <_dtoa_r+0x6c4>
 8004012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004014:	429d      	cmp	r5, r3
 8004016:	d081      	beq.n	8003f1c <_dtoa_r+0x464>
 8004018:	4b30      	ldr	r3, [pc, #192]	; (80040dc <_dtoa_r+0x624>)
 800401a:	2200      	movs	r2, #0
 800401c:	4650      	mov	r0, sl
 800401e:	4659      	mov	r1, fp
 8004020:	f7fc fb42 	bl	80006a8 <__aeabi_dmul>
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <_dtoa_r+0x624>)
 8004026:	4682      	mov	sl, r0
 8004028:	468b      	mov	fp, r1
 800402a:	4640      	mov	r0, r8
 800402c:	4649      	mov	r1, r9
 800402e:	2200      	movs	r2, #0
 8004030:	f7fc fb3a 	bl	80006a8 <__aeabi_dmul>
 8004034:	4680      	mov	r8, r0
 8004036:	4689      	mov	r9, r1
 8004038:	e7c6      	b.n	8003fc8 <_dtoa_r+0x510>
 800403a:	4650      	mov	r0, sl
 800403c:	4659      	mov	r1, fp
 800403e:	f7fc fb33 	bl	80006a8 <__aeabi_dmul>
 8004042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004044:	9d01      	ldr	r5, [sp, #4]
 8004046:	930f      	str	r3, [sp, #60]	; 0x3c
 8004048:	4682      	mov	sl, r0
 800404a:	468b      	mov	fp, r1
 800404c:	4649      	mov	r1, r9
 800404e:	4640      	mov	r0, r8
 8004050:	f7fc fdda 	bl	8000c08 <__aeabi_d2iz>
 8004054:	4606      	mov	r6, r0
 8004056:	f7fc fabd 	bl	80005d4 <__aeabi_i2d>
 800405a:	3630      	adds	r6, #48	; 0x30
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4640      	mov	r0, r8
 8004062:	4649      	mov	r1, r9
 8004064:	f7fc f968 	bl	8000338 <__aeabi_dsub>
 8004068:	f805 6b01 	strb.w	r6, [r5], #1
 800406c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800406e:	429d      	cmp	r5, r3
 8004070:	4680      	mov	r8, r0
 8004072:	4689      	mov	r9, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	d124      	bne.n	80040c4 <_dtoa_r+0x60c>
 800407a:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <_dtoa_r+0x630>)
 800407c:	4650      	mov	r0, sl
 800407e:	4659      	mov	r1, fp
 8004080:	f7fc f95c 	bl	800033c <__adddf3>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4640      	mov	r0, r8
 800408a:	4649      	mov	r1, r9
 800408c:	f7fc fd9c 	bl	8000bc8 <__aeabi_dcmpgt>
 8004090:	2800      	cmp	r0, #0
 8004092:	d173      	bne.n	800417c <_dtoa_r+0x6c4>
 8004094:	4652      	mov	r2, sl
 8004096:	465b      	mov	r3, fp
 8004098:	4913      	ldr	r1, [pc, #76]	; (80040e8 <_dtoa_r+0x630>)
 800409a:	2000      	movs	r0, #0
 800409c:	f7fc f94c 	bl	8000338 <__aeabi_dsub>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4640      	mov	r0, r8
 80040a6:	4649      	mov	r1, r9
 80040a8:	f7fc fd70 	bl	8000b8c <__aeabi_dcmplt>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f43f af35 	beq.w	8003f1c <_dtoa_r+0x464>
 80040b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80040b4:	1e6b      	subs	r3, r5, #1
 80040b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80040b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d0f8      	beq.n	80040b2 <_dtoa_r+0x5fa>
 80040c0:	9700      	str	r7, [sp, #0]
 80040c2:	e049      	b.n	8004158 <_dtoa_r+0x6a0>
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <_dtoa_r+0x624>)
 80040c6:	f7fc faef 	bl	80006a8 <__aeabi_dmul>
 80040ca:	4680      	mov	r8, r0
 80040cc:	4689      	mov	r9, r1
 80040ce:	e7bd      	b.n	800404c <_dtoa_r+0x594>
 80040d0:	08005fe8 	.word	0x08005fe8
 80040d4:	08005fc0 	.word	0x08005fc0
 80040d8:	3ff00000 	.word	0x3ff00000
 80040dc:	40240000 	.word	0x40240000
 80040e0:	401c0000 	.word	0x401c0000
 80040e4:	40140000 	.word	0x40140000
 80040e8:	3fe00000 	.word	0x3fe00000
 80040ec:	9d01      	ldr	r5, [sp, #4]
 80040ee:	4656      	mov	r6, sl
 80040f0:	465f      	mov	r7, fp
 80040f2:	4642      	mov	r2, r8
 80040f4:	464b      	mov	r3, r9
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc fbff 	bl	80008fc <__aeabi_ddiv>
 80040fe:	f7fc fd83 	bl	8000c08 <__aeabi_d2iz>
 8004102:	4682      	mov	sl, r0
 8004104:	f7fc fa66 	bl	80005d4 <__aeabi_i2d>
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	f7fc facc 	bl	80006a8 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800411c:	f7fc f90c 	bl	8000338 <__aeabi_dsub>
 8004120:	f805 6b01 	strb.w	r6, [r5], #1
 8004124:	9e01      	ldr	r6, [sp, #4]
 8004126:	9f03      	ldr	r7, [sp, #12]
 8004128:	1bae      	subs	r6, r5, r6
 800412a:	42b7      	cmp	r7, r6
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	d135      	bne.n	800419e <_dtoa_r+0x6e6>
 8004132:	f7fc f903 	bl	800033c <__adddf3>
 8004136:	4642      	mov	r2, r8
 8004138:	464b      	mov	r3, r9
 800413a:	4606      	mov	r6, r0
 800413c:	460f      	mov	r7, r1
 800413e:	f7fc fd43 	bl	8000bc8 <__aeabi_dcmpgt>
 8004142:	b9d0      	cbnz	r0, 800417a <_dtoa_r+0x6c2>
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	4630      	mov	r0, r6
 800414a:	4639      	mov	r1, r7
 800414c:	f7fc fd14 	bl	8000b78 <__aeabi_dcmpeq>
 8004150:	b110      	cbz	r0, 8004158 <_dtoa_r+0x6a0>
 8004152:	f01a 0f01 	tst.w	sl, #1
 8004156:	d110      	bne.n	800417a <_dtoa_r+0x6c2>
 8004158:	4620      	mov	r0, r4
 800415a:	ee18 1a10 	vmov	r1, s16
 800415e:	f000 fae5 	bl	800472c <_Bfree>
 8004162:	2300      	movs	r3, #0
 8004164:	9800      	ldr	r0, [sp, #0]
 8004166:	702b      	strb	r3, [r5, #0]
 8004168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800416a:	3001      	adds	r0, #1
 800416c:	6018      	str	r0, [r3, #0]
 800416e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004170:	2b00      	cmp	r3, #0
 8004172:	f43f acf1 	beq.w	8003b58 <_dtoa_r+0xa0>
 8004176:	601d      	str	r5, [r3, #0]
 8004178:	e4ee      	b.n	8003b58 <_dtoa_r+0xa0>
 800417a:	9f00      	ldr	r7, [sp, #0]
 800417c:	462b      	mov	r3, r5
 800417e:	461d      	mov	r5, r3
 8004180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004184:	2a39      	cmp	r2, #57	; 0x39
 8004186:	d106      	bne.n	8004196 <_dtoa_r+0x6de>
 8004188:	9a01      	ldr	r2, [sp, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d1f7      	bne.n	800417e <_dtoa_r+0x6c6>
 800418e:	9901      	ldr	r1, [sp, #4]
 8004190:	2230      	movs	r2, #48	; 0x30
 8004192:	3701      	adds	r7, #1
 8004194:	700a      	strb	r2, [r1, #0]
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	3201      	adds	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e790      	b.n	80040c0 <_dtoa_r+0x608>
 800419e:	4ba6      	ldr	r3, [pc, #664]	; (8004438 <_dtoa_r+0x980>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	f7fc fa81 	bl	80006a8 <__aeabi_dmul>
 80041a6:	2200      	movs	r2, #0
 80041a8:	2300      	movs	r3, #0
 80041aa:	4606      	mov	r6, r0
 80041ac:	460f      	mov	r7, r1
 80041ae:	f7fc fce3 	bl	8000b78 <__aeabi_dcmpeq>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d09d      	beq.n	80040f2 <_dtoa_r+0x63a>
 80041b6:	e7cf      	b.n	8004158 <_dtoa_r+0x6a0>
 80041b8:	9a08      	ldr	r2, [sp, #32]
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	f000 80d7 	beq.w	800436e <_dtoa_r+0x8b6>
 80041c0:	9a06      	ldr	r2, [sp, #24]
 80041c2:	2a01      	cmp	r2, #1
 80041c4:	f300 80ba 	bgt.w	800433c <_dtoa_r+0x884>
 80041c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	f000 80b2 	beq.w	8004334 <_dtoa_r+0x87c>
 80041d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041d4:	9e07      	ldr	r6, [sp, #28]
 80041d6:	9d04      	ldr	r5, [sp, #16]
 80041d8:	9a04      	ldr	r2, [sp, #16]
 80041da:	441a      	add	r2, r3
 80041dc:	9204      	str	r2, [sp, #16]
 80041de:	9a05      	ldr	r2, [sp, #20]
 80041e0:	2101      	movs	r1, #1
 80041e2:	441a      	add	r2, r3
 80041e4:	4620      	mov	r0, r4
 80041e6:	9205      	str	r2, [sp, #20]
 80041e8:	f000 fb58 	bl	800489c <__i2b>
 80041ec:	4607      	mov	r7, r0
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	dd0c      	ble.n	800420c <_dtoa_r+0x754>
 80041f2:	9b05      	ldr	r3, [sp, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dd09      	ble.n	800420c <_dtoa_r+0x754>
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	9a04      	ldr	r2, [sp, #16]
 80041fc:	bfa8      	it	ge
 80041fe:	462b      	movge	r3, r5
 8004200:	1ad2      	subs	r2, r2, r3
 8004202:	9204      	str	r2, [sp, #16]
 8004204:	9a05      	ldr	r2, [sp, #20]
 8004206:	1aed      	subs	r5, r5, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	9305      	str	r3, [sp, #20]
 800420c:	9b07      	ldr	r3, [sp, #28]
 800420e:	b31b      	cbz	r3, 8004258 <_dtoa_r+0x7a0>
 8004210:	9b08      	ldr	r3, [sp, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80af 	beq.w	8004376 <_dtoa_r+0x8be>
 8004218:	2e00      	cmp	r6, #0
 800421a:	dd13      	ble.n	8004244 <_dtoa_r+0x78c>
 800421c:	4639      	mov	r1, r7
 800421e:	4632      	mov	r2, r6
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fbfb 	bl	8004a1c <__pow5mult>
 8004226:	ee18 2a10 	vmov	r2, s16
 800422a:	4601      	mov	r1, r0
 800422c:	4607      	mov	r7, r0
 800422e:	4620      	mov	r0, r4
 8004230:	f000 fb4a 	bl	80048c8 <__multiply>
 8004234:	ee18 1a10 	vmov	r1, s16
 8004238:	4680      	mov	r8, r0
 800423a:	4620      	mov	r0, r4
 800423c:	f000 fa76 	bl	800472c <_Bfree>
 8004240:	ee08 8a10 	vmov	s16, r8
 8004244:	9b07      	ldr	r3, [sp, #28]
 8004246:	1b9a      	subs	r2, r3, r6
 8004248:	d006      	beq.n	8004258 <_dtoa_r+0x7a0>
 800424a:	ee18 1a10 	vmov	r1, s16
 800424e:	4620      	mov	r0, r4
 8004250:	f000 fbe4 	bl	8004a1c <__pow5mult>
 8004254:	ee08 0a10 	vmov	s16, r0
 8004258:	2101      	movs	r1, #1
 800425a:	4620      	mov	r0, r4
 800425c:	f000 fb1e 	bl	800489c <__i2b>
 8004260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	4606      	mov	r6, r0
 8004266:	f340 8088 	ble.w	800437a <_dtoa_r+0x8c2>
 800426a:	461a      	mov	r2, r3
 800426c:	4601      	mov	r1, r0
 800426e:	4620      	mov	r0, r4
 8004270:	f000 fbd4 	bl	8004a1c <__pow5mult>
 8004274:	9b06      	ldr	r3, [sp, #24]
 8004276:	2b01      	cmp	r3, #1
 8004278:	4606      	mov	r6, r0
 800427a:	f340 8081 	ble.w	8004380 <_dtoa_r+0x8c8>
 800427e:	f04f 0800 	mov.w	r8, #0
 8004282:	6933      	ldr	r3, [r6, #16]
 8004284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004288:	6918      	ldr	r0, [r3, #16]
 800428a:	f000 fab7 	bl	80047fc <__hi0bits>
 800428e:	f1c0 0020 	rsb	r0, r0, #32
 8004292:	9b05      	ldr	r3, [sp, #20]
 8004294:	4418      	add	r0, r3
 8004296:	f010 001f 	ands.w	r0, r0, #31
 800429a:	f000 8092 	beq.w	80043c2 <_dtoa_r+0x90a>
 800429e:	f1c0 0320 	rsb	r3, r0, #32
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	f340 808a 	ble.w	80043bc <_dtoa_r+0x904>
 80042a8:	f1c0 001c 	rsb	r0, r0, #28
 80042ac:	9b04      	ldr	r3, [sp, #16]
 80042ae:	4403      	add	r3, r0
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	9b05      	ldr	r3, [sp, #20]
 80042b4:	4403      	add	r3, r0
 80042b6:	4405      	add	r5, r0
 80042b8:	9305      	str	r3, [sp, #20]
 80042ba:	9b04      	ldr	r3, [sp, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dd07      	ble.n	80042d0 <_dtoa_r+0x818>
 80042c0:	ee18 1a10 	vmov	r1, s16
 80042c4:	461a      	mov	r2, r3
 80042c6:	4620      	mov	r0, r4
 80042c8:	f000 fc02 	bl	8004ad0 <__lshift>
 80042cc:	ee08 0a10 	vmov	s16, r0
 80042d0:	9b05      	ldr	r3, [sp, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	dd05      	ble.n	80042e2 <_dtoa_r+0x82a>
 80042d6:	4631      	mov	r1, r6
 80042d8:	461a      	mov	r2, r3
 80042da:	4620      	mov	r0, r4
 80042dc:	f000 fbf8 	bl	8004ad0 <__lshift>
 80042e0:	4606      	mov	r6, r0
 80042e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d06e      	beq.n	80043c6 <_dtoa_r+0x90e>
 80042e8:	ee18 0a10 	vmov	r0, s16
 80042ec:	4631      	mov	r1, r6
 80042ee:	f000 fc5f 	bl	8004bb0 <__mcmp>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	da67      	bge.n	80043c6 <_dtoa_r+0x90e>
 80042f6:	9b00      	ldr	r3, [sp, #0]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	ee18 1a10 	vmov	r1, s16
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	220a      	movs	r2, #10
 8004302:	2300      	movs	r3, #0
 8004304:	4620      	mov	r0, r4
 8004306:	f000 fa33 	bl	8004770 <__multadd>
 800430a:	9b08      	ldr	r3, [sp, #32]
 800430c:	ee08 0a10 	vmov	s16, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 81b1 	beq.w	8004678 <_dtoa_r+0xbc0>
 8004316:	2300      	movs	r3, #0
 8004318:	4639      	mov	r1, r7
 800431a:	220a      	movs	r2, #10
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fa27 	bl	8004770 <__multadd>
 8004322:	9b02      	ldr	r3, [sp, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	4607      	mov	r7, r0
 8004328:	f300 808e 	bgt.w	8004448 <_dtoa_r+0x990>
 800432c:	9b06      	ldr	r3, [sp, #24]
 800432e:	2b02      	cmp	r3, #2
 8004330:	dc51      	bgt.n	80043d6 <_dtoa_r+0x91e>
 8004332:	e089      	b.n	8004448 <_dtoa_r+0x990>
 8004334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800433a:	e74b      	b.n	80041d4 <_dtoa_r+0x71c>
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	1e5e      	subs	r6, r3, #1
 8004340:	9b07      	ldr	r3, [sp, #28]
 8004342:	42b3      	cmp	r3, r6
 8004344:	bfbf      	itttt	lt
 8004346:	9b07      	ldrlt	r3, [sp, #28]
 8004348:	9607      	strlt	r6, [sp, #28]
 800434a:	1af2      	sublt	r2, r6, r3
 800434c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800434e:	bfb6      	itet	lt
 8004350:	189b      	addlt	r3, r3, r2
 8004352:	1b9e      	subge	r6, r3, r6
 8004354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	bfb8      	it	lt
 800435a:	2600      	movlt	r6, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	bfb7      	itett	lt
 8004360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004368:	1a9d      	sublt	r5, r3, r2
 800436a:	2300      	movlt	r3, #0
 800436c:	e734      	b.n	80041d8 <_dtoa_r+0x720>
 800436e:	9e07      	ldr	r6, [sp, #28]
 8004370:	9d04      	ldr	r5, [sp, #16]
 8004372:	9f08      	ldr	r7, [sp, #32]
 8004374:	e73b      	b.n	80041ee <_dtoa_r+0x736>
 8004376:	9a07      	ldr	r2, [sp, #28]
 8004378:	e767      	b.n	800424a <_dtoa_r+0x792>
 800437a:	9b06      	ldr	r3, [sp, #24]
 800437c:	2b01      	cmp	r3, #1
 800437e:	dc18      	bgt.n	80043b2 <_dtoa_r+0x8fa>
 8004380:	f1ba 0f00 	cmp.w	sl, #0
 8004384:	d115      	bne.n	80043b2 <_dtoa_r+0x8fa>
 8004386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800438a:	b993      	cbnz	r3, 80043b2 <_dtoa_r+0x8fa>
 800438c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004390:	0d1b      	lsrs	r3, r3, #20
 8004392:	051b      	lsls	r3, r3, #20
 8004394:	b183      	cbz	r3, 80043b8 <_dtoa_r+0x900>
 8004396:	9b04      	ldr	r3, [sp, #16]
 8004398:	3301      	adds	r3, #1
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	9b05      	ldr	r3, [sp, #20]
 800439e:	3301      	adds	r3, #1
 80043a0:	9305      	str	r3, [sp, #20]
 80043a2:	f04f 0801 	mov.w	r8, #1
 80043a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f af6a 	bne.w	8004282 <_dtoa_r+0x7ca>
 80043ae:	2001      	movs	r0, #1
 80043b0:	e76f      	b.n	8004292 <_dtoa_r+0x7da>
 80043b2:	f04f 0800 	mov.w	r8, #0
 80043b6:	e7f6      	b.n	80043a6 <_dtoa_r+0x8ee>
 80043b8:	4698      	mov	r8, r3
 80043ba:	e7f4      	b.n	80043a6 <_dtoa_r+0x8ee>
 80043bc:	f43f af7d 	beq.w	80042ba <_dtoa_r+0x802>
 80043c0:	4618      	mov	r0, r3
 80043c2:	301c      	adds	r0, #28
 80043c4:	e772      	b.n	80042ac <_dtoa_r+0x7f4>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	dc37      	bgt.n	800443c <_dtoa_r+0x984>
 80043cc:	9b06      	ldr	r3, [sp, #24]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	dd34      	ble.n	800443c <_dtoa_r+0x984>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	9b02      	ldr	r3, [sp, #8]
 80043d8:	b96b      	cbnz	r3, 80043f6 <_dtoa_r+0x93e>
 80043da:	4631      	mov	r1, r6
 80043dc:	2205      	movs	r2, #5
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 f9c6 	bl	8004770 <__multadd>
 80043e4:	4601      	mov	r1, r0
 80043e6:	4606      	mov	r6, r0
 80043e8:	ee18 0a10 	vmov	r0, s16
 80043ec:	f000 fbe0 	bl	8004bb0 <__mcmp>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f73f adbb 	bgt.w	8003f6c <_dtoa_r+0x4b4>
 80043f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f8:	9d01      	ldr	r5, [sp, #4]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	4631      	mov	r1, r6
 8004404:	4620      	mov	r0, r4
 8004406:	f000 f991 	bl	800472c <_Bfree>
 800440a:	2f00      	cmp	r7, #0
 800440c:	f43f aea4 	beq.w	8004158 <_dtoa_r+0x6a0>
 8004410:	f1b8 0f00 	cmp.w	r8, #0
 8004414:	d005      	beq.n	8004422 <_dtoa_r+0x96a>
 8004416:	45b8      	cmp	r8, r7
 8004418:	d003      	beq.n	8004422 <_dtoa_r+0x96a>
 800441a:	4641      	mov	r1, r8
 800441c:	4620      	mov	r0, r4
 800441e:	f000 f985 	bl	800472c <_Bfree>
 8004422:	4639      	mov	r1, r7
 8004424:	4620      	mov	r0, r4
 8004426:	f000 f981 	bl	800472c <_Bfree>
 800442a:	e695      	b.n	8004158 <_dtoa_r+0x6a0>
 800442c:	2600      	movs	r6, #0
 800442e:	4637      	mov	r7, r6
 8004430:	e7e1      	b.n	80043f6 <_dtoa_r+0x93e>
 8004432:	9700      	str	r7, [sp, #0]
 8004434:	4637      	mov	r7, r6
 8004436:	e599      	b.n	8003f6c <_dtoa_r+0x4b4>
 8004438:	40240000 	.word	0x40240000
 800443c:	9b08      	ldr	r3, [sp, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80ca 	beq.w	80045d8 <_dtoa_r+0xb20>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	2d00      	cmp	r5, #0
 800444a:	dd05      	ble.n	8004458 <_dtoa_r+0x9a0>
 800444c:	4639      	mov	r1, r7
 800444e:	462a      	mov	r2, r5
 8004450:	4620      	mov	r0, r4
 8004452:	f000 fb3d 	bl	8004ad0 <__lshift>
 8004456:	4607      	mov	r7, r0
 8004458:	f1b8 0f00 	cmp.w	r8, #0
 800445c:	d05b      	beq.n	8004516 <_dtoa_r+0xa5e>
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4620      	mov	r0, r4
 8004462:	f000 f923 	bl	80046ac <_Balloc>
 8004466:	4605      	mov	r5, r0
 8004468:	b928      	cbnz	r0, 8004476 <_dtoa_r+0x9be>
 800446a:	4b87      	ldr	r3, [pc, #540]	; (8004688 <_dtoa_r+0xbd0>)
 800446c:	4602      	mov	r2, r0
 800446e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004472:	f7ff bb3b 	b.w	8003aec <_dtoa_r+0x34>
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	3202      	adds	r2, #2
 800447a:	0092      	lsls	r2, r2, #2
 800447c:	f107 010c 	add.w	r1, r7, #12
 8004480:	300c      	adds	r0, #12
 8004482:	f7fe fe0b 	bl	800309c <memcpy>
 8004486:	2201      	movs	r2, #1
 8004488:	4629      	mov	r1, r5
 800448a:	4620      	mov	r0, r4
 800448c:	f000 fb20 	bl	8004ad0 <__lshift>
 8004490:	9b01      	ldr	r3, [sp, #4]
 8004492:	f103 0901 	add.w	r9, r3, #1
 8004496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800449a:	4413      	add	r3, r2
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	f00a 0301 	and.w	r3, sl, #1
 80044a2:	46b8      	mov	r8, r7
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	4607      	mov	r7, r0
 80044a8:	4631      	mov	r1, r6
 80044aa:	ee18 0a10 	vmov	r0, s16
 80044ae:	f7ff fa75 	bl	800399c <quorem>
 80044b2:	4641      	mov	r1, r8
 80044b4:	9002      	str	r0, [sp, #8]
 80044b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80044ba:	ee18 0a10 	vmov	r0, s16
 80044be:	f000 fb77 	bl	8004bb0 <__mcmp>
 80044c2:	463a      	mov	r2, r7
 80044c4:	9003      	str	r0, [sp, #12]
 80044c6:	4631      	mov	r1, r6
 80044c8:	4620      	mov	r0, r4
 80044ca:	f000 fb8d 	bl	8004be8 <__mdiff>
 80044ce:	68c2      	ldr	r2, [r0, #12]
 80044d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80044d4:	4605      	mov	r5, r0
 80044d6:	bb02      	cbnz	r2, 800451a <_dtoa_r+0xa62>
 80044d8:	4601      	mov	r1, r0
 80044da:	ee18 0a10 	vmov	r0, s16
 80044de:	f000 fb67 	bl	8004bb0 <__mcmp>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4629      	mov	r1, r5
 80044e6:	4620      	mov	r0, r4
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	f000 f91f 	bl	800472c <_Bfree>
 80044ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80044f2:	ea43 0102 	orr.w	r1, r3, r2
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	464d      	mov	r5, r9
 80044fc:	d10f      	bne.n	800451e <_dtoa_r+0xa66>
 80044fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004502:	d02a      	beq.n	800455a <_dtoa_r+0xaa2>
 8004504:	9b03      	ldr	r3, [sp, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	dd02      	ble.n	8004510 <_dtoa_r+0xa58>
 800450a:	9b02      	ldr	r3, [sp, #8]
 800450c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004510:	f88b a000 	strb.w	sl, [fp]
 8004514:	e775      	b.n	8004402 <_dtoa_r+0x94a>
 8004516:	4638      	mov	r0, r7
 8004518:	e7ba      	b.n	8004490 <_dtoa_r+0x9d8>
 800451a:	2201      	movs	r2, #1
 800451c:	e7e2      	b.n	80044e4 <_dtoa_r+0xa2c>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db04      	blt.n	800452e <_dtoa_r+0xa76>
 8004524:	9906      	ldr	r1, [sp, #24]
 8004526:	430b      	orrs	r3, r1
 8004528:	9904      	ldr	r1, [sp, #16]
 800452a:	430b      	orrs	r3, r1
 800452c:	d122      	bne.n	8004574 <_dtoa_r+0xabc>
 800452e:	2a00      	cmp	r2, #0
 8004530:	ddee      	ble.n	8004510 <_dtoa_r+0xa58>
 8004532:	ee18 1a10 	vmov	r1, s16
 8004536:	2201      	movs	r2, #1
 8004538:	4620      	mov	r0, r4
 800453a:	f000 fac9 	bl	8004ad0 <__lshift>
 800453e:	4631      	mov	r1, r6
 8004540:	ee08 0a10 	vmov	s16, r0
 8004544:	f000 fb34 	bl	8004bb0 <__mcmp>
 8004548:	2800      	cmp	r0, #0
 800454a:	dc03      	bgt.n	8004554 <_dtoa_r+0xa9c>
 800454c:	d1e0      	bne.n	8004510 <_dtoa_r+0xa58>
 800454e:	f01a 0f01 	tst.w	sl, #1
 8004552:	d0dd      	beq.n	8004510 <_dtoa_r+0xa58>
 8004554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004558:	d1d7      	bne.n	800450a <_dtoa_r+0xa52>
 800455a:	2339      	movs	r3, #57	; 0x39
 800455c:	f88b 3000 	strb.w	r3, [fp]
 8004560:	462b      	mov	r3, r5
 8004562:	461d      	mov	r5, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800456a:	2a39      	cmp	r2, #57	; 0x39
 800456c:	d071      	beq.n	8004652 <_dtoa_r+0xb9a>
 800456e:	3201      	adds	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e746      	b.n	8004402 <_dtoa_r+0x94a>
 8004574:	2a00      	cmp	r2, #0
 8004576:	dd07      	ble.n	8004588 <_dtoa_r+0xad0>
 8004578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800457c:	d0ed      	beq.n	800455a <_dtoa_r+0xaa2>
 800457e:	f10a 0301 	add.w	r3, sl, #1
 8004582:	f88b 3000 	strb.w	r3, [fp]
 8004586:	e73c      	b.n	8004402 <_dtoa_r+0x94a>
 8004588:	9b05      	ldr	r3, [sp, #20]
 800458a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800458e:	4599      	cmp	r9, r3
 8004590:	d047      	beq.n	8004622 <_dtoa_r+0xb6a>
 8004592:	ee18 1a10 	vmov	r1, s16
 8004596:	2300      	movs	r3, #0
 8004598:	220a      	movs	r2, #10
 800459a:	4620      	mov	r0, r4
 800459c:	f000 f8e8 	bl	8004770 <__multadd>
 80045a0:	45b8      	cmp	r8, r7
 80045a2:	ee08 0a10 	vmov	s16, r0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	f04f 020a 	mov.w	r2, #10
 80045ae:	4641      	mov	r1, r8
 80045b0:	4620      	mov	r0, r4
 80045b2:	d106      	bne.n	80045c2 <_dtoa_r+0xb0a>
 80045b4:	f000 f8dc 	bl	8004770 <__multadd>
 80045b8:	4680      	mov	r8, r0
 80045ba:	4607      	mov	r7, r0
 80045bc:	f109 0901 	add.w	r9, r9, #1
 80045c0:	e772      	b.n	80044a8 <_dtoa_r+0x9f0>
 80045c2:	f000 f8d5 	bl	8004770 <__multadd>
 80045c6:	4639      	mov	r1, r7
 80045c8:	4680      	mov	r8, r0
 80045ca:	2300      	movs	r3, #0
 80045cc:	220a      	movs	r2, #10
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 f8ce 	bl	8004770 <__multadd>
 80045d4:	4607      	mov	r7, r0
 80045d6:	e7f1      	b.n	80045bc <_dtoa_r+0xb04>
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	9302      	str	r3, [sp, #8]
 80045dc:	9d01      	ldr	r5, [sp, #4]
 80045de:	ee18 0a10 	vmov	r0, s16
 80045e2:	4631      	mov	r1, r6
 80045e4:	f7ff f9da 	bl	800399c <quorem>
 80045e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	f805 ab01 	strb.w	sl, [r5], #1
 80045f2:	1aea      	subs	r2, r5, r3
 80045f4:	9b02      	ldr	r3, [sp, #8]
 80045f6:	4293      	cmp	r3, r2
 80045f8:	dd09      	ble.n	800460e <_dtoa_r+0xb56>
 80045fa:	ee18 1a10 	vmov	r1, s16
 80045fe:	2300      	movs	r3, #0
 8004600:	220a      	movs	r2, #10
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f8b4 	bl	8004770 <__multadd>
 8004608:	ee08 0a10 	vmov	s16, r0
 800460c:	e7e7      	b.n	80045de <_dtoa_r+0xb26>
 800460e:	9b02      	ldr	r3, [sp, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	bfc8      	it	gt
 8004614:	461d      	movgt	r5, r3
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	bfd8      	it	le
 800461a:	2501      	movle	r5, #1
 800461c:	441d      	add	r5, r3
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	ee18 1a10 	vmov	r1, s16
 8004626:	2201      	movs	r2, #1
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fa51 	bl	8004ad0 <__lshift>
 800462e:	4631      	mov	r1, r6
 8004630:	ee08 0a10 	vmov	s16, r0
 8004634:	f000 fabc 	bl	8004bb0 <__mcmp>
 8004638:	2800      	cmp	r0, #0
 800463a:	dc91      	bgt.n	8004560 <_dtoa_r+0xaa8>
 800463c:	d102      	bne.n	8004644 <_dtoa_r+0xb8c>
 800463e:	f01a 0f01 	tst.w	sl, #1
 8004642:	d18d      	bne.n	8004560 <_dtoa_r+0xaa8>
 8004644:	462b      	mov	r3, r5
 8004646:	461d      	mov	r5, r3
 8004648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800464c:	2a30      	cmp	r2, #48	; 0x30
 800464e:	d0fa      	beq.n	8004646 <_dtoa_r+0xb8e>
 8004650:	e6d7      	b.n	8004402 <_dtoa_r+0x94a>
 8004652:	9a01      	ldr	r2, [sp, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d184      	bne.n	8004562 <_dtoa_r+0xaaa>
 8004658:	9b00      	ldr	r3, [sp, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2331      	movs	r3, #49	; 0x31
 8004660:	7013      	strb	r3, [r2, #0]
 8004662:	e6ce      	b.n	8004402 <_dtoa_r+0x94a>
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <_dtoa_r+0xbd4>)
 8004666:	f7ff ba95 	b.w	8003b94 <_dtoa_r+0xdc>
 800466a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f aa6e 	bne.w	8003b4e <_dtoa_r+0x96>
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <_dtoa_r+0xbd8>)
 8004674:	f7ff ba8e 	b.w	8003b94 <_dtoa_r+0xdc>
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	dcae      	bgt.n	80045dc <_dtoa_r+0xb24>
 800467e:	9b06      	ldr	r3, [sp, #24]
 8004680:	2b02      	cmp	r3, #2
 8004682:	f73f aea8 	bgt.w	80043d6 <_dtoa_r+0x91e>
 8004686:	e7a9      	b.n	80045dc <_dtoa_r+0xb24>
 8004688:	08005f4f 	.word	0x08005f4f
 800468c:	08005eac 	.word	0x08005eac
 8004690:	08005ed0 	.word	0x08005ed0

08004694 <_localeconv_r>:
 8004694:	4800      	ldr	r0, [pc, #0]	; (8004698 <_localeconv_r+0x4>)
 8004696:	4770      	bx	lr
 8004698:	20000160 	.word	0x20000160

0800469c <malloc>:
 800469c:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <malloc+0xc>)
 800469e:	4601      	mov	r1, r0
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f000 bc09 	b.w	8004eb8 <_malloc_r>
 80046a6:	bf00      	nop
 80046a8:	2000000c 	.word	0x2000000c

080046ac <_Balloc>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
 80046b4:	b976      	cbnz	r6, 80046d4 <_Balloc+0x28>
 80046b6:	2010      	movs	r0, #16
 80046b8:	f7ff fff0 	bl	800469c <malloc>
 80046bc:	4602      	mov	r2, r0
 80046be:	6260      	str	r0, [r4, #36]	; 0x24
 80046c0:	b920      	cbnz	r0, 80046cc <_Balloc+0x20>
 80046c2:	4b18      	ldr	r3, [pc, #96]	; (8004724 <_Balloc+0x78>)
 80046c4:	4818      	ldr	r0, [pc, #96]	; (8004728 <_Balloc+0x7c>)
 80046c6:	2166      	movs	r1, #102	; 0x66
 80046c8:	f000 fc7a 	bl	8004fc0 <__assert_func>
 80046cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046d0:	6006      	str	r6, [r0, #0]
 80046d2:	60c6      	str	r6, [r0, #12]
 80046d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046d6:	68f3      	ldr	r3, [r6, #12]
 80046d8:	b183      	cbz	r3, 80046fc <_Balloc+0x50>
 80046da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046e2:	b9b8      	cbnz	r0, 8004714 <_Balloc+0x68>
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f605 	lsl.w	r6, r1, r5
 80046ea:	1d72      	adds	r2, r6, #5
 80046ec:	0092      	lsls	r2, r2, #2
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 fb60 	bl	8004db4 <_calloc_r>
 80046f4:	b160      	cbz	r0, 8004710 <_Balloc+0x64>
 80046f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046fa:	e00e      	b.n	800471a <_Balloc+0x6e>
 80046fc:	2221      	movs	r2, #33	; 0x21
 80046fe:	2104      	movs	r1, #4
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fb57 	bl	8004db4 <_calloc_r>
 8004706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004708:	60f0      	str	r0, [r6, #12]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e4      	bne.n	80046da <_Balloc+0x2e>
 8004710:	2000      	movs	r0, #0
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	6802      	ldr	r2, [r0, #0]
 8004716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800471a:	2300      	movs	r3, #0
 800471c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004720:	e7f7      	b.n	8004712 <_Balloc+0x66>
 8004722:	bf00      	nop
 8004724:	08005edd 	.word	0x08005edd
 8004728:	08005f60 	.word	0x08005f60

0800472c <_Bfree>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004730:	4605      	mov	r5, r0
 8004732:	460c      	mov	r4, r1
 8004734:	b976      	cbnz	r6, 8004754 <_Bfree+0x28>
 8004736:	2010      	movs	r0, #16
 8004738:	f7ff ffb0 	bl	800469c <malloc>
 800473c:	4602      	mov	r2, r0
 800473e:	6268      	str	r0, [r5, #36]	; 0x24
 8004740:	b920      	cbnz	r0, 800474c <_Bfree+0x20>
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <_Bfree+0x3c>)
 8004744:	4809      	ldr	r0, [pc, #36]	; (800476c <_Bfree+0x40>)
 8004746:	218a      	movs	r1, #138	; 0x8a
 8004748:	f000 fc3a 	bl	8004fc0 <__assert_func>
 800474c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004750:	6006      	str	r6, [r0, #0]
 8004752:	60c6      	str	r6, [r0, #12]
 8004754:	b13c      	cbz	r4, 8004766 <_Bfree+0x3a>
 8004756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004758:	6862      	ldr	r2, [r4, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004760:	6021      	str	r1, [r4, #0]
 8004762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	08005edd 	.word	0x08005edd
 800476c:	08005f60 	.word	0x08005f60

08004770 <__multadd>:
 8004770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	690d      	ldr	r5, [r1, #16]
 8004776:	4607      	mov	r7, r0
 8004778:	460c      	mov	r4, r1
 800477a:	461e      	mov	r6, r3
 800477c:	f101 0c14 	add.w	ip, r1, #20
 8004780:	2000      	movs	r0, #0
 8004782:	f8dc 3000 	ldr.w	r3, [ip]
 8004786:	b299      	uxth	r1, r3
 8004788:	fb02 6101 	mla	r1, r2, r1, r6
 800478c:	0c1e      	lsrs	r6, r3, #16
 800478e:	0c0b      	lsrs	r3, r1, #16
 8004790:	fb02 3306 	mla	r3, r2, r6, r3
 8004794:	b289      	uxth	r1, r1
 8004796:	3001      	adds	r0, #1
 8004798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800479c:	4285      	cmp	r5, r0
 800479e:	f84c 1b04 	str.w	r1, [ip], #4
 80047a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047a6:	dcec      	bgt.n	8004782 <__multadd+0x12>
 80047a8:	b30e      	cbz	r6, 80047ee <__multadd+0x7e>
 80047aa:	68a3      	ldr	r3, [r4, #8]
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	dc19      	bgt.n	80047e4 <__multadd+0x74>
 80047b0:	6861      	ldr	r1, [r4, #4]
 80047b2:	4638      	mov	r0, r7
 80047b4:	3101      	adds	r1, #1
 80047b6:	f7ff ff79 	bl	80046ac <_Balloc>
 80047ba:	4680      	mov	r8, r0
 80047bc:	b928      	cbnz	r0, 80047ca <__multadd+0x5a>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <__multadd+0x84>)
 80047c2:	480d      	ldr	r0, [pc, #52]	; (80047f8 <__multadd+0x88>)
 80047c4:	21b5      	movs	r1, #181	; 0xb5
 80047c6:	f000 fbfb 	bl	8004fc0 <__assert_func>
 80047ca:	6922      	ldr	r2, [r4, #16]
 80047cc:	3202      	adds	r2, #2
 80047ce:	f104 010c 	add.w	r1, r4, #12
 80047d2:	0092      	lsls	r2, r2, #2
 80047d4:	300c      	adds	r0, #12
 80047d6:	f7fe fc61 	bl	800309c <memcpy>
 80047da:	4621      	mov	r1, r4
 80047dc:	4638      	mov	r0, r7
 80047de:	f7ff ffa5 	bl	800472c <_Bfree>
 80047e2:	4644      	mov	r4, r8
 80047e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80047e8:	3501      	adds	r5, #1
 80047ea:	615e      	str	r6, [r3, #20]
 80047ec:	6125      	str	r5, [r4, #16]
 80047ee:	4620      	mov	r0, r4
 80047f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047f4:	08005f4f 	.word	0x08005f4f
 80047f8:	08005f60 	.word	0x08005f60

080047fc <__hi0bits>:
 80047fc:	0c03      	lsrs	r3, r0, #16
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	b9d3      	cbnz	r3, 8004838 <__hi0bits+0x3c>
 8004802:	0400      	lsls	r0, r0, #16
 8004804:	2310      	movs	r3, #16
 8004806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800480a:	bf04      	itt	eq
 800480c:	0200      	lsleq	r0, r0, #8
 800480e:	3308      	addeq	r3, #8
 8004810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004814:	bf04      	itt	eq
 8004816:	0100      	lsleq	r0, r0, #4
 8004818:	3304      	addeq	r3, #4
 800481a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800481e:	bf04      	itt	eq
 8004820:	0080      	lsleq	r0, r0, #2
 8004822:	3302      	addeq	r3, #2
 8004824:	2800      	cmp	r0, #0
 8004826:	db05      	blt.n	8004834 <__hi0bits+0x38>
 8004828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800482c:	f103 0301 	add.w	r3, r3, #1
 8004830:	bf08      	it	eq
 8004832:	2320      	moveq	r3, #32
 8004834:	4618      	mov	r0, r3
 8004836:	4770      	bx	lr
 8004838:	2300      	movs	r3, #0
 800483a:	e7e4      	b.n	8004806 <__hi0bits+0xa>

0800483c <__lo0bits>:
 800483c:	6803      	ldr	r3, [r0, #0]
 800483e:	f013 0207 	ands.w	r2, r3, #7
 8004842:	4601      	mov	r1, r0
 8004844:	d00b      	beq.n	800485e <__lo0bits+0x22>
 8004846:	07da      	lsls	r2, r3, #31
 8004848:	d423      	bmi.n	8004892 <__lo0bits+0x56>
 800484a:	0798      	lsls	r0, r3, #30
 800484c:	bf49      	itett	mi
 800484e:	085b      	lsrmi	r3, r3, #1
 8004850:	089b      	lsrpl	r3, r3, #2
 8004852:	2001      	movmi	r0, #1
 8004854:	600b      	strmi	r3, [r1, #0]
 8004856:	bf5c      	itt	pl
 8004858:	600b      	strpl	r3, [r1, #0]
 800485a:	2002      	movpl	r0, #2
 800485c:	4770      	bx	lr
 800485e:	b298      	uxth	r0, r3
 8004860:	b9a8      	cbnz	r0, 800488e <__lo0bits+0x52>
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	2010      	movs	r0, #16
 8004866:	b2da      	uxtb	r2, r3
 8004868:	b90a      	cbnz	r2, 800486e <__lo0bits+0x32>
 800486a:	3008      	adds	r0, #8
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	071a      	lsls	r2, r3, #28
 8004870:	bf04      	itt	eq
 8004872:	091b      	lsreq	r3, r3, #4
 8004874:	3004      	addeq	r0, #4
 8004876:	079a      	lsls	r2, r3, #30
 8004878:	bf04      	itt	eq
 800487a:	089b      	lsreq	r3, r3, #2
 800487c:	3002      	addeq	r0, #2
 800487e:	07da      	lsls	r2, r3, #31
 8004880:	d403      	bmi.n	800488a <__lo0bits+0x4e>
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f100 0001 	add.w	r0, r0, #1
 8004888:	d005      	beq.n	8004896 <__lo0bits+0x5a>
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	4770      	bx	lr
 800488e:	4610      	mov	r0, r2
 8004890:	e7e9      	b.n	8004866 <__lo0bits+0x2a>
 8004892:	2000      	movs	r0, #0
 8004894:	4770      	bx	lr
 8004896:	2020      	movs	r0, #32
 8004898:	4770      	bx	lr
	...

0800489c <__i2b>:
 800489c:	b510      	push	{r4, lr}
 800489e:	460c      	mov	r4, r1
 80048a0:	2101      	movs	r1, #1
 80048a2:	f7ff ff03 	bl	80046ac <_Balloc>
 80048a6:	4602      	mov	r2, r0
 80048a8:	b928      	cbnz	r0, 80048b6 <__i2b+0x1a>
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <__i2b+0x24>)
 80048ac:	4805      	ldr	r0, [pc, #20]	; (80048c4 <__i2b+0x28>)
 80048ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80048b2:	f000 fb85 	bl	8004fc0 <__assert_func>
 80048b6:	2301      	movs	r3, #1
 80048b8:	6144      	str	r4, [r0, #20]
 80048ba:	6103      	str	r3, [r0, #16]
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	bf00      	nop
 80048c0:	08005f4f 	.word	0x08005f4f
 80048c4:	08005f60 	.word	0x08005f60

080048c8 <__multiply>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	4691      	mov	r9, r2
 80048ce:	690a      	ldr	r2, [r1, #16]
 80048d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	bfb8      	it	lt
 80048d8:	460b      	movlt	r3, r1
 80048da:	460c      	mov	r4, r1
 80048dc:	bfbc      	itt	lt
 80048de:	464c      	movlt	r4, r9
 80048e0:	4699      	movlt	r9, r3
 80048e2:	6927      	ldr	r7, [r4, #16]
 80048e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80048e8:	68a3      	ldr	r3, [r4, #8]
 80048ea:	6861      	ldr	r1, [r4, #4]
 80048ec:	eb07 060a 	add.w	r6, r7, sl
 80048f0:	42b3      	cmp	r3, r6
 80048f2:	b085      	sub	sp, #20
 80048f4:	bfb8      	it	lt
 80048f6:	3101      	addlt	r1, #1
 80048f8:	f7ff fed8 	bl	80046ac <_Balloc>
 80048fc:	b930      	cbnz	r0, 800490c <__multiply+0x44>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <__multiply+0x14c>)
 8004902:	4845      	ldr	r0, [pc, #276]	; (8004a18 <__multiply+0x150>)
 8004904:	f240 115d 	movw	r1, #349	; 0x15d
 8004908:	f000 fb5a 	bl	8004fc0 <__assert_func>
 800490c:	f100 0514 	add.w	r5, r0, #20
 8004910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004914:	462b      	mov	r3, r5
 8004916:	2200      	movs	r2, #0
 8004918:	4543      	cmp	r3, r8
 800491a:	d321      	bcc.n	8004960 <__multiply+0x98>
 800491c:	f104 0314 	add.w	r3, r4, #20
 8004920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004924:	f109 0314 	add.w	r3, r9, #20
 8004928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800492c:	9202      	str	r2, [sp, #8]
 800492e:	1b3a      	subs	r2, r7, r4
 8004930:	3a15      	subs	r2, #21
 8004932:	f022 0203 	bic.w	r2, r2, #3
 8004936:	3204      	adds	r2, #4
 8004938:	f104 0115 	add.w	r1, r4, #21
 800493c:	428f      	cmp	r7, r1
 800493e:	bf38      	it	cc
 8004940:	2204      	movcc	r2, #4
 8004942:	9201      	str	r2, [sp, #4]
 8004944:	9a02      	ldr	r2, [sp, #8]
 8004946:	9303      	str	r3, [sp, #12]
 8004948:	429a      	cmp	r2, r3
 800494a:	d80c      	bhi.n	8004966 <__multiply+0x9e>
 800494c:	2e00      	cmp	r6, #0
 800494e:	dd03      	ble.n	8004958 <__multiply+0x90>
 8004950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004954:	2b00      	cmp	r3, #0
 8004956:	d05a      	beq.n	8004a0e <__multiply+0x146>
 8004958:	6106      	str	r6, [r0, #16]
 800495a:	b005      	add	sp, #20
 800495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004960:	f843 2b04 	str.w	r2, [r3], #4
 8004964:	e7d8      	b.n	8004918 <__multiply+0x50>
 8004966:	f8b3 a000 	ldrh.w	sl, [r3]
 800496a:	f1ba 0f00 	cmp.w	sl, #0
 800496e:	d024      	beq.n	80049ba <__multiply+0xf2>
 8004970:	f104 0e14 	add.w	lr, r4, #20
 8004974:	46a9      	mov	r9, r5
 8004976:	f04f 0c00 	mov.w	ip, #0
 800497a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800497e:	f8d9 1000 	ldr.w	r1, [r9]
 8004982:	fa1f fb82 	uxth.w	fp, r2
 8004986:	b289      	uxth	r1, r1
 8004988:	fb0a 110b 	mla	r1, sl, fp, r1
 800498c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004990:	f8d9 2000 	ldr.w	r2, [r9]
 8004994:	4461      	add	r1, ip
 8004996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800499a:	fb0a c20b 	mla	r2, sl, fp, ip
 800499e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049a2:	b289      	uxth	r1, r1
 80049a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049a8:	4577      	cmp	r7, lr
 80049aa:	f849 1b04 	str.w	r1, [r9], #4
 80049ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049b2:	d8e2      	bhi.n	800497a <__multiply+0xb2>
 80049b4:	9a01      	ldr	r2, [sp, #4]
 80049b6:	f845 c002 	str.w	ip, [r5, r2]
 80049ba:	9a03      	ldr	r2, [sp, #12]
 80049bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049c0:	3304      	adds	r3, #4
 80049c2:	f1b9 0f00 	cmp.w	r9, #0
 80049c6:	d020      	beq.n	8004a0a <__multiply+0x142>
 80049c8:	6829      	ldr	r1, [r5, #0]
 80049ca:	f104 0c14 	add.w	ip, r4, #20
 80049ce:	46ae      	mov	lr, r5
 80049d0:	f04f 0a00 	mov.w	sl, #0
 80049d4:	f8bc b000 	ldrh.w	fp, [ip]
 80049d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049dc:	fb09 220b 	mla	r2, r9, fp, r2
 80049e0:	4492      	add	sl, r2
 80049e2:	b289      	uxth	r1, r1
 80049e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80049e8:	f84e 1b04 	str.w	r1, [lr], #4
 80049ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80049f0:	f8be 1000 	ldrh.w	r1, [lr]
 80049f4:	0c12      	lsrs	r2, r2, #16
 80049f6:	fb09 1102 	mla	r1, r9, r2, r1
 80049fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80049fe:	4567      	cmp	r7, ip
 8004a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a04:	d8e6      	bhi.n	80049d4 <__multiply+0x10c>
 8004a06:	9a01      	ldr	r2, [sp, #4]
 8004a08:	50a9      	str	r1, [r5, r2]
 8004a0a:	3504      	adds	r5, #4
 8004a0c:	e79a      	b.n	8004944 <__multiply+0x7c>
 8004a0e:	3e01      	subs	r6, #1
 8004a10:	e79c      	b.n	800494c <__multiply+0x84>
 8004a12:	bf00      	nop
 8004a14:	08005f4f 	.word	0x08005f4f
 8004a18:	08005f60 	.word	0x08005f60

08004a1c <__pow5mult>:
 8004a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a20:	4615      	mov	r5, r2
 8004a22:	f012 0203 	ands.w	r2, r2, #3
 8004a26:	4606      	mov	r6, r0
 8004a28:	460f      	mov	r7, r1
 8004a2a:	d007      	beq.n	8004a3c <__pow5mult+0x20>
 8004a2c:	4c25      	ldr	r4, [pc, #148]	; (8004ac4 <__pow5mult+0xa8>)
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	2300      	movs	r3, #0
 8004a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a36:	f7ff fe9b 	bl	8004770 <__multadd>
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	10ad      	asrs	r5, r5, #2
 8004a3e:	d03d      	beq.n	8004abc <__pow5mult+0xa0>
 8004a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a42:	b97c      	cbnz	r4, 8004a64 <__pow5mult+0x48>
 8004a44:	2010      	movs	r0, #16
 8004a46:	f7ff fe29 	bl	800469c <malloc>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8004a4e:	b928      	cbnz	r0, 8004a5c <__pow5mult+0x40>
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <__pow5mult+0xac>)
 8004a52:	481e      	ldr	r0, [pc, #120]	; (8004acc <__pow5mult+0xb0>)
 8004a54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a58:	f000 fab2 	bl	8004fc0 <__assert_func>
 8004a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a60:	6004      	str	r4, [r0, #0]
 8004a62:	60c4      	str	r4, [r0, #12]
 8004a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a6c:	b94c      	cbnz	r4, 8004a82 <__pow5mult+0x66>
 8004a6e:	f240 2171 	movw	r1, #625	; 0x271
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ff12 	bl	800489c <__i2b>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a7e:	4604      	mov	r4, r0
 8004a80:	6003      	str	r3, [r0, #0]
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	07eb      	lsls	r3, r5, #31
 8004a88:	d50a      	bpl.n	8004aa0 <__pow5mult+0x84>
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ff1a 	bl	80048c8 <__multiply>
 8004a94:	4639      	mov	r1, r7
 8004a96:	4680      	mov	r8, r0
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7ff fe47 	bl	800472c <_Bfree>
 8004a9e:	4647      	mov	r7, r8
 8004aa0:	106d      	asrs	r5, r5, #1
 8004aa2:	d00b      	beq.n	8004abc <__pow5mult+0xa0>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	b938      	cbnz	r0, 8004ab8 <__pow5mult+0x9c>
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff ff0b 	bl	80048c8 <__multiply>
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	f8c0 9000 	str.w	r9, [r0]
 8004ab8:	4604      	mov	r4, r0
 8004aba:	e7e4      	b.n	8004a86 <__pow5mult+0x6a>
 8004abc:	4638      	mov	r0, r7
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	bf00      	nop
 8004ac4:	080060b0 	.word	0x080060b0
 8004ac8:	08005edd 	.word	0x08005edd
 8004acc:	08005f60 	.word	0x08005f60

08004ad0 <__lshift>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	6849      	ldr	r1, [r1, #4]
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ade:	68a3      	ldr	r3, [r4, #8]
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	4691      	mov	r9, r2
 8004ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ae8:	f108 0601 	add.w	r6, r8, #1
 8004aec:	42b3      	cmp	r3, r6
 8004aee:	db0b      	blt.n	8004b08 <__lshift+0x38>
 8004af0:	4638      	mov	r0, r7
 8004af2:	f7ff fddb 	bl	80046ac <_Balloc>
 8004af6:	4605      	mov	r5, r0
 8004af8:	b948      	cbnz	r0, 8004b0e <__lshift+0x3e>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <__lshift+0xd8>)
 8004afe:	482b      	ldr	r0, [pc, #172]	; (8004bac <__lshift+0xdc>)
 8004b00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b04:	f000 fa5c 	bl	8004fc0 <__assert_func>
 8004b08:	3101      	adds	r1, #1
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	e7ee      	b.n	8004aec <__lshift+0x1c>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f100 0114 	add.w	r1, r0, #20
 8004b14:	f100 0210 	add.w	r2, r0, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	4553      	cmp	r3, sl
 8004b1c:	db37      	blt.n	8004b8e <__lshift+0xbe>
 8004b1e:	6920      	ldr	r0, [r4, #16]
 8004b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b24:	f104 0314 	add.w	r3, r4, #20
 8004b28:	f019 091f 	ands.w	r9, r9, #31
 8004b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b34:	d02f      	beq.n	8004b96 <__lshift+0xc6>
 8004b36:	f1c9 0e20 	rsb	lr, r9, #32
 8004b3a:	468a      	mov	sl, r1
 8004b3c:	f04f 0c00 	mov.w	ip, #0
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	fa02 f209 	lsl.w	r2, r2, r9
 8004b46:	ea42 020c 	orr.w	r2, r2, ip
 8004b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8004b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b52:	4298      	cmp	r0, r3
 8004b54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004b58:	d8f2      	bhi.n	8004b40 <__lshift+0x70>
 8004b5a:	1b03      	subs	r3, r0, r4
 8004b5c:	3b15      	subs	r3, #21
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	3304      	adds	r3, #4
 8004b64:	f104 0215 	add.w	r2, r4, #21
 8004b68:	4290      	cmp	r0, r2
 8004b6a:	bf38      	it	cc
 8004b6c:	2304      	movcc	r3, #4
 8004b6e:	f841 c003 	str.w	ip, [r1, r3]
 8004b72:	f1bc 0f00 	cmp.w	ip, #0
 8004b76:	d001      	beq.n	8004b7c <__lshift+0xac>
 8004b78:	f108 0602 	add.w	r6, r8, #2
 8004b7c:	3e01      	subs	r6, #1
 8004b7e:	4638      	mov	r0, r7
 8004b80:	612e      	str	r6, [r5, #16]
 8004b82:	4621      	mov	r1, r4
 8004b84:	f7ff fdd2 	bl	800472c <_Bfree>
 8004b88:	4628      	mov	r0, r5
 8004b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b92:	3301      	adds	r3, #1
 8004b94:	e7c1      	b.n	8004b1a <__lshift+0x4a>
 8004b96:	3904      	subs	r1, #4
 8004b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ba0:	4298      	cmp	r0, r3
 8004ba2:	d8f9      	bhi.n	8004b98 <__lshift+0xc8>
 8004ba4:	e7ea      	b.n	8004b7c <__lshift+0xac>
 8004ba6:	bf00      	nop
 8004ba8:	08005f4f 	.word	0x08005f4f
 8004bac:	08005f60 	.word	0x08005f60

08004bb0 <__mcmp>:
 8004bb0:	b530      	push	{r4, r5, lr}
 8004bb2:	6902      	ldr	r2, [r0, #16]
 8004bb4:	690c      	ldr	r4, [r1, #16]
 8004bb6:	1b12      	subs	r2, r2, r4
 8004bb8:	d10e      	bne.n	8004bd8 <__mcmp+0x28>
 8004bba:	f100 0314 	add.w	r3, r0, #20
 8004bbe:	3114      	adds	r1, #20
 8004bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d003      	beq.n	8004bdc <__mcmp+0x2c>
 8004bd4:	d305      	bcc.n	8004be2 <__mcmp+0x32>
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4610      	mov	r0, r2
 8004bda:	bd30      	pop	{r4, r5, pc}
 8004bdc:	4283      	cmp	r3, r0
 8004bde:	d3f3      	bcc.n	8004bc8 <__mcmp+0x18>
 8004be0:	e7fa      	b.n	8004bd8 <__mcmp+0x28>
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	e7f7      	b.n	8004bd8 <__mcmp+0x28>

08004be8 <__mdiff>:
 8004be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	4606      	mov	r6, r0
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4690      	mov	r8, r2
 8004bf6:	f7ff ffdb 	bl	8004bb0 <__mcmp>
 8004bfa:	1e05      	subs	r5, r0, #0
 8004bfc:	d110      	bne.n	8004c20 <__mdiff+0x38>
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff fd53 	bl	80046ac <_Balloc>
 8004c06:	b930      	cbnz	r0, 8004c16 <__mdiff+0x2e>
 8004c08:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <__mdiff+0x10c>)
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	f240 2132 	movw	r1, #562	; 0x232
 8004c10:	4839      	ldr	r0, [pc, #228]	; (8004cf8 <__mdiff+0x110>)
 8004c12:	f000 f9d5 	bl	8004fc0 <__assert_func>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c20:	bfa4      	itt	ge
 8004c22:	4643      	movge	r3, r8
 8004c24:	46a0      	movge	r8, r4
 8004c26:	4630      	mov	r0, r6
 8004c28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004c2c:	bfa6      	itte	ge
 8004c2e:	461c      	movge	r4, r3
 8004c30:	2500      	movge	r5, #0
 8004c32:	2501      	movlt	r5, #1
 8004c34:	f7ff fd3a 	bl	80046ac <_Balloc>
 8004c38:	b920      	cbnz	r0, 8004c44 <__mdiff+0x5c>
 8004c3a:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <__mdiff+0x10c>)
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c42:	e7e5      	b.n	8004c10 <__mdiff+0x28>
 8004c44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004c48:	6926      	ldr	r6, [r4, #16]
 8004c4a:	60c5      	str	r5, [r0, #12]
 8004c4c:	f104 0914 	add.w	r9, r4, #20
 8004c50:	f108 0514 	add.w	r5, r8, #20
 8004c54:	f100 0e14 	add.w	lr, r0, #20
 8004c58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004c5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c60:	f108 0210 	add.w	r2, r8, #16
 8004c64:	46f2      	mov	sl, lr
 8004c66:	2100      	movs	r1, #0
 8004c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c70:	fa1f f883 	uxth.w	r8, r3
 8004c74:	fa11 f18b 	uxtah	r1, r1, fp
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	eba1 0808 	sub.w	r8, r1, r8
 8004c7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c86:	fa1f f888 	uxth.w	r8, r8
 8004c8a:	1419      	asrs	r1, r3, #16
 8004c8c:	454e      	cmp	r6, r9
 8004c8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004c92:	f84a 3b04 	str.w	r3, [sl], #4
 8004c96:	d8e7      	bhi.n	8004c68 <__mdiff+0x80>
 8004c98:	1b33      	subs	r3, r6, r4
 8004c9a:	3b15      	subs	r3, #21
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	3415      	adds	r4, #21
 8004ca4:	42a6      	cmp	r6, r4
 8004ca6:	bf38      	it	cc
 8004ca8:	2304      	movcc	r3, #4
 8004caa:	441d      	add	r5, r3
 8004cac:	4473      	add	r3, lr
 8004cae:	469e      	mov	lr, r3
 8004cb0:	462e      	mov	r6, r5
 8004cb2:	4566      	cmp	r6, ip
 8004cb4:	d30e      	bcc.n	8004cd4 <__mdiff+0xec>
 8004cb6:	f10c 0203 	add.w	r2, ip, #3
 8004cba:	1b52      	subs	r2, r2, r5
 8004cbc:	f022 0203 	bic.w	r2, r2, #3
 8004cc0:	3d03      	subs	r5, #3
 8004cc2:	45ac      	cmp	ip, r5
 8004cc4:	bf38      	it	cc
 8004cc6:	2200      	movcc	r2, #0
 8004cc8:	441a      	add	r2, r3
 8004cca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004cce:	b17b      	cbz	r3, 8004cf0 <__mdiff+0x108>
 8004cd0:	6107      	str	r7, [r0, #16]
 8004cd2:	e7a3      	b.n	8004c1c <__mdiff+0x34>
 8004cd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8004cd8:	fa11 f288 	uxtah	r2, r1, r8
 8004cdc:	1414      	asrs	r4, r2, #16
 8004cde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004ce8:	f84e 2b04 	str.w	r2, [lr], #4
 8004cec:	1421      	asrs	r1, r4, #16
 8004cee:	e7e0      	b.n	8004cb2 <__mdiff+0xca>
 8004cf0:	3f01      	subs	r7, #1
 8004cf2:	e7ea      	b.n	8004cca <__mdiff+0xe2>
 8004cf4:	08005f4f 	.word	0x08005f4f
 8004cf8:	08005f60 	.word	0x08005f60

08004cfc <__d2b>:
 8004cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d00:	4689      	mov	r9, r1
 8004d02:	2101      	movs	r1, #1
 8004d04:	ec57 6b10 	vmov	r6, r7, d0
 8004d08:	4690      	mov	r8, r2
 8004d0a:	f7ff fccf 	bl	80046ac <_Balloc>
 8004d0e:	4604      	mov	r4, r0
 8004d10:	b930      	cbnz	r0, 8004d20 <__d2b+0x24>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <__d2b+0xb0>)
 8004d16:	4826      	ldr	r0, [pc, #152]	; (8004db0 <__d2b+0xb4>)
 8004d18:	f240 310a 	movw	r1, #778	; 0x30a
 8004d1c:	f000 f950 	bl	8004fc0 <__assert_func>
 8004d20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d28:	bb35      	cbnz	r5, 8004d78 <__d2b+0x7c>
 8004d2a:	2e00      	cmp	r6, #0
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	d028      	beq.n	8004d82 <__d2b+0x86>
 8004d30:	4668      	mov	r0, sp
 8004d32:	9600      	str	r6, [sp, #0]
 8004d34:	f7ff fd82 	bl	800483c <__lo0bits>
 8004d38:	9900      	ldr	r1, [sp, #0]
 8004d3a:	b300      	cbz	r0, 8004d7e <__d2b+0x82>
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	f1c0 0320 	rsb	r3, r0, #32
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	430b      	orrs	r3, r1
 8004d48:	40c2      	lsrs	r2, r0
 8004d4a:	6163      	str	r3, [r4, #20]
 8004d4c:	9201      	str	r2, [sp, #4]
 8004d4e:	9b01      	ldr	r3, [sp, #4]
 8004d50:	61a3      	str	r3, [r4, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2202      	movne	r2, #2
 8004d58:	2201      	moveq	r2, #1
 8004d5a:	6122      	str	r2, [r4, #16]
 8004d5c:	b1d5      	cbz	r5, 8004d94 <__d2b+0x98>
 8004d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d62:	4405      	add	r5, r0
 8004d64:	f8c9 5000 	str.w	r5, [r9]
 8004d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d6c:	f8c8 0000 	str.w	r0, [r8]
 8004d70:	4620      	mov	r0, r4
 8004d72:	b003      	add	sp, #12
 8004d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7c:	e7d5      	b.n	8004d2a <__d2b+0x2e>
 8004d7e:	6161      	str	r1, [r4, #20]
 8004d80:	e7e5      	b.n	8004d4e <__d2b+0x52>
 8004d82:	a801      	add	r0, sp, #4
 8004d84:	f7ff fd5a 	bl	800483c <__lo0bits>
 8004d88:	9b01      	ldr	r3, [sp, #4]
 8004d8a:	6163      	str	r3, [r4, #20]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	6122      	str	r2, [r4, #16]
 8004d90:	3020      	adds	r0, #32
 8004d92:	e7e3      	b.n	8004d5c <__d2b+0x60>
 8004d94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d9c:	f8c9 0000 	str.w	r0, [r9]
 8004da0:	6918      	ldr	r0, [r3, #16]
 8004da2:	f7ff fd2b 	bl	80047fc <__hi0bits>
 8004da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004daa:	e7df      	b.n	8004d6c <__d2b+0x70>
 8004dac:	08005f4f 	.word	0x08005f4f
 8004db0:	08005f60 	.word	0x08005f60

08004db4 <_calloc_r>:
 8004db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004db6:	fba1 2402 	umull	r2, r4, r1, r2
 8004dba:	b94c      	cbnz	r4, 8004dd0 <_calloc_r+0x1c>
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	9201      	str	r2, [sp, #4]
 8004dc0:	f000 f87a 	bl	8004eb8 <_malloc_r>
 8004dc4:	9a01      	ldr	r2, [sp, #4]
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	b930      	cbnz	r0, 8004dd8 <_calloc_r+0x24>
 8004dca:	4628      	mov	r0, r5
 8004dcc:	b003      	add	sp, #12
 8004dce:	bd30      	pop	{r4, r5, pc}
 8004dd0:	220c      	movs	r2, #12
 8004dd2:	6002      	str	r2, [r0, #0]
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	e7f8      	b.n	8004dca <_calloc_r+0x16>
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f7fe f96d 	bl	80030b8 <memset>
 8004dde:	e7f4      	b.n	8004dca <_calloc_r+0x16>

08004de0 <_free_r>:
 8004de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d044      	beq.n	8004e70 <_free_r+0x90>
 8004de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dea:	9001      	str	r0, [sp, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f1a1 0404 	sub.w	r4, r1, #4
 8004df2:	bfb8      	it	lt
 8004df4:	18e4      	addlt	r4, r4, r3
 8004df6:	f000 f925 	bl	8005044 <__malloc_lock>
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <_free_r+0x94>)
 8004dfc:	9801      	ldr	r0, [sp, #4]
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	b933      	cbnz	r3, 8004e10 <_free_r+0x30>
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	6014      	str	r4, [r2, #0]
 8004e06:	b003      	add	sp, #12
 8004e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e0c:	f000 b920 	b.w	8005050 <__malloc_unlock>
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d908      	bls.n	8004e26 <_free_r+0x46>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf01      	itttt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	1949      	addeq	r1, r1, r5
 8004e22:	6021      	streq	r1, [r4, #0]
 8004e24:	e7ed      	b.n	8004e02 <_free_r+0x22>
 8004e26:	461a      	mov	r2, r3
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	b10b      	cbz	r3, 8004e30 <_free_r+0x50>
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d9fa      	bls.n	8004e26 <_free_r+0x46>
 8004e30:	6811      	ldr	r1, [r2, #0]
 8004e32:	1855      	adds	r5, r2, r1
 8004e34:	42a5      	cmp	r5, r4
 8004e36:	d10b      	bne.n	8004e50 <_free_r+0x70>
 8004e38:	6824      	ldr	r4, [r4, #0]
 8004e3a:	4421      	add	r1, r4
 8004e3c:	1854      	adds	r4, r2, r1
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	6011      	str	r1, [r2, #0]
 8004e42:	d1e0      	bne.n	8004e06 <_free_r+0x26>
 8004e44:	681c      	ldr	r4, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	6053      	str	r3, [r2, #4]
 8004e4a:	4421      	add	r1, r4
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	e7da      	b.n	8004e06 <_free_r+0x26>
 8004e50:	d902      	bls.n	8004e58 <_free_r+0x78>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6003      	str	r3, [r0, #0]
 8004e56:	e7d6      	b.n	8004e06 <_free_r+0x26>
 8004e58:	6825      	ldr	r5, [r4, #0]
 8004e5a:	1961      	adds	r1, r4, r5
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	bf04      	itt	eq
 8004e60:	6819      	ldreq	r1, [r3, #0]
 8004e62:	685b      	ldreq	r3, [r3, #4]
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	bf04      	itt	eq
 8004e68:	1949      	addeq	r1, r1, r5
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	6054      	str	r4, [r2, #4]
 8004e6e:	e7ca      	b.n	8004e06 <_free_r+0x26>
 8004e70:	b003      	add	sp, #12
 8004e72:	bd30      	pop	{r4, r5, pc}
 8004e74:	20000200 	.word	0x20000200

08004e78 <sbrk_aligned>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4e0e      	ldr	r6, [pc, #56]	; (8004eb4 <sbrk_aligned+0x3c>)
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	6831      	ldr	r1, [r6, #0]
 8004e80:	4605      	mov	r5, r0
 8004e82:	b911      	cbnz	r1, 8004e8a <sbrk_aligned+0x12>
 8004e84:	f000 f88c 	bl	8004fa0 <_sbrk_r>
 8004e88:	6030      	str	r0, [r6, #0]
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 f887 	bl	8004fa0 <_sbrk_r>
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	d00a      	beq.n	8004eac <sbrk_aligned+0x34>
 8004e96:	1cc4      	adds	r4, r0, #3
 8004e98:	f024 0403 	bic.w	r4, r4, #3
 8004e9c:	42a0      	cmp	r0, r4
 8004e9e:	d007      	beq.n	8004eb0 <sbrk_aligned+0x38>
 8004ea0:	1a21      	subs	r1, r4, r0
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f87c 	bl	8004fa0 <_sbrk_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d101      	bne.n	8004eb0 <sbrk_aligned+0x38>
 8004eac:	f04f 34ff 	mov.w	r4, #4294967295
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	20000204 	.word	0x20000204

08004eb8 <_malloc_r>:
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	1ccd      	adds	r5, r1, #3
 8004ebe:	f025 0503 	bic.w	r5, r5, #3
 8004ec2:	3508      	adds	r5, #8
 8004ec4:	2d0c      	cmp	r5, #12
 8004ec6:	bf38      	it	cc
 8004ec8:	250c      	movcc	r5, #12
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	4607      	mov	r7, r0
 8004ece:	db01      	blt.n	8004ed4 <_malloc_r+0x1c>
 8004ed0:	42a9      	cmp	r1, r5
 8004ed2:	d905      	bls.n	8004ee0 <_malloc_r+0x28>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	2600      	movs	r6, #0
 8004eda:	4630      	mov	r0, r6
 8004edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee0:	4e2e      	ldr	r6, [pc, #184]	; (8004f9c <_malloc_r+0xe4>)
 8004ee2:	f000 f8af 	bl	8005044 <__malloc_lock>
 8004ee6:	6833      	ldr	r3, [r6, #0]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	bb34      	cbnz	r4, 8004f3a <_malloc_r+0x82>
 8004eec:	4629      	mov	r1, r5
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f7ff ffc2 	bl	8004e78 <sbrk_aligned>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	d14d      	bne.n	8004f96 <_malloc_r+0xde>
 8004efa:	6834      	ldr	r4, [r6, #0]
 8004efc:	4626      	mov	r6, r4
 8004efe:	2e00      	cmp	r6, #0
 8004f00:	d140      	bne.n	8004f84 <_malloc_r+0xcc>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	4631      	mov	r1, r6
 8004f06:	4638      	mov	r0, r7
 8004f08:	eb04 0803 	add.w	r8, r4, r3
 8004f0c:	f000 f848 	bl	8004fa0 <_sbrk_r>
 8004f10:	4580      	cmp	r8, r0
 8004f12:	d13a      	bne.n	8004f8a <_malloc_r+0xd2>
 8004f14:	6821      	ldr	r1, [r4, #0]
 8004f16:	3503      	adds	r5, #3
 8004f18:	1a6d      	subs	r5, r5, r1
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	4629      	mov	r1, r5
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f7ff ffa5 	bl	8004e78 <sbrk_aligned>
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d02b      	beq.n	8004f8a <_malloc_r+0xd2>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	442b      	add	r3, r5
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	e00e      	b.n	8004f58 <_malloc_r+0xa0>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	1b52      	subs	r2, r2, r5
 8004f3e:	d41e      	bmi.n	8004f7e <_malloc_r+0xc6>
 8004f40:	2a0b      	cmp	r2, #11
 8004f42:	d916      	bls.n	8004f72 <_malloc_r+0xba>
 8004f44:	1961      	adds	r1, r4, r5
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	6025      	str	r5, [r4, #0]
 8004f4a:	bf18      	it	ne
 8004f4c:	6059      	strne	r1, [r3, #4]
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	bf08      	it	eq
 8004f52:	6031      	streq	r1, [r6, #0]
 8004f54:	5162      	str	r2, [r4, r5]
 8004f56:	604b      	str	r3, [r1, #4]
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f104 060b 	add.w	r6, r4, #11
 8004f5e:	f000 f877 	bl	8005050 <__malloc_unlock>
 8004f62:	f026 0607 	bic.w	r6, r6, #7
 8004f66:	1d23      	adds	r3, r4, #4
 8004f68:	1af2      	subs	r2, r6, r3
 8004f6a:	d0b6      	beq.n	8004eda <_malloc_r+0x22>
 8004f6c:	1b9b      	subs	r3, r3, r6
 8004f6e:	50a3      	str	r3, [r4, r2]
 8004f70:	e7b3      	b.n	8004eda <_malloc_r+0x22>
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	bf0c      	ite	eq
 8004f78:	6032      	streq	r2, [r6, #0]
 8004f7a:	605a      	strne	r2, [r3, #4]
 8004f7c:	e7ec      	b.n	8004f58 <_malloc_r+0xa0>
 8004f7e:	4623      	mov	r3, r4
 8004f80:	6864      	ldr	r4, [r4, #4]
 8004f82:	e7b2      	b.n	8004eea <_malloc_r+0x32>
 8004f84:	4634      	mov	r4, r6
 8004f86:	6876      	ldr	r6, [r6, #4]
 8004f88:	e7b9      	b.n	8004efe <_malloc_r+0x46>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f000 f85e 	bl	8005050 <__malloc_unlock>
 8004f94:	e7a1      	b.n	8004eda <_malloc_r+0x22>
 8004f96:	6025      	str	r5, [r4, #0]
 8004f98:	e7de      	b.n	8004f58 <_malloc_r+0xa0>
 8004f9a:	bf00      	nop
 8004f9c:	20000200 	.word	0x20000200

08004fa0 <_sbrk_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d06      	ldr	r5, [pc, #24]	; (8004fbc <_sbrk_r+0x1c>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	f7fc fe68 	bl	8001c80 <_sbrk>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_sbrk_r+0x1a>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_sbrk_r+0x1a>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000208 	.word	0x20000208

08004fc0 <__assert_func>:
 8004fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fc2:	4614      	mov	r4, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <__assert_func+0x2c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4605      	mov	r5, r0
 8004fcc:	68d8      	ldr	r0, [r3, #12]
 8004fce:	b14c      	cbz	r4, 8004fe4 <__assert_func+0x24>
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <__assert_func+0x30>)
 8004fd2:	9100      	str	r1, [sp, #0]
 8004fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fd8:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <__assert_func+0x34>)
 8004fda:	462b      	mov	r3, r5
 8004fdc:	f000 f80e 	bl	8004ffc <fiprintf>
 8004fe0:	f000 fa64 	bl	80054ac <abort>
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <__assert_func+0x38>)
 8004fe6:	461c      	mov	r4, r3
 8004fe8:	e7f3      	b.n	8004fd2 <__assert_func+0x12>
 8004fea:	bf00      	nop
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	080060bc 	.word	0x080060bc
 8004ff4:	080060c9 	.word	0x080060c9
 8004ff8:	080060f7 	.word	0x080060f7

08004ffc <fiprintf>:
 8004ffc:	b40e      	push	{r1, r2, r3}
 8004ffe:	b503      	push	{r0, r1, lr}
 8005000:	4601      	mov	r1, r0
 8005002:	ab03      	add	r3, sp, #12
 8005004:	4805      	ldr	r0, [pc, #20]	; (800501c <fiprintf+0x20>)
 8005006:	f853 2b04 	ldr.w	r2, [r3], #4
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f000 f84f 	bl	80050b0 <_vfiprintf_r>
 8005012:	b002      	add	sp, #8
 8005014:	f85d eb04 	ldr.w	lr, [sp], #4
 8005018:	b003      	add	sp, #12
 800501a:	4770      	bx	lr
 800501c:	2000000c 	.word	0x2000000c

08005020 <__ascii_mbtowc>:
 8005020:	b082      	sub	sp, #8
 8005022:	b901      	cbnz	r1, 8005026 <__ascii_mbtowc+0x6>
 8005024:	a901      	add	r1, sp, #4
 8005026:	b142      	cbz	r2, 800503a <__ascii_mbtowc+0x1a>
 8005028:	b14b      	cbz	r3, 800503e <__ascii_mbtowc+0x1e>
 800502a:	7813      	ldrb	r3, [r2, #0]
 800502c:	600b      	str	r3, [r1, #0]
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	1e10      	subs	r0, r2, #0
 8005032:	bf18      	it	ne
 8005034:	2001      	movne	r0, #1
 8005036:	b002      	add	sp, #8
 8005038:	4770      	bx	lr
 800503a:	4610      	mov	r0, r2
 800503c:	e7fb      	b.n	8005036 <__ascii_mbtowc+0x16>
 800503e:	f06f 0001 	mvn.w	r0, #1
 8005042:	e7f8      	b.n	8005036 <__ascii_mbtowc+0x16>

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__malloc_lock+0x8>)
 8005046:	f000 bbf1 	b.w	800582c <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	2000020c 	.word	0x2000020c

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__malloc_unlock+0x8>)
 8005052:	f000 bbec 	b.w	800582e <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	2000020c 	.word	0x2000020c

0800505c <__sfputc_r>:
 800505c:	6893      	ldr	r3, [r2, #8]
 800505e:	3b01      	subs	r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	b410      	push	{r4}
 8005064:	6093      	str	r3, [r2, #8]
 8005066:	da08      	bge.n	800507a <__sfputc_r+0x1e>
 8005068:	6994      	ldr	r4, [r2, #24]
 800506a:	42a3      	cmp	r3, r4
 800506c:	db01      	blt.n	8005072 <__sfputc_r+0x16>
 800506e:	290a      	cmp	r1, #10
 8005070:	d103      	bne.n	800507a <__sfputc_r+0x1e>
 8005072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005076:	f000 b94b 	b.w	8005310 <__swbuf_r>
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	1c58      	adds	r0, r3, #1
 800507e:	6010      	str	r0, [r2, #0]
 8005080:	7019      	strb	r1, [r3, #0]
 8005082:	4608      	mov	r0, r1
 8005084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005088:	4770      	bx	lr

0800508a <__sfputs_r>:
 800508a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508c:	4606      	mov	r6, r0
 800508e:	460f      	mov	r7, r1
 8005090:	4614      	mov	r4, r2
 8005092:	18d5      	adds	r5, r2, r3
 8005094:	42ac      	cmp	r4, r5
 8005096:	d101      	bne.n	800509c <__sfputs_r+0x12>
 8005098:	2000      	movs	r0, #0
 800509a:	e007      	b.n	80050ac <__sfputs_r+0x22>
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	463a      	mov	r2, r7
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7ff ffda 	bl	800505c <__sfputc_r>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d1f3      	bne.n	8005094 <__sfputs_r+0xa>
 80050ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050b0 <_vfiprintf_r>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	460d      	mov	r5, r1
 80050b6:	b09d      	sub	sp, #116	; 0x74
 80050b8:	4614      	mov	r4, r2
 80050ba:	4698      	mov	r8, r3
 80050bc:	4606      	mov	r6, r0
 80050be:	b118      	cbz	r0, 80050c8 <_vfiprintf_r+0x18>
 80050c0:	6983      	ldr	r3, [r0, #24]
 80050c2:	b90b      	cbnz	r3, 80050c8 <_vfiprintf_r+0x18>
 80050c4:	f000 fb14 	bl	80056f0 <__sinit>
 80050c8:	4b89      	ldr	r3, [pc, #548]	; (80052f0 <_vfiprintf_r+0x240>)
 80050ca:	429d      	cmp	r5, r3
 80050cc:	d11b      	bne.n	8005106 <_vfiprintf_r+0x56>
 80050ce:	6875      	ldr	r5, [r6, #4]
 80050d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050d2:	07d9      	lsls	r1, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <_vfiprintf_r+0x32>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	059a      	lsls	r2, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_vfiprintf_r+0x32>
 80050dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050de:	f000 fba5 	bl	800582c <__retarget_lock_acquire_recursive>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	071b      	lsls	r3, r3, #28
 80050e6:	d501      	bpl.n	80050ec <_vfiprintf_r+0x3c>
 80050e8:	692b      	ldr	r3, [r5, #16]
 80050ea:	b9eb      	cbnz	r3, 8005128 <_vfiprintf_r+0x78>
 80050ec:	4629      	mov	r1, r5
 80050ee:	4630      	mov	r0, r6
 80050f0:	f000 f96e 	bl	80053d0 <__swsetup_r>
 80050f4:	b1c0      	cbz	r0, 8005128 <_vfiprintf_r+0x78>
 80050f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050f8:	07dc      	lsls	r4, r3, #31
 80050fa:	d50e      	bpl.n	800511a <_vfiprintf_r+0x6a>
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	b01d      	add	sp, #116	; 0x74
 8005102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005106:	4b7b      	ldr	r3, [pc, #492]	; (80052f4 <_vfiprintf_r+0x244>)
 8005108:	429d      	cmp	r5, r3
 800510a:	d101      	bne.n	8005110 <_vfiprintf_r+0x60>
 800510c:	68b5      	ldr	r5, [r6, #8]
 800510e:	e7df      	b.n	80050d0 <_vfiprintf_r+0x20>
 8005110:	4b79      	ldr	r3, [pc, #484]	; (80052f8 <_vfiprintf_r+0x248>)
 8005112:	429d      	cmp	r5, r3
 8005114:	bf08      	it	eq
 8005116:	68f5      	ldreq	r5, [r6, #12]
 8005118:	e7da      	b.n	80050d0 <_vfiprintf_r+0x20>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	0598      	lsls	r0, r3, #22
 800511e:	d4ed      	bmi.n	80050fc <_vfiprintf_r+0x4c>
 8005120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005122:	f000 fb84 	bl	800582e <__retarget_lock_release_recursive>
 8005126:	e7e9      	b.n	80050fc <_vfiprintf_r+0x4c>
 8005128:	2300      	movs	r3, #0
 800512a:	9309      	str	r3, [sp, #36]	; 0x24
 800512c:	2320      	movs	r3, #32
 800512e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005132:	f8cd 800c 	str.w	r8, [sp, #12]
 8005136:	2330      	movs	r3, #48	; 0x30
 8005138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052fc <_vfiprintf_r+0x24c>
 800513c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005140:	f04f 0901 	mov.w	r9, #1
 8005144:	4623      	mov	r3, r4
 8005146:	469a      	mov	sl, r3
 8005148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800514c:	b10a      	cbz	r2, 8005152 <_vfiprintf_r+0xa2>
 800514e:	2a25      	cmp	r2, #37	; 0x25
 8005150:	d1f9      	bne.n	8005146 <_vfiprintf_r+0x96>
 8005152:	ebba 0b04 	subs.w	fp, sl, r4
 8005156:	d00b      	beq.n	8005170 <_vfiprintf_r+0xc0>
 8005158:	465b      	mov	r3, fp
 800515a:	4622      	mov	r2, r4
 800515c:	4629      	mov	r1, r5
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff ff93 	bl	800508a <__sfputs_r>
 8005164:	3001      	adds	r0, #1
 8005166:	f000 80aa 	beq.w	80052be <_vfiprintf_r+0x20e>
 800516a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516c:	445a      	add	r2, fp
 800516e:	9209      	str	r2, [sp, #36]	; 0x24
 8005170:	f89a 3000 	ldrb.w	r3, [sl]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80a2 	beq.w	80052be <_vfiprintf_r+0x20e>
 800517a:	2300      	movs	r3, #0
 800517c:	f04f 32ff 	mov.w	r2, #4294967295
 8005180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005184:	f10a 0a01 	add.w	sl, sl, #1
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005190:	931a      	str	r3, [sp, #104]	; 0x68
 8005192:	4654      	mov	r4, sl
 8005194:	2205      	movs	r2, #5
 8005196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519a:	4858      	ldr	r0, [pc, #352]	; (80052fc <_vfiprintf_r+0x24c>)
 800519c:	f7fb f878 	bl	8000290 <memchr>
 80051a0:	9a04      	ldr	r2, [sp, #16]
 80051a2:	b9d8      	cbnz	r0, 80051dc <_vfiprintf_r+0x12c>
 80051a4:	06d1      	lsls	r1, r2, #27
 80051a6:	bf44      	itt	mi
 80051a8:	2320      	movmi	r3, #32
 80051aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ae:	0713      	lsls	r3, r2, #28
 80051b0:	bf44      	itt	mi
 80051b2:	232b      	movmi	r3, #43	; 0x2b
 80051b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b8:	f89a 3000 	ldrb.w	r3, [sl]
 80051bc:	2b2a      	cmp	r3, #42	; 0x2a
 80051be:	d015      	beq.n	80051ec <_vfiprintf_r+0x13c>
 80051c0:	9a07      	ldr	r2, [sp, #28]
 80051c2:	4654      	mov	r4, sl
 80051c4:	2000      	movs	r0, #0
 80051c6:	f04f 0c0a 	mov.w	ip, #10
 80051ca:	4621      	mov	r1, r4
 80051cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d0:	3b30      	subs	r3, #48	; 0x30
 80051d2:	2b09      	cmp	r3, #9
 80051d4:	d94e      	bls.n	8005274 <_vfiprintf_r+0x1c4>
 80051d6:	b1b0      	cbz	r0, 8005206 <_vfiprintf_r+0x156>
 80051d8:	9207      	str	r2, [sp, #28]
 80051da:	e014      	b.n	8005206 <_vfiprintf_r+0x156>
 80051dc:	eba0 0308 	sub.w	r3, r0, r8
 80051e0:	fa09 f303 	lsl.w	r3, r9, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	46a2      	mov	sl, r4
 80051ea:	e7d2      	b.n	8005192 <_vfiprintf_r+0xe2>
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	1d19      	adds	r1, r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	9103      	str	r1, [sp, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bfbb      	ittet	lt
 80051f8:	425b      	neglt	r3, r3
 80051fa:	f042 0202 	orrlt.w	r2, r2, #2
 80051fe:	9307      	strge	r3, [sp, #28]
 8005200:	9307      	strlt	r3, [sp, #28]
 8005202:	bfb8      	it	lt
 8005204:	9204      	strlt	r2, [sp, #16]
 8005206:	7823      	ldrb	r3, [r4, #0]
 8005208:	2b2e      	cmp	r3, #46	; 0x2e
 800520a:	d10c      	bne.n	8005226 <_vfiprintf_r+0x176>
 800520c:	7863      	ldrb	r3, [r4, #1]
 800520e:	2b2a      	cmp	r3, #42	; 0x2a
 8005210:	d135      	bne.n	800527e <_vfiprintf_r+0x1ce>
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	9203      	str	r2, [sp, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	bfb8      	it	lt
 800521e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005222:	3402      	adds	r4, #2
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800530c <_vfiprintf_r+0x25c>
 800522a:	7821      	ldrb	r1, [r4, #0]
 800522c:	2203      	movs	r2, #3
 800522e:	4650      	mov	r0, sl
 8005230:	f7fb f82e 	bl	8000290 <memchr>
 8005234:	b140      	cbz	r0, 8005248 <_vfiprintf_r+0x198>
 8005236:	2340      	movs	r3, #64	; 0x40
 8005238:	eba0 000a 	sub.w	r0, r0, sl
 800523c:	fa03 f000 	lsl.w	r0, r3, r0
 8005240:	9b04      	ldr	r3, [sp, #16]
 8005242:	4303      	orrs	r3, r0
 8005244:	3401      	adds	r4, #1
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524c:	482c      	ldr	r0, [pc, #176]	; (8005300 <_vfiprintf_r+0x250>)
 800524e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005252:	2206      	movs	r2, #6
 8005254:	f7fb f81c 	bl	8000290 <memchr>
 8005258:	2800      	cmp	r0, #0
 800525a:	d03f      	beq.n	80052dc <_vfiprintf_r+0x22c>
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <_vfiprintf_r+0x254>)
 800525e:	bb1b      	cbnz	r3, 80052a8 <_vfiprintf_r+0x1f8>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	3307      	adds	r3, #7
 8005264:	f023 0307 	bic.w	r3, r3, #7
 8005268:	3308      	adds	r3, #8
 800526a:	9303      	str	r3, [sp, #12]
 800526c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526e:	443b      	add	r3, r7
 8005270:	9309      	str	r3, [sp, #36]	; 0x24
 8005272:	e767      	b.n	8005144 <_vfiprintf_r+0x94>
 8005274:	fb0c 3202 	mla	r2, ip, r2, r3
 8005278:	460c      	mov	r4, r1
 800527a:	2001      	movs	r0, #1
 800527c:	e7a5      	b.n	80051ca <_vfiprintf_r+0x11a>
 800527e:	2300      	movs	r3, #0
 8005280:	3401      	adds	r4, #1
 8005282:	9305      	str	r3, [sp, #20]
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0c0a 	mov.w	ip, #10
 800528a:	4620      	mov	r0, r4
 800528c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005290:	3a30      	subs	r2, #48	; 0x30
 8005292:	2a09      	cmp	r2, #9
 8005294:	d903      	bls.n	800529e <_vfiprintf_r+0x1ee>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0c5      	beq.n	8005226 <_vfiprintf_r+0x176>
 800529a:	9105      	str	r1, [sp, #20]
 800529c:	e7c3      	b.n	8005226 <_vfiprintf_r+0x176>
 800529e:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a2:	4604      	mov	r4, r0
 80052a4:	2301      	movs	r3, #1
 80052a6:	e7f0      	b.n	800528a <_vfiprintf_r+0x1da>
 80052a8:	ab03      	add	r3, sp, #12
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	462a      	mov	r2, r5
 80052ae:	4b16      	ldr	r3, [pc, #88]	; (8005308 <_vfiprintf_r+0x258>)
 80052b0:	a904      	add	r1, sp, #16
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7fd ffa8 	bl	8003208 <_printf_float>
 80052b8:	4607      	mov	r7, r0
 80052ba:	1c78      	adds	r0, r7, #1
 80052bc:	d1d6      	bne.n	800526c <_vfiprintf_r+0x1bc>
 80052be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052c0:	07d9      	lsls	r1, r3, #31
 80052c2:	d405      	bmi.n	80052d0 <_vfiprintf_r+0x220>
 80052c4:	89ab      	ldrh	r3, [r5, #12]
 80052c6:	059a      	lsls	r2, r3, #22
 80052c8:	d402      	bmi.n	80052d0 <_vfiprintf_r+0x220>
 80052ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052cc:	f000 faaf 	bl	800582e <__retarget_lock_release_recursive>
 80052d0:	89ab      	ldrh	r3, [r5, #12]
 80052d2:	065b      	lsls	r3, r3, #25
 80052d4:	f53f af12 	bmi.w	80050fc <_vfiprintf_r+0x4c>
 80052d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052da:	e711      	b.n	8005100 <_vfiprintf_r+0x50>
 80052dc:	ab03      	add	r3, sp, #12
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	462a      	mov	r2, r5
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <_vfiprintf_r+0x258>)
 80052e4:	a904      	add	r1, sp, #16
 80052e6:	4630      	mov	r0, r6
 80052e8:	f7fe fa32 	bl	8003750 <_printf_i>
 80052ec:	e7e4      	b.n	80052b8 <_vfiprintf_r+0x208>
 80052ee:	bf00      	nop
 80052f0:	08006234 	.word	0x08006234
 80052f4:	08006254 	.word	0x08006254
 80052f8:	08006214 	.word	0x08006214
 80052fc:	08006102 	.word	0x08006102
 8005300:	0800610c 	.word	0x0800610c
 8005304:	08003209 	.word	0x08003209
 8005308:	0800508b 	.word	0x0800508b
 800530c:	08006108 	.word	0x08006108

08005310 <__swbuf_r>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	460e      	mov	r6, r1
 8005314:	4614      	mov	r4, r2
 8005316:	4605      	mov	r5, r0
 8005318:	b118      	cbz	r0, 8005322 <__swbuf_r+0x12>
 800531a:	6983      	ldr	r3, [r0, #24]
 800531c:	b90b      	cbnz	r3, 8005322 <__swbuf_r+0x12>
 800531e:	f000 f9e7 	bl	80056f0 <__sinit>
 8005322:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <__swbuf_r+0x98>)
 8005324:	429c      	cmp	r4, r3
 8005326:	d12b      	bne.n	8005380 <__swbuf_r+0x70>
 8005328:	686c      	ldr	r4, [r5, #4]
 800532a:	69a3      	ldr	r3, [r4, #24]
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	071a      	lsls	r2, r3, #28
 8005332:	d52f      	bpl.n	8005394 <__swbuf_r+0x84>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	b36b      	cbz	r3, 8005394 <__swbuf_r+0x84>
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	6820      	ldr	r0, [r4, #0]
 800533c:	1ac0      	subs	r0, r0, r3
 800533e:	6963      	ldr	r3, [r4, #20]
 8005340:	b2f6      	uxtb	r6, r6
 8005342:	4283      	cmp	r3, r0
 8005344:	4637      	mov	r7, r6
 8005346:	dc04      	bgt.n	8005352 <__swbuf_r+0x42>
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f93c 	bl	80055c8 <_fflush_r>
 8005350:	bb30      	cbnz	r0, 80053a0 <__swbuf_r+0x90>
 8005352:	68a3      	ldr	r3, [r4, #8]
 8005354:	3b01      	subs	r3, #1
 8005356:	60a3      	str	r3, [r4, #8]
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	701e      	strb	r6, [r3, #0]
 8005360:	6963      	ldr	r3, [r4, #20]
 8005362:	3001      	adds	r0, #1
 8005364:	4283      	cmp	r3, r0
 8005366:	d004      	beq.n	8005372 <__swbuf_r+0x62>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d506      	bpl.n	800537c <__swbuf_r+0x6c>
 800536e:	2e0a      	cmp	r6, #10
 8005370:	d104      	bne.n	800537c <__swbuf_r+0x6c>
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	f000 f927 	bl	80055c8 <_fflush_r>
 800537a:	b988      	cbnz	r0, 80053a0 <__swbuf_r+0x90>
 800537c:	4638      	mov	r0, r7
 800537e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <__swbuf_r+0x9c>)
 8005382:	429c      	cmp	r4, r3
 8005384:	d101      	bne.n	800538a <__swbuf_r+0x7a>
 8005386:	68ac      	ldr	r4, [r5, #8]
 8005388:	e7cf      	b.n	800532a <__swbuf_r+0x1a>
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <__swbuf_r+0xa0>)
 800538c:	429c      	cmp	r4, r3
 800538e:	bf08      	it	eq
 8005390:	68ec      	ldreq	r4, [r5, #12]
 8005392:	e7ca      	b.n	800532a <__swbuf_r+0x1a>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f81a 	bl	80053d0 <__swsetup_r>
 800539c:	2800      	cmp	r0, #0
 800539e:	d0cb      	beq.n	8005338 <__swbuf_r+0x28>
 80053a0:	f04f 37ff 	mov.w	r7, #4294967295
 80053a4:	e7ea      	b.n	800537c <__swbuf_r+0x6c>
 80053a6:	bf00      	nop
 80053a8:	08006234 	.word	0x08006234
 80053ac:	08006254 	.word	0x08006254
 80053b0:	08006214 	.word	0x08006214

080053b4 <__ascii_wctomb>:
 80053b4:	b149      	cbz	r1, 80053ca <__ascii_wctomb+0x16>
 80053b6:	2aff      	cmp	r2, #255	; 0xff
 80053b8:	bf85      	ittet	hi
 80053ba:	238a      	movhi	r3, #138	; 0x8a
 80053bc:	6003      	strhi	r3, [r0, #0]
 80053be:	700a      	strbls	r2, [r1, #0]
 80053c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80053c4:	bf98      	it	ls
 80053c6:	2001      	movls	r0, #1
 80053c8:	4770      	bx	lr
 80053ca:	4608      	mov	r0, r1
 80053cc:	4770      	bx	lr
	...

080053d0 <__swsetup_r>:
 80053d0:	4b32      	ldr	r3, [pc, #200]	; (800549c <__swsetup_r+0xcc>)
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	b125      	cbz	r5, 80053e6 <__swsetup_r+0x16>
 80053dc:	69ab      	ldr	r3, [r5, #24]
 80053de:	b913      	cbnz	r3, 80053e6 <__swsetup_r+0x16>
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f985 	bl	80056f0 <__sinit>
 80053e6:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <__swsetup_r+0xd0>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	d10f      	bne.n	800540c <__swsetup_r+0x3c>
 80053ec:	686c      	ldr	r4, [r5, #4]
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f4:	0719      	lsls	r1, r3, #28
 80053f6:	d42c      	bmi.n	8005452 <__swsetup_r+0x82>
 80053f8:	06dd      	lsls	r5, r3, #27
 80053fa:	d411      	bmi.n	8005420 <__swsetup_r+0x50>
 80053fc:	2309      	movs	r3, #9
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	f04f 30ff 	mov.w	r0, #4294967295
 800540a:	e03e      	b.n	800548a <__swsetup_r+0xba>
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <__swsetup_r+0xd4>)
 800540e:	429c      	cmp	r4, r3
 8005410:	d101      	bne.n	8005416 <__swsetup_r+0x46>
 8005412:	68ac      	ldr	r4, [r5, #8]
 8005414:	e7eb      	b.n	80053ee <__swsetup_r+0x1e>
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <__swsetup_r+0xd8>)
 8005418:	429c      	cmp	r4, r3
 800541a:	bf08      	it	eq
 800541c:	68ec      	ldreq	r4, [r5, #12]
 800541e:	e7e6      	b.n	80053ee <__swsetup_r+0x1e>
 8005420:	0758      	lsls	r0, r3, #29
 8005422:	d512      	bpl.n	800544a <__swsetup_r+0x7a>
 8005424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005426:	b141      	cbz	r1, 800543a <__swsetup_r+0x6a>
 8005428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <__swsetup_r+0x66>
 8005430:	4630      	mov	r0, r6
 8005432:	f7ff fcd5 	bl	8004de0 <_free_r>
 8005436:	2300      	movs	r3, #0
 8005438:	6363      	str	r3, [r4, #52]	; 0x34
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0308 	orr.w	r3, r3, #8
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	b94b      	cbnz	r3, 800546a <__swsetup_r+0x9a>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d003      	beq.n	800546a <__swsetup_r+0x9a>
 8005462:	4621      	mov	r1, r4
 8005464:	4630      	mov	r0, r6
 8005466:	f000 fa09 	bl	800587c <__smakebuf_r>
 800546a:	89a0      	ldrh	r0, [r4, #12]
 800546c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005470:	f010 0301 	ands.w	r3, r0, #1
 8005474:	d00a      	beq.n	800548c <__swsetup_r+0xbc>
 8005476:	2300      	movs	r3, #0
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	6963      	ldr	r3, [r4, #20]
 800547c:	425b      	negs	r3, r3
 800547e:	61a3      	str	r3, [r4, #24]
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	b943      	cbnz	r3, 8005496 <__swsetup_r+0xc6>
 8005484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005488:	d1ba      	bne.n	8005400 <__swsetup_r+0x30>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	0781      	lsls	r1, r0, #30
 800548e:	bf58      	it	pl
 8005490:	6963      	ldrpl	r3, [r4, #20]
 8005492:	60a3      	str	r3, [r4, #8]
 8005494:	e7f4      	b.n	8005480 <__swsetup_r+0xb0>
 8005496:	2000      	movs	r0, #0
 8005498:	e7f7      	b.n	800548a <__swsetup_r+0xba>
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	08006234 	.word	0x08006234
 80054a4:	08006254 	.word	0x08006254
 80054a8:	08006214 	.word	0x08006214

080054ac <abort>:
 80054ac:	b508      	push	{r3, lr}
 80054ae:	2006      	movs	r0, #6
 80054b0:	f000 fa4c 	bl	800594c <raise>
 80054b4:	2001      	movs	r0, #1
 80054b6:	f7fc fb87 	bl	8001bc8 <_exit>
	...

080054bc <__sflush_r>:
 80054bc:	898a      	ldrh	r2, [r1, #12]
 80054be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c2:	4605      	mov	r5, r0
 80054c4:	0710      	lsls	r0, r2, #28
 80054c6:	460c      	mov	r4, r1
 80054c8:	d458      	bmi.n	800557c <__sflush_r+0xc0>
 80054ca:	684b      	ldr	r3, [r1, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dc05      	bgt.n	80054dc <__sflush_r+0x20>
 80054d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dc02      	bgt.n	80054dc <__sflush_r+0x20>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054de:	2e00      	cmp	r6, #0
 80054e0:	d0f9      	beq.n	80054d6 <__sflush_r+0x1a>
 80054e2:	2300      	movs	r3, #0
 80054e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054e8:	682f      	ldr	r7, [r5, #0]
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	d032      	beq.n	8005554 <__sflush_r+0x98>
 80054ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	075a      	lsls	r2, r3, #29
 80054f4:	d505      	bpl.n	8005502 <__sflush_r+0x46>
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	1ac0      	subs	r0, r0, r3
 80054fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054fc:	b10b      	cbz	r3, 8005502 <__sflush_r+0x46>
 80054fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005500:	1ac0      	subs	r0, r0, r3
 8005502:	2300      	movs	r3, #0
 8005504:	4602      	mov	r2, r0
 8005506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005508:	6a21      	ldr	r1, [r4, #32]
 800550a:	4628      	mov	r0, r5
 800550c:	47b0      	blx	r6
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	d106      	bne.n	8005522 <__sflush_r+0x66>
 8005514:	6829      	ldr	r1, [r5, #0]
 8005516:	291d      	cmp	r1, #29
 8005518:	d82c      	bhi.n	8005574 <__sflush_r+0xb8>
 800551a:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <__sflush_r+0x108>)
 800551c:	40ca      	lsrs	r2, r1
 800551e:	07d6      	lsls	r6, r2, #31
 8005520:	d528      	bpl.n	8005574 <__sflush_r+0xb8>
 8005522:	2200      	movs	r2, #0
 8005524:	6062      	str	r2, [r4, #4]
 8005526:	04d9      	lsls	r1, r3, #19
 8005528:	6922      	ldr	r2, [r4, #16]
 800552a:	6022      	str	r2, [r4, #0]
 800552c:	d504      	bpl.n	8005538 <__sflush_r+0x7c>
 800552e:	1c42      	adds	r2, r0, #1
 8005530:	d101      	bne.n	8005536 <__sflush_r+0x7a>
 8005532:	682b      	ldr	r3, [r5, #0]
 8005534:	b903      	cbnz	r3, 8005538 <__sflush_r+0x7c>
 8005536:	6560      	str	r0, [r4, #84]	; 0x54
 8005538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800553a:	602f      	str	r7, [r5, #0]
 800553c:	2900      	cmp	r1, #0
 800553e:	d0ca      	beq.n	80054d6 <__sflush_r+0x1a>
 8005540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005544:	4299      	cmp	r1, r3
 8005546:	d002      	beq.n	800554e <__sflush_r+0x92>
 8005548:	4628      	mov	r0, r5
 800554a:	f7ff fc49 	bl	8004de0 <_free_r>
 800554e:	2000      	movs	r0, #0
 8005550:	6360      	str	r0, [r4, #52]	; 0x34
 8005552:	e7c1      	b.n	80054d8 <__sflush_r+0x1c>
 8005554:	6a21      	ldr	r1, [r4, #32]
 8005556:	2301      	movs	r3, #1
 8005558:	4628      	mov	r0, r5
 800555a:	47b0      	blx	r6
 800555c:	1c41      	adds	r1, r0, #1
 800555e:	d1c7      	bne.n	80054f0 <__sflush_r+0x34>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0c4      	beq.n	80054f0 <__sflush_r+0x34>
 8005566:	2b1d      	cmp	r3, #29
 8005568:	d001      	beq.n	800556e <__sflush_r+0xb2>
 800556a:	2b16      	cmp	r3, #22
 800556c:	d101      	bne.n	8005572 <__sflush_r+0xb6>
 800556e:	602f      	str	r7, [r5, #0]
 8005570:	e7b1      	b.n	80054d6 <__sflush_r+0x1a>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	e7ad      	b.n	80054d8 <__sflush_r+0x1c>
 800557c:	690f      	ldr	r7, [r1, #16]
 800557e:	2f00      	cmp	r7, #0
 8005580:	d0a9      	beq.n	80054d6 <__sflush_r+0x1a>
 8005582:	0793      	lsls	r3, r2, #30
 8005584:	680e      	ldr	r6, [r1, #0]
 8005586:	bf08      	it	eq
 8005588:	694b      	ldreq	r3, [r1, #20]
 800558a:	600f      	str	r7, [r1, #0]
 800558c:	bf18      	it	ne
 800558e:	2300      	movne	r3, #0
 8005590:	eba6 0807 	sub.w	r8, r6, r7
 8005594:	608b      	str	r3, [r1, #8]
 8005596:	f1b8 0f00 	cmp.w	r8, #0
 800559a:	dd9c      	ble.n	80054d6 <__sflush_r+0x1a>
 800559c:	6a21      	ldr	r1, [r4, #32]
 800559e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055a0:	4643      	mov	r3, r8
 80055a2:	463a      	mov	r2, r7
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b0      	blx	r6
 80055a8:	2800      	cmp	r0, #0
 80055aa:	dc06      	bgt.n	80055ba <__sflush_r+0xfe>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	e78e      	b.n	80054d8 <__sflush_r+0x1c>
 80055ba:	4407      	add	r7, r0
 80055bc:	eba8 0800 	sub.w	r8, r8, r0
 80055c0:	e7e9      	b.n	8005596 <__sflush_r+0xda>
 80055c2:	bf00      	nop
 80055c4:	20400001 	.word	0x20400001

080055c8 <_fflush_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	690b      	ldr	r3, [r1, #16]
 80055cc:	4605      	mov	r5, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	b913      	cbnz	r3, 80055d8 <_fflush_r+0x10>
 80055d2:	2500      	movs	r5, #0
 80055d4:	4628      	mov	r0, r5
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	b118      	cbz	r0, 80055e2 <_fflush_r+0x1a>
 80055da:	6983      	ldr	r3, [r0, #24]
 80055dc:	b90b      	cbnz	r3, 80055e2 <_fflush_r+0x1a>
 80055de:	f000 f887 	bl	80056f0 <__sinit>
 80055e2:	4b14      	ldr	r3, [pc, #80]	; (8005634 <_fflush_r+0x6c>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d11b      	bne.n	8005620 <_fflush_r+0x58>
 80055e8:	686c      	ldr	r4, [r5, #4]
 80055ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ef      	beq.n	80055d2 <_fflush_r+0xa>
 80055f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055f4:	07d0      	lsls	r0, r2, #31
 80055f6:	d404      	bmi.n	8005602 <_fflush_r+0x3a>
 80055f8:	0599      	lsls	r1, r3, #22
 80055fa:	d402      	bmi.n	8005602 <_fflush_r+0x3a>
 80055fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055fe:	f000 f915 	bl	800582c <__retarget_lock_acquire_recursive>
 8005602:	4628      	mov	r0, r5
 8005604:	4621      	mov	r1, r4
 8005606:	f7ff ff59 	bl	80054bc <__sflush_r>
 800560a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800560c:	07da      	lsls	r2, r3, #31
 800560e:	4605      	mov	r5, r0
 8005610:	d4e0      	bmi.n	80055d4 <_fflush_r+0xc>
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	059b      	lsls	r3, r3, #22
 8005616:	d4dd      	bmi.n	80055d4 <_fflush_r+0xc>
 8005618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561a:	f000 f908 	bl	800582e <__retarget_lock_release_recursive>
 800561e:	e7d9      	b.n	80055d4 <_fflush_r+0xc>
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <_fflush_r+0x70>)
 8005622:	429c      	cmp	r4, r3
 8005624:	d101      	bne.n	800562a <_fflush_r+0x62>
 8005626:	68ac      	ldr	r4, [r5, #8]
 8005628:	e7df      	b.n	80055ea <_fflush_r+0x22>
 800562a:	4b04      	ldr	r3, [pc, #16]	; (800563c <_fflush_r+0x74>)
 800562c:	429c      	cmp	r4, r3
 800562e:	bf08      	it	eq
 8005630:	68ec      	ldreq	r4, [r5, #12]
 8005632:	e7da      	b.n	80055ea <_fflush_r+0x22>
 8005634:	08006234 	.word	0x08006234
 8005638:	08006254 	.word	0x08006254
 800563c:	08006214 	.word	0x08006214

08005640 <std>:
 8005640:	2300      	movs	r3, #0
 8005642:	b510      	push	{r4, lr}
 8005644:	4604      	mov	r4, r0
 8005646:	e9c0 3300 	strd	r3, r3, [r0]
 800564a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800564e:	6083      	str	r3, [r0, #8]
 8005650:	8181      	strh	r1, [r0, #12]
 8005652:	6643      	str	r3, [r0, #100]	; 0x64
 8005654:	81c2      	strh	r2, [r0, #14]
 8005656:	6183      	str	r3, [r0, #24]
 8005658:	4619      	mov	r1, r3
 800565a:	2208      	movs	r2, #8
 800565c:	305c      	adds	r0, #92	; 0x5c
 800565e:	f7fd fd2b 	bl	80030b8 <memset>
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <std+0x38>)
 8005664:	6263      	str	r3, [r4, #36]	; 0x24
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <std+0x3c>)
 8005668:	62a3      	str	r3, [r4, #40]	; 0x28
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <std+0x40>)
 800566c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <std+0x44>)
 8005670:	6224      	str	r4, [r4, #32]
 8005672:	6323      	str	r3, [r4, #48]	; 0x30
 8005674:	bd10      	pop	{r4, pc}
 8005676:	bf00      	nop
 8005678:	08005985 	.word	0x08005985
 800567c:	080059a7 	.word	0x080059a7
 8005680:	080059df 	.word	0x080059df
 8005684:	08005a03 	.word	0x08005a03

08005688 <_cleanup_r>:
 8005688:	4901      	ldr	r1, [pc, #4]	; (8005690 <_cleanup_r+0x8>)
 800568a:	f000 b8af 	b.w	80057ec <_fwalk_reent>
 800568e:	bf00      	nop
 8005690:	080055c9 	.word	0x080055c9

08005694 <__sfmoreglue>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	2268      	movs	r2, #104	; 0x68
 8005698:	1e4d      	subs	r5, r1, #1
 800569a:	4355      	muls	r5, r2
 800569c:	460e      	mov	r6, r1
 800569e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056a2:	f7ff fc09 	bl	8004eb8 <_malloc_r>
 80056a6:	4604      	mov	r4, r0
 80056a8:	b140      	cbz	r0, 80056bc <__sfmoreglue+0x28>
 80056aa:	2100      	movs	r1, #0
 80056ac:	e9c0 1600 	strd	r1, r6, [r0]
 80056b0:	300c      	adds	r0, #12
 80056b2:	60a0      	str	r0, [r4, #8]
 80056b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056b8:	f7fd fcfe 	bl	80030b8 <memset>
 80056bc:	4620      	mov	r0, r4
 80056be:	bd70      	pop	{r4, r5, r6, pc}

080056c0 <__sfp_lock_acquire>:
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <__sfp_lock_acquire+0x8>)
 80056c2:	f000 b8b3 	b.w	800582c <__retarget_lock_acquire_recursive>
 80056c6:	bf00      	nop
 80056c8:	2000020d 	.word	0x2000020d

080056cc <__sfp_lock_release>:
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <__sfp_lock_release+0x8>)
 80056ce:	f000 b8ae 	b.w	800582e <__retarget_lock_release_recursive>
 80056d2:	bf00      	nop
 80056d4:	2000020d 	.word	0x2000020d

080056d8 <__sinit_lock_acquire>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sinit_lock_acquire+0x8>)
 80056da:	f000 b8a7 	b.w	800582c <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	2000020e 	.word	0x2000020e

080056e4 <__sinit_lock_release>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sinit_lock_release+0x8>)
 80056e6:	f000 b8a2 	b.w	800582e <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	2000020e 	.word	0x2000020e

080056f0 <__sinit>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4604      	mov	r4, r0
 80056f4:	f7ff fff0 	bl	80056d8 <__sinit_lock_acquire>
 80056f8:	69a3      	ldr	r3, [r4, #24]
 80056fa:	b11b      	cbz	r3, 8005704 <__sinit+0x14>
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	f7ff bff0 	b.w	80056e4 <__sinit_lock_release>
 8005704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005708:	6523      	str	r3, [r4, #80]	; 0x50
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <__sinit+0x68>)
 800570c:	4a13      	ldr	r2, [pc, #76]	; (800575c <__sinit+0x6c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	62a2      	str	r2, [r4, #40]	; 0x28
 8005712:	42a3      	cmp	r3, r4
 8005714:	bf04      	itt	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	61a3      	streq	r3, [r4, #24]
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f820 	bl	8005760 <__sfp>
 8005720:	6060      	str	r0, [r4, #4]
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f81c 	bl	8005760 <__sfp>
 8005728:	60a0      	str	r0, [r4, #8]
 800572a:	4620      	mov	r0, r4
 800572c:	f000 f818 	bl	8005760 <__sfp>
 8005730:	2200      	movs	r2, #0
 8005732:	60e0      	str	r0, [r4, #12]
 8005734:	2104      	movs	r1, #4
 8005736:	6860      	ldr	r0, [r4, #4]
 8005738:	f7ff ff82 	bl	8005640 <std>
 800573c:	68a0      	ldr	r0, [r4, #8]
 800573e:	2201      	movs	r2, #1
 8005740:	2109      	movs	r1, #9
 8005742:	f7ff ff7d 	bl	8005640 <std>
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	2202      	movs	r2, #2
 800574a:	2112      	movs	r1, #18
 800574c:	f7ff ff78 	bl	8005640 <std>
 8005750:	2301      	movs	r3, #1
 8005752:	61a3      	str	r3, [r4, #24]
 8005754:	e7d2      	b.n	80056fc <__sinit+0xc>
 8005756:	bf00      	nop
 8005758:	08005e98 	.word	0x08005e98
 800575c:	08005689 	.word	0x08005689

08005760 <__sfp>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	4607      	mov	r7, r0
 8005764:	f7ff ffac 	bl	80056c0 <__sfp_lock_acquire>
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <__sfp+0x84>)
 800576a:	681e      	ldr	r6, [r3, #0]
 800576c:	69b3      	ldr	r3, [r6, #24]
 800576e:	b913      	cbnz	r3, 8005776 <__sfp+0x16>
 8005770:	4630      	mov	r0, r6
 8005772:	f7ff ffbd 	bl	80056f0 <__sinit>
 8005776:	3648      	adds	r6, #72	; 0x48
 8005778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800577c:	3b01      	subs	r3, #1
 800577e:	d503      	bpl.n	8005788 <__sfp+0x28>
 8005780:	6833      	ldr	r3, [r6, #0]
 8005782:	b30b      	cbz	r3, 80057c8 <__sfp+0x68>
 8005784:	6836      	ldr	r6, [r6, #0]
 8005786:	e7f7      	b.n	8005778 <__sfp+0x18>
 8005788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800578c:	b9d5      	cbnz	r5, 80057c4 <__sfp+0x64>
 800578e:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <__sfp+0x88>)
 8005790:	60e3      	str	r3, [r4, #12]
 8005792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005796:	6665      	str	r5, [r4, #100]	; 0x64
 8005798:	f000 f847 	bl	800582a <__retarget_lock_init_recursive>
 800579c:	f7ff ff96 	bl	80056cc <__sfp_lock_release>
 80057a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057a8:	6025      	str	r5, [r4, #0]
 80057aa:	61a5      	str	r5, [r4, #24]
 80057ac:	2208      	movs	r2, #8
 80057ae:	4629      	mov	r1, r5
 80057b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057b4:	f7fd fc80 	bl	80030b8 <memset>
 80057b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057c0:	4620      	mov	r0, r4
 80057c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c4:	3468      	adds	r4, #104	; 0x68
 80057c6:	e7d9      	b.n	800577c <__sfp+0x1c>
 80057c8:	2104      	movs	r1, #4
 80057ca:	4638      	mov	r0, r7
 80057cc:	f7ff ff62 	bl	8005694 <__sfmoreglue>
 80057d0:	4604      	mov	r4, r0
 80057d2:	6030      	str	r0, [r6, #0]
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1d5      	bne.n	8005784 <__sfp+0x24>
 80057d8:	f7ff ff78 	bl	80056cc <__sfp_lock_release>
 80057dc:	230c      	movs	r3, #12
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	e7ee      	b.n	80057c0 <__sfp+0x60>
 80057e2:	bf00      	nop
 80057e4:	08005e98 	.word	0x08005e98
 80057e8:	ffff0001 	.word	0xffff0001

080057ec <_fwalk_reent>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4606      	mov	r6, r0
 80057f2:	4688      	mov	r8, r1
 80057f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057f8:	2700      	movs	r7, #0
 80057fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057fe:	f1b9 0901 	subs.w	r9, r9, #1
 8005802:	d505      	bpl.n	8005810 <_fwalk_reent+0x24>
 8005804:	6824      	ldr	r4, [r4, #0]
 8005806:	2c00      	cmp	r4, #0
 8005808:	d1f7      	bne.n	80057fa <_fwalk_reent+0xe>
 800580a:	4638      	mov	r0, r7
 800580c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005810:	89ab      	ldrh	r3, [r5, #12]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d907      	bls.n	8005826 <_fwalk_reent+0x3a>
 8005816:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800581a:	3301      	adds	r3, #1
 800581c:	d003      	beq.n	8005826 <_fwalk_reent+0x3a>
 800581e:	4629      	mov	r1, r5
 8005820:	4630      	mov	r0, r6
 8005822:	47c0      	blx	r8
 8005824:	4307      	orrs	r7, r0
 8005826:	3568      	adds	r5, #104	; 0x68
 8005828:	e7e9      	b.n	80057fe <_fwalk_reent+0x12>

0800582a <__retarget_lock_init_recursive>:
 800582a:	4770      	bx	lr

0800582c <__retarget_lock_acquire_recursive>:
 800582c:	4770      	bx	lr

0800582e <__retarget_lock_release_recursive>:
 800582e:	4770      	bx	lr

08005830 <__swhatbuf_r>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	460e      	mov	r6, r1
 8005834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005838:	2900      	cmp	r1, #0
 800583a:	b096      	sub	sp, #88	; 0x58
 800583c:	4614      	mov	r4, r2
 800583e:	461d      	mov	r5, r3
 8005840:	da08      	bge.n	8005854 <__swhatbuf_r+0x24>
 8005842:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	602a      	str	r2, [r5, #0]
 800584a:	061a      	lsls	r2, r3, #24
 800584c:	d410      	bmi.n	8005870 <__swhatbuf_r+0x40>
 800584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005852:	e00e      	b.n	8005872 <__swhatbuf_r+0x42>
 8005854:	466a      	mov	r2, sp
 8005856:	f000 f8fb 	bl	8005a50 <_fstat_r>
 800585a:	2800      	cmp	r0, #0
 800585c:	dbf1      	blt.n	8005842 <__swhatbuf_r+0x12>
 800585e:	9a01      	ldr	r2, [sp, #4]
 8005860:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005864:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005868:	425a      	negs	r2, r3
 800586a:	415a      	adcs	r2, r3
 800586c:	602a      	str	r2, [r5, #0]
 800586e:	e7ee      	b.n	800584e <__swhatbuf_r+0x1e>
 8005870:	2340      	movs	r3, #64	; 0x40
 8005872:	2000      	movs	r0, #0
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	b016      	add	sp, #88	; 0x58
 8005878:	bd70      	pop	{r4, r5, r6, pc}
	...

0800587c <__smakebuf_r>:
 800587c:	898b      	ldrh	r3, [r1, #12]
 800587e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005880:	079d      	lsls	r5, r3, #30
 8005882:	4606      	mov	r6, r0
 8005884:	460c      	mov	r4, r1
 8005886:	d507      	bpl.n	8005898 <__smakebuf_r+0x1c>
 8005888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	2301      	movs	r3, #1
 8005892:	6163      	str	r3, [r4, #20]
 8005894:	b002      	add	sp, #8
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	ab01      	add	r3, sp, #4
 800589a:	466a      	mov	r2, sp
 800589c:	f7ff ffc8 	bl	8005830 <__swhatbuf_r>
 80058a0:	9900      	ldr	r1, [sp, #0]
 80058a2:	4605      	mov	r5, r0
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff fb07 	bl	8004eb8 <_malloc_r>
 80058aa:	b948      	cbnz	r0, 80058c0 <__smakebuf_r+0x44>
 80058ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b0:	059a      	lsls	r2, r3, #22
 80058b2:	d4ef      	bmi.n	8005894 <__smakebuf_r+0x18>
 80058b4:	f023 0303 	bic.w	r3, r3, #3
 80058b8:	f043 0302 	orr.w	r3, r3, #2
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	e7e3      	b.n	8005888 <__smakebuf_r+0xc>
 80058c0:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <__smakebuf_r+0x7c>)
 80058c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	6020      	str	r0, [r4, #0]
 80058c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	9b00      	ldr	r3, [sp, #0]
 80058d0:	6163      	str	r3, [r4, #20]
 80058d2:	9b01      	ldr	r3, [sp, #4]
 80058d4:	6120      	str	r0, [r4, #16]
 80058d6:	b15b      	cbz	r3, 80058f0 <__smakebuf_r+0x74>
 80058d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 f8c9 	bl	8005a74 <_isatty_r>
 80058e2:	b128      	cbz	r0, 80058f0 <__smakebuf_r+0x74>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	89a0      	ldrh	r0, [r4, #12]
 80058f2:	4305      	orrs	r5, r0
 80058f4:	81a5      	strh	r5, [r4, #12]
 80058f6:	e7cd      	b.n	8005894 <__smakebuf_r+0x18>
 80058f8:	08005689 	.word	0x08005689

080058fc <_raise_r>:
 80058fc:	291f      	cmp	r1, #31
 80058fe:	b538      	push	{r3, r4, r5, lr}
 8005900:	4604      	mov	r4, r0
 8005902:	460d      	mov	r5, r1
 8005904:	d904      	bls.n	8005910 <_raise_r+0x14>
 8005906:	2316      	movs	r3, #22
 8005908:	6003      	str	r3, [r0, #0]
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005912:	b112      	cbz	r2, 800591a <_raise_r+0x1e>
 8005914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005918:	b94b      	cbnz	r3, 800592e <_raise_r+0x32>
 800591a:	4620      	mov	r0, r4
 800591c:	f000 f830 	bl	8005980 <_getpid_r>
 8005920:	462a      	mov	r2, r5
 8005922:	4601      	mov	r1, r0
 8005924:	4620      	mov	r0, r4
 8005926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800592a:	f000 b817 	b.w	800595c <_kill_r>
 800592e:	2b01      	cmp	r3, #1
 8005930:	d00a      	beq.n	8005948 <_raise_r+0x4c>
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	d103      	bne.n	800593e <_raise_r+0x42>
 8005936:	2316      	movs	r3, #22
 8005938:	6003      	str	r3, [r0, #0]
 800593a:	2001      	movs	r0, #1
 800593c:	e7e7      	b.n	800590e <_raise_r+0x12>
 800593e:	2400      	movs	r4, #0
 8005940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005944:	4628      	mov	r0, r5
 8005946:	4798      	blx	r3
 8005948:	2000      	movs	r0, #0
 800594a:	e7e0      	b.n	800590e <_raise_r+0x12>

0800594c <raise>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <raise+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f7ff bfd3 	b.w	80058fc <_raise_r>
 8005956:	bf00      	nop
 8005958:	2000000c 	.word	0x2000000c

0800595c <_kill_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d07      	ldr	r5, [pc, #28]	; (800597c <_kill_r+0x20>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	f7fc f91d 	bl	8001ba8 <_kill>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	d102      	bne.n	8005978 <_kill_r+0x1c>
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	b103      	cbz	r3, 8005978 <_kill_r+0x1c>
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	bd38      	pop	{r3, r4, r5, pc}
 800597a:	bf00      	nop
 800597c:	20000208 	.word	0x20000208

08005980 <_getpid_r>:
 8005980:	f7fc b90a 	b.w	8001b98 <_getpid>

08005984 <__sread>:
 8005984:	b510      	push	{r4, lr}
 8005986:	460c      	mov	r4, r1
 8005988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598c:	f000 f894 	bl	8005ab8 <_read_r>
 8005990:	2800      	cmp	r0, #0
 8005992:	bfab      	itete	ge
 8005994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005996:	89a3      	ldrhlt	r3, [r4, #12]
 8005998:	181b      	addge	r3, r3, r0
 800599a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800599e:	bfac      	ite	ge
 80059a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059a2:	81a3      	strhlt	r3, [r4, #12]
 80059a4:	bd10      	pop	{r4, pc}

080059a6 <__swrite>:
 80059a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059aa:	461f      	mov	r7, r3
 80059ac:	898b      	ldrh	r3, [r1, #12]
 80059ae:	05db      	lsls	r3, r3, #23
 80059b0:	4605      	mov	r5, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	4616      	mov	r6, r2
 80059b6:	d505      	bpl.n	80059c4 <__swrite+0x1e>
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	2302      	movs	r3, #2
 80059be:	2200      	movs	r2, #0
 80059c0:	f000 f868 	bl	8005a94 <_lseek_r>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	4632      	mov	r2, r6
 80059d2:	463b      	mov	r3, r7
 80059d4:	4628      	mov	r0, r5
 80059d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	f000 b817 	b.w	8005a0c <_write_r>

080059de <__sseek>:
 80059de:	b510      	push	{r4, lr}
 80059e0:	460c      	mov	r4, r1
 80059e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e6:	f000 f855 	bl	8005a94 <_lseek_r>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	bf15      	itete	ne
 80059f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80059f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059fa:	81a3      	strheq	r3, [r4, #12]
 80059fc:	bf18      	it	ne
 80059fe:	81a3      	strhne	r3, [r4, #12]
 8005a00:	bd10      	pop	{r4, pc}

08005a02 <__sclose>:
 8005a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a06:	f000 b813 	b.w	8005a30 <_close_r>
	...

08005a0c <_write_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	; (8005a2c <_write_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fc f84d 	bl	8001aba <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_write_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_write_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000208 	.word	0x20000208

08005a30 <_close_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d06      	ldr	r5, [pc, #24]	; (8005a4c <_close_r+0x1c>)
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	602b      	str	r3, [r5, #0]
 8005a3c:	f7fc f8eb 	bl	8001c16 <_close>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_close_r+0x1a>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_close_r+0x1a>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	20000208 	.word	0x20000208

08005a50 <_fstat_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d07      	ldr	r5, [pc, #28]	; (8005a70 <_fstat_r+0x20>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	f7fc f8e6 	bl	8001c2e <_fstat>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d102      	bne.n	8005a6c <_fstat_r+0x1c>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	b103      	cbz	r3, 8005a6c <_fstat_r+0x1c>
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000208 	.word	0x20000208

08005a74 <_isatty_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d06      	ldr	r5, [pc, #24]	; (8005a90 <_isatty_r+0x1c>)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	602b      	str	r3, [r5, #0]
 8005a80:	f7fc f8e5 	bl	8001c4e <_isatty>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_isatty_r+0x1a>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_isatty_r+0x1a>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	20000208 	.word	0x20000208

08005a94 <_lseek_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	; (8005ab4 <_lseek_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fc f8de 	bl	8001c64 <_lseek>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_lseek_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_lseek_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000208 	.word	0x20000208

08005ab8 <_read_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_read_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fc f888 	bl	8001bdc <_read>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_read_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_read_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000208 	.word	0x20000208

08005adc <sqrt>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	ed2d 8b02 	vpush	{d8}
 8005ae2:	ec55 4b10 	vmov	r4, r5, d0
 8005ae6:	f000 f825 	bl	8005b34 <__ieee754_sqrt>
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	eeb0 8a40 	vmov.f32	s16, s0
 8005af6:	eef0 8a60 	vmov.f32	s17, s1
 8005afa:	f7fb f86f 	bl	8000bdc <__aeabi_dcmpun>
 8005afe:	b990      	cbnz	r0, 8005b26 <sqrt+0x4a>
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fb f840 	bl	8000b8c <__aeabi_dcmplt>
 8005b0c:	b158      	cbz	r0, 8005b26 <sqrt+0x4a>
 8005b0e:	f7fd fa9b 	bl	8003048 <__errno>
 8005b12:	2321      	movs	r3, #33	; 0x21
 8005b14:	6003      	str	r3, [r0, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f7fa feed 	bl	80008fc <__aeabi_ddiv>
 8005b22:	ec41 0b18 	vmov	d8, r0, r1
 8005b26:	eeb0 0a48 	vmov.f32	s0, s16
 8005b2a:	eef0 0a68 	vmov.f32	s1, s17
 8005b2e:	ecbd 8b02 	vpop	{d8}
 8005b32:	bd38      	pop	{r3, r4, r5, pc}

08005b34 <__ieee754_sqrt>:
 8005b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b38:	ec55 4b10 	vmov	r4, r5, d0
 8005b3c:	4e55      	ldr	r6, [pc, #340]	; (8005c94 <__ieee754_sqrt+0x160>)
 8005b3e:	43ae      	bics	r6, r5
 8005b40:	ee10 0a10 	vmov	r0, s0
 8005b44:	ee10 3a10 	vmov	r3, s0
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	d110      	bne.n	8005b70 <__ieee754_sqrt+0x3c>
 8005b4e:	ee10 2a10 	vmov	r2, s0
 8005b52:	462b      	mov	r3, r5
 8005b54:	f7fa fda8 	bl	80006a8 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa fbec 	bl	800033c <__adddf3>
 8005b64:	4604      	mov	r4, r0
 8005b66:	460d      	mov	r5, r1
 8005b68:	ec45 4b10 	vmov	d0, r4, r5
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	dc10      	bgt.n	8005b96 <__ieee754_sqrt+0x62>
 8005b74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b78:	4330      	orrs	r0, r6
 8005b7a:	d0f5      	beq.n	8005b68 <__ieee754_sqrt+0x34>
 8005b7c:	b15d      	cbz	r5, 8005b96 <__ieee754_sqrt+0x62>
 8005b7e:	ee10 2a10 	vmov	r2, s0
 8005b82:	462b      	mov	r3, r5
 8005b84:	ee10 0a10 	vmov	r0, s0
 8005b88:	f7fa fbd6 	bl	8000338 <__aeabi_dsub>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	f7fa feb4 	bl	80008fc <__aeabi_ddiv>
 8005b94:	e7e6      	b.n	8005b64 <__ieee754_sqrt+0x30>
 8005b96:	1512      	asrs	r2, r2, #20
 8005b98:	d074      	beq.n	8005c84 <__ieee754_sqrt+0x150>
 8005b9a:	07d4      	lsls	r4, r2, #31
 8005b9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005ba0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005ba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ba8:	bf5e      	ittt	pl
 8005baa:	0fda      	lsrpl	r2, r3, #31
 8005bac:	005b      	lslpl	r3, r3, #1
 8005bae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005bb2:	2400      	movs	r4, #0
 8005bb4:	0fda      	lsrs	r2, r3, #31
 8005bb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005bba:	107f      	asrs	r7, r7, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	2516      	movs	r5, #22
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005bc6:	1886      	adds	r6, r0, r2
 8005bc8:	428e      	cmp	r6, r1
 8005bca:	bfde      	ittt	le
 8005bcc:	1b89      	suble	r1, r1, r6
 8005bce:	18b0      	addle	r0, r6, r2
 8005bd0:	18a4      	addle	r4, r4, r2
 8005bd2:	0049      	lsls	r1, r1, #1
 8005bd4:	3d01      	subs	r5, #1
 8005bd6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005bda:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005bde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005be2:	d1f0      	bne.n	8005bc6 <__ieee754_sqrt+0x92>
 8005be4:	462a      	mov	r2, r5
 8005be6:	f04f 0e20 	mov.w	lr, #32
 8005bea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005bee:	4281      	cmp	r1, r0
 8005bf0:	eb06 0c05 	add.w	ip, r6, r5
 8005bf4:	dc02      	bgt.n	8005bfc <__ieee754_sqrt+0xc8>
 8005bf6:	d113      	bne.n	8005c20 <__ieee754_sqrt+0xec>
 8005bf8:	459c      	cmp	ip, r3
 8005bfa:	d811      	bhi.n	8005c20 <__ieee754_sqrt+0xec>
 8005bfc:	f1bc 0f00 	cmp.w	ip, #0
 8005c00:	eb0c 0506 	add.w	r5, ip, r6
 8005c04:	da43      	bge.n	8005c8e <__ieee754_sqrt+0x15a>
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	db41      	blt.n	8005c8e <__ieee754_sqrt+0x15a>
 8005c0a:	f100 0801 	add.w	r8, r0, #1
 8005c0e:	1a09      	subs	r1, r1, r0
 8005c10:	459c      	cmp	ip, r3
 8005c12:	bf88      	it	hi
 8005c14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005c18:	eba3 030c 	sub.w	r3, r3, ip
 8005c1c:	4432      	add	r2, r6
 8005c1e:	4640      	mov	r0, r8
 8005c20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005c24:	f1be 0e01 	subs.w	lr, lr, #1
 8005c28:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005c34:	d1db      	bne.n	8005bee <__ieee754_sqrt+0xba>
 8005c36:	430b      	orrs	r3, r1
 8005c38:	d006      	beq.n	8005c48 <__ieee754_sqrt+0x114>
 8005c3a:	1c50      	adds	r0, r2, #1
 8005c3c:	bf13      	iteet	ne
 8005c3e:	3201      	addne	r2, #1
 8005c40:	3401      	addeq	r4, #1
 8005c42:	4672      	moveq	r2, lr
 8005c44:	f022 0201 	bicne.w	r2, r2, #1
 8005c48:	1063      	asrs	r3, r4, #1
 8005c4a:	0852      	lsrs	r2, r2, #1
 8005c4c:	07e1      	lsls	r1, r4, #31
 8005c4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005c52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005c56:	bf48      	it	mi
 8005c58:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005c5c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005c60:	4614      	mov	r4, r2
 8005c62:	e781      	b.n	8005b68 <__ieee754_sqrt+0x34>
 8005c64:	0ad9      	lsrs	r1, r3, #11
 8005c66:	3815      	subs	r0, #21
 8005c68:	055b      	lsls	r3, r3, #21
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	d0fa      	beq.n	8005c64 <__ieee754_sqrt+0x130>
 8005c6e:	02cd      	lsls	r5, r1, #11
 8005c70:	d50a      	bpl.n	8005c88 <__ieee754_sqrt+0x154>
 8005c72:	f1c2 0420 	rsb	r4, r2, #32
 8005c76:	fa23 f404 	lsr.w	r4, r3, r4
 8005c7a:	1e55      	subs	r5, r2, #1
 8005c7c:	4093      	lsls	r3, r2
 8005c7e:	4321      	orrs	r1, r4
 8005c80:	1b42      	subs	r2, r0, r5
 8005c82:	e78a      	b.n	8005b9a <__ieee754_sqrt+0x66>
 8005c84:	4610      	mov	r0, r2
 8005c86:	e7f0      	b.n	8005c6a <__ieee754_sqrt+0x136>
 8005c88:	0049      	lsls	r1, r1, #1
 8005c8a:	3201      	adds	r2, #1
 8005c8c:	e7ef      	b.n	8005c6e <__ieee754_sqrt+0x13a>
 8005c8e:	4680      	mov	r8, r0
 8005c90:	e7bd      	b.n	8005c0e <__ieee754_sqrt+0xda>
 8005c92:	bf00      	nop
 8005c94:	7ff00000 	.word	0x7ff00000

08005c98 <_init>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_fini>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr
