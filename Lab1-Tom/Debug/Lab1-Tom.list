
Lab1-Tom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004eb8  08004eb8  00014eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e4  080052e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080052e4  080052e4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e4  080052e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080052ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  080054c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080054c8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067e6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a7  00000000  00000000  000269f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00028748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bf4  00000000  00000000  00028d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a5c  00000000  00000000  0005291c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb71c  00000000  00000000  00059378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00154a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a4  00000000  00000000  00154b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000042a  00000000  00000000  00157400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004ea0 	.word	0x08004ea0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08004ea0 	.word	0x08004ea0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000be0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000be4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c00:	e000      	b.n	8000c04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f9      	beq.n	8000c02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <Kalmanfilter_DSP>:



// CMSIS DSP implementation.
int Kalmanfilter_DSP(float *InputArray, float *OutputArray, kalman_state *kstate, int Length)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b08c      	sub	sp, #48	; 0x30
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	603b      	str	r3, [r7, #0]
  // Guard against null pointers.
  if (InputArray == NULL || OutputArray == NULL || kstate == NULL || Length <= 0)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d008      	beq.n	8000c4c <Kalmanfilter_DSP+0x26>
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <Kalmanfilter_DSP+0x26>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <Kalmanfilter_DSP+0x26>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dc02      	bgt.n	8000c52 <Kalmanfilter_DSP+0x2c>
  {
    return -1;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	e08a      	b.n	8000d68 <Kalmanfilter_DSP+0x142>
  }

  for (int i = 0; i < Length; i++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c56:	e081      	b.n	8000d5c <Kalmanfilter_DSP+0x136>
  {
    // Use single-element arrays to hold scalar values
    float32_t p_array[1] = {kstate->p};
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t q_array[1] = {kstate->q};
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t r_array[1] = {kstate->r};
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	623b      	str	r3, [r7, #32]
    float32_t result[1];

    // p = p + q (scalar addition using single-element arrays)
    p_array[0] = kstate->p;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    q_array[0] = kstate->q;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    r_array[0] = kstate->r;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	623b      	str	r3, [r7, #32]
    arm_add_f32(p_array, q_array, result, 1);
 8000c7c:	f107 021c 	add.w	r2, r7, #28
 8000c80:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c84:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f001 fb67 	bl	800235c <arm_add_f32>
    kstate->p = result[0]; // Update p with the result
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60da      	str	r2, [r3, #12]

    // TODO? k = p / (p + r), since no division in CMSIS-DSP
    kstate->k = kstate->p / (kstate->p + kstate->r);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate x = x + k * (InputArray[i] - x) using CMSIS-DSP
    float32_t input_minus_x_array[1] = {InputArray[i] - kstate->x};
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	ed93 7a00 	vldr	s14, [r3]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cca:	edc7 7a06 	vstr	s15, [r7, #24]
    float32_t k_array[1] = {kstate->k};
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	617b      	str	r3, [r7, #20]

    p_array[0] = kstate->p;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    q_array[0] = kstate->q;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    r_array[0] = kstate->r;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	623b      	str	r3, [r7, #32]
    arm_mult_f32(k_array, input_minus_x_array, result, 1); // k * (input - x)
 8000ce6:	f107 021c 	add.w	r2, r7, #28
 8000cea:	f107 0118 	add.w	r1, r7, #24
 8000cee:	f107 0014 	add.w	r0, r7, #20
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f001 fad8 	bl	80022a8 <arm_mult_f32>
    kstate->x += result[0];                                // Update x with the result
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update error covariance: p = (1 - k) * p using CMSIS-DSP
    float32_t one_minus_k_array[1] = {1.0f - kstate->k};
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1a:	edc7 7a04 	vstr	s15, [r7, #16]
    p_array[0] = kstate->p;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
    q_array[0] = kstate->q;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    r_array[0] = kstate->r;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	623b      	str	r3, [r7, #32]
    arm_mult_f32(one_minus_k_array, p_array, result, 1); // (1 - k) * p
 8000d30:	f107 021c 	add.w	r2, r7, #28
 8000d34:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d38:	f107 0010 	add.w	r0, r7, #16
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f001 fab3 	bl	80022a8 <arm_mult_f32>
    kstate->p = result[0];                               // Update p with the result
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	60da      	str	r2, [r3, #12]

    // Store the updated estimate in the output array
    OutputArray[i] = kstate->x;
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	4413      	add	r3, r2
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6892      	ldr	r2, [r2, #8]
 8000d54:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < Length; i++)
 8000d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d58:	3301      	adds	r3, #1
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f6ff af79 	blt.w	8000c58 <Kalmanfilter_DSP+0x32>


  }

  // Success.
  return 0;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3730      	adds	r7, #48	; 0x30
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b09a      	sub	sp, #104	; 0x68
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	kalman_state myState;
	float output[5];

	myState.q = 0.1;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <main+0x64>)
 8000d78:	657b      	str	r3, [r7, #84]	; 0x54
	myState.r = 0.1;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <main+0x64>)
 8000d7c:	65bb      	str	r3, [r7, #88]	; 0x58
	myState.p = 0.1;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <main+0x64>)
 8000d80:	663b      	str	r3, [r7, #96]	; 0x60
	myState.x = 5.0;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <main+0x68>)
 8000d84:	65fb      	str	r3, [r7, #92]	; 0x5c
	myState.k = 0.0;
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	667b      	str	r3, [r7, #100]	; 0x64

	float input[5] = {0,1,2,3,4};
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <main+0x6c>)
 8000d8e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000d92:	461d      	mov	r5, r3
 8000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	6023      	str	r3, [r4, #0]
	float stdDev;
	float diffArray[5];


	kalman_state testState;
	testState.q = 0.0;
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
	testState.r = 0.0;
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
	testState.p = 0.0;
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
	testState.x = 5.0;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <main+0x68>)
 8000db0:	60fb      	str	r3, [r7, #12]
	testState.k = 0.0;
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

	//kalmanfilter_ASM(input, output, &myState, 5);
	Kalmanfilter_DSP(input, output, &myState, 5);
 8000db8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000dbc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000dc0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	f7ff ff2e 	bl	8000c26 <Kalmanfilter_DSP>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000dca:	f000 f9ae 	bl	800112a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f807 	bl	8000de0 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <main+0x62>
 8000dd4:	3dcccccd 	.word	0x3dcccccd
 8000dd8:	40a00000 	.word	0x40a00000
 8000ddc:	08004eb8 	.word	0x08004eb8

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b096      	sub	sp, #88	; 0x58
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2244      	movs	r2, #68	; 0x44
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fb38 	bl	8002464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fb0c 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e0e:	f000 f854 	bl	8000eba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e12:	2310      	movs	r3, #16
 8000e14:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e1e:	2360      	movs	r3, #96	; 0x60
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e26:	2301      	movs	r3, #1
 8000e28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e2e:	233c      	movs	r3, #60	; 0x3c
 8000e30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fb90 	bl	8001568 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e4e:	f000 f834 	bl	8000eba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 ff96 	bl	8001d9c <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e76:	f000 f820 	bl	8000eba <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3758      	adds	r7, #88	; 0x58
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e009      	b.n	8000ea8 <_write+0x26>
 {
	ITM_SendChar(*ptr++);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe9b 	bl	8000bd8 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf1      	blt.n	8000e94 <_write+0x12>

 }
 return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebe:	b672      	cpsid	i
}
 8000ec0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f93c 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return 1;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_kill>:

int _kill(int pid, int sig)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f7a:	f001 fa49 	bl	8002410 <__errno>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2216      	movs	r2, #22
 8000f82:	601a      	str	r2, [r3, #0]
  return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_exit>:

void _exit (int status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffe7 	bl	8000f70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fa2:	e7fe      	b.n	8000fa2 <_exit+0x12>

08000fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
  }

  return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001006:	605a      	str	r2, [r3, #4]
  return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f001 f9ca 	bl	8002410 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200a0000 	.word	0x200a0000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	200001f8 	.word	0x200001f8
 80010b0:	20000210 	.word	0x20000210

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 f989 	bl	800241c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff fe31 	bl	8000d70 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800111c:	080052ec 	.word	0x080052ec
  ldr r2, =_sbss
 8001120:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001124:	20000210 	.word	0x20000210

08001128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_IRQHandler>

0800112a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f91f 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f80e 	bl	800115c <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114c:	f7ff feba 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d023      	beq.n	80011b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_InitTick+0x70>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f91d 	bl	80013c6 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d809      	bhi.n	80011ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f8f5 	bl	800138e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e007      	b.n	80011bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e001      	b.n	80011bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	200001fc 	.word	0x200001fc

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200001fc 	.word	0x200001fc

08001214 <__NVIC_SetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_SetPriority>:
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff47 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff5c 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffb0 	bl	8001334 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_PWREx_GetVoltageRange+0x3c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f0:	d102      	bne.n	80013f8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f6:	e00b      	b.n	8001410 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_PWREx_GetVoltageRange+0x3c>)
 80013fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d102      	bne.n	800140e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140c:	e000      	b.n	8001410 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800140e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d141      	bne.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d131      	bne.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800143c:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001442:	4a46      	ldr	r2, [pc, #280]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001454:	4a41      	ldr	r2, [pc, #260]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2232      	movs	r2, #50	; 0x32
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	3301      	adds	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001472:	e002      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3b01      	subs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001486:	d102      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f2      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	d158      	bne.n	800154e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e057      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a6:	4a2d      	ldr	r2, [pc, #180]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014b0:	e04d      	b.n	800154e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b8:	d141      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d131      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2232      	movs	r2, #50	; 0x32
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	3301      	adds	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	e002      	b.n	8001506 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b01      	subs	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d102      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f2      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d112      	bne.n	800154e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e011      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800153c:	e007      	b.n	800154e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40007000 	.word	0x40007000
 8001560:	20000000 	.word	0x20000000
 8001564:	431bde83 	.word	0x431bde83

08001568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	f000 bc08 	b.w	8001d8c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001586:	4b94      	ldr	r3, [pc, #592]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80e4 	beq.w	8001766 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4c>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	f040 808b 	bne.w	80016c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	f040 8087 	bne.w	80016c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b4:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x64>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e3df      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_RCC_OscConfig+0x7e>
 80015dc:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e4:	e005      	b.n	80015f2 <HAL_RCC_OscConfig+0x8a>
 80015e6:	4b7c      	ldr	r3, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80015e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d223      	bcs.n	800163e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fd94 	bl	8002128 <RCC_SetFlashLatencyFromMSIRange>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e3c0      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160a:	4b73      	ldr	r3, [pc, #460]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a72      	ldr	r2, [pc, #456]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	496d      	ldr	r1, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	4b6b      	ldr	r3, [pc, #428]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	4968      	ldr	r1, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
 800163c:	e025      	b.n	800168a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163e:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4960      	ldr	r1, [pc, #384]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165c:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	495b      	ldr	r1, [pc, #364]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fd54 	bl	8002128 <RCC_SetFlashLatencyFromMSIRange>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e380      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800168a:	f000 fcc1 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800168e:	4602      	mov	r2, r0
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	4950      	ldr	r1, [pc, #320]	; (80017dc <HAL_RCC_OscConfig+0x274>)
 800169c:	5ccb      	ldrb	r3, [r1, r3]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	4a4e      	ldr	r2, [pc, #312]	; (80017e0 <HAL_RCC_OscConfig+0x278>)
 80016a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016aa:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <HAL_RCC_OscConfig+0x27c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fd54 	bl	800115c <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d052      	beq.n	8001764 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	e364      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d032      	beq.n	8001730 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ca:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a42      	ldr	r2, [pc, #264]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fd91 	bl	80011fc <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016de:	f7ff fd8d 	bl	80011fc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e34d      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a35      	ldr	r2, [pc, #212]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4930      	ldr	r1, [pc, #192]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	492b      	ldr	r1, [pc, #172]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
 800172e:	e01a      	b.n	8001766 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800173c:	f7ff fd5e 	bl	80011fc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001744:	f7ff fd5a 	bl	80011fc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e31a      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1dc>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d073      	beq.n	800185a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b08      	cmp	r3, #8
 8001776:	d005      	beq.n	8001784 <HAL_RCC_OscConfig+0x21c>
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d10e      	bne.n	800179c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d10b      	bne.n	800179c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d063      	beq.n	8001858 <HAL_RCC_OscConfig+0x2f0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d15f      	bne.n	8001858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e2f7      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x24c>
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e025      	b.n	8001800 <HAL_RCC_OscConfig+0x298>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017bc:	d114      	bne.n	80017e8 <HAL_RCC_OscConfig+0x280>
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a02      	ldr	r2, [pc, #8]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e013      	b.n	8001800 <HAL_RCC_OscConfig+0x298>
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08004ecc 	.word	0x08004ecc
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004
 80017e8:	4ba0      	ldr	r3, [pc, #640]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a9f      	ldr	r2, [pc, #636]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b9d      	ldr	r3, [pc, #628]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a9c      	ldr	r2, [pc, #624]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fcf8 	bl	80011fc <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fcf4 	bl	80011fc <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e2b4      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x2a8>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fce4 	bl	80011fc <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fce0 	bl	80011fc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e2a0      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184a:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x2d0>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d060      	beq.n	8001928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x310>
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d119      	bne.n	80018a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x328>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e27d      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	4973      	ldr	r1, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a4:	e040      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d023      	beq.n	80018f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6e      	ldr	r2, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc9f 	bl	80011fc <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc9b 	bl	80011fc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e25b      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d4:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	495f      	ldr	r1, [pc, #380]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e018      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80018fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fc7b 	bl	80011fc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fc77 	bl	80011fc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e237      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191c:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03c      	beq.n	80019ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001942:	4a4a      	ldr	r2, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fc56 	bl	80011fc <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fc52 	bl	80011fc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e212      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ef      	beq.n	8001954 <HAL_RCC_OscConfig+0x3ec>
 8001974:	e01b      	b.n	80019ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197c:	4a3b      	ldr	r2, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff fc39 	bl	80011fc <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff fc35 	bl	80011fc <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1f5      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ef      	bne.n	800198e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a6 	beq.w	8001b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10d      	bne.n	80019e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6593      	str	r3, [r2, #88]	; 0x58
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e4:	2301      	movs	r3, #1
 80019e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_RCC_OscConfig+0x508>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d118      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x508>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x508>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a00:	f7ff fbfc 	bl	80011fc <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7ff fbf8 	bl	80011fc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1b8      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x508>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4d8>
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3e:	e029      	b.n	8001a94 <HAL_RCC_OscConfig+0x52c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d115      	bne.n	8001a74 <HAL_RCC_OscConfig+0x50c>
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_RCC_OscConfig+0x504>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x52c>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40007000 	.word	0x40007000
 8001a74:	4b9d      	ldr	r3, [pc, #628]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	4a9c      	ldr	r2, [pc, #624]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8a:	4a98      	ldr	r2, [pc, #608]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d016      	beq.n	8001aca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fbae 	bl	80011fc <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fbaa 	bl	80011fc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e168      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ed      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x53c>
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff fb97 	bl	80011fc <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fb93 	bl	80011fc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e151      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae8:	4b80      	ldr	r3, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ed      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af6:	7ffb      	ldrb	r3, [r7, #31]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fb66 	bl	80011fc <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b34:	f7ff fb62 	bl	80011fc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e122      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b46:	4b69      	ldr	r3, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ef      	beq.n	8001b34 <HAL_RCC_OscConfig+0x5cc>
 8001b54:	e01b      	b.n	8001b8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5c:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb49 	bl	80011fc <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6e:	f7ff fb45 	bl	80011fc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e105      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b80:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80f9 	beq.w	8001d8a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	f040 80cf 	bne.w	8001d40 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d12c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d123      	bne.n	8001c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d11b      	bne.n	8001c10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d113      	bne.n	8001c10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d071      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d068      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0ac      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c3e:	f7ff fadd 	bl	80011fc <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff fad9 	bl	80011fc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e099      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCC_OscConfig+0x788>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c74:	3a01      	subs	r2, #1
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	4311      	orrs	r1, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c7e:	0212      	lsls	r2, r2, #8
 8001c80:	4311      	orrs	r1, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c86:	0852      	lsrs	r2, r2, #1
 8001c88:	3a01      	subs	r2, #1
 8001c8a:	0552      	lsls	r2, r2, #21
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c92:	0852      	lsrs	r2, r2, #1
 8001c94:	3a01      	subs	r2, #1
 8001c96:	0652      	lsls	r2, r2, #25
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c9e:	06d2      	lsls	r2, r2, #27
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	4912      	ldr	r1, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc0:	f7ff fa9c 	bl	80011fc <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fa98 	bl	80011fc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e058      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_OscConfig+0x784>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce6:	e050      	b.n	8001d8a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04f      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d144      	bne.n	8001d8a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d18:	f7ff fa70 	bl	80011fc <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff fa6c 	bl	80011fc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e02c      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x7b8>
 8001d3e:	e024      	b.n	8001d8a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d01f      	beq.n	8001d86 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa53 	bl	80011fc <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fa4f 	bl	80011fc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e00f      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4905      	ldr	r1, [pc, #20]	; (8001d94 <HAL_RCC_OscConfig+0x82c>)
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x830>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
 8001d84:	e001      	b.n	8001d8a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	feeefffc 	.word	0xfeeefffc

08001d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e11d      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 020f 	bic.w	r2, r3, #15
 8001dca:	498b      	ldr	r1, [pc, #556]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e105      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d010      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d908      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b7e      	ldr	r3, [pc, #504]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	497b      	ldr	r1, [pc, #492]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d079      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d11e      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0dc      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e36:	f000 f9d1 	bl	80021dc <RCC_GetSysClockFreqFromPLLSource>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a70      	ldr	r2, [pc, #448]	; (8002000 <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d946      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e42:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d140      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e4e:	4b6b      	ldr	r3, [pc, #428]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e56:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e035      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6c:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d115      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b9      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e84:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0ad      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0a5      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ea4:	f000 f8b4 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_RCC_ClockConfig+0x264>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d90f      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 0203 	bic.w	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4947      	ldr	r1, [pc, #284]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee2:	f7ff f98b 	bl	80011fc <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7ff f987 	bl	80011fc <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e077      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f00:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 020c 	and.w	r2, r3, #12
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d1eb      	bne.n	8001eea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f18:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f22:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d208      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	492b      	ldr	r1, [pc, #172]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f52:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d210      	bcs.n	8001f82 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 020f 	bic.w	r2, r3, #15
 8001f68:	4923      	ldr	r1, [pc, #140]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_ClockConfig+0x25c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e036      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4918      	ldr	r1, [pc, #96]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4910      	ldr	r1, [pc, #64]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc0:	f000 f826 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <HAL_RCC_ClockConfig+0x268>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x26c>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f8b9 	bl	800115c <HAL_InitTick>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]

  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	04c4b400 	.word	0x04c4b400
 8002004:	08004ecc 	.word	0x08004ecc
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x34>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d121      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11e      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e005      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800206c:	4a2b      	ldr	r2, [pc, #172]	; (800211c <HAL_RCC_GetSysClockFreq+0x10c>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d102      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_GetSysClockFreq+0x110>)
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e004      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d101      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_RCC_GetSysClockFreq+0x114>)
 8002096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d134      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d003      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0xac>
 80020b4:	e005      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_GetSysClockFreq+0x110>)
 80020b8:	617b      	str	r3, [r7, #20]
      break;
 80020ba:	e005      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_GetSysClockFreq+0x114>)
 80020be:	617b      	str	r3, [r7, #20]
      break;
 80020c0:	e002      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	617b      	str	r3, [r7, #20]
      break;
 80020c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3301      	adds	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	fb03 f202 	mul.w	r2, r3, r2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	0e5b      	lsrs	r3, r3, #25
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	3301      	adds	r3, #1
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002108:	69bb      	ldr	r3, [r7, #24]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	08004edc 	.word	0x08004edc
 8002120:	00f42400 	.word	0x00f42400
 8002124:	007a1200 	.word	0x007a1200

08002128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002140:	f7ff f94e 	bl	80013e0 <HAL_PWREx_GetVoltageRange>
 8002144:	6178      	str	r0, [r7, #20]
 8002146:	e014      	b.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002152:	6593      	str	r3, [r2, #88]	; 0x58
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f93e 	bl	80013e0 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002178:	d10b      	bne.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d913      	bls.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2ba0      	cmp	r3, #160	; 0xa0
 8002184:	d902      	bls.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002186:	2302      	movs	r3, #2
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e00d      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e00a      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b7f      	cmp	r3, #127	; 0x7f
 8002196:	d902      	bls.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e004      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b70      	cmp	r3, #112	; 0x70
 80021a2:	d101      	bne.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 020f 	bic.w	r2, r3, #15
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40022000 	.word	0x40022000

080021dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d00b      	beq.n	800220a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d825      	bhi.n	8002244 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d008      	beq.n	8002210 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d11f      	bne.n	8002244 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002206:	613b      	str	r3, [r7, #16]
    break;
 8002208:	e01f      	b.n	800224a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800220c:	613b      	str	r3, [r7, #16]
    break;
 800220e:	e01c      	b.n	800224a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e005      	b.n	8002238 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002238:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
    break;
 8002242:	e002      	b.n	800224a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
    break;
 8002248:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	3301      	adds	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	fb03 f202 	mul.w	r2, r3, r2
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0e5b      	lsrs	r3, r3, #25
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	3301      	adds	r3, #1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800228a:	683b      	ldr	r3, [r7, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40021000 	.word	0x40021000
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	007a1200 	.word	0x007a1200
 80022a4:	08004edc 	.word	0x08004edc

080022a8 <arm_mult_f32>:
 80022a8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80022ac:	b4f0      	push	{r4, r5, r6, r7}
 80022ae:	d033      	beq.n	8002318 <arm_mult_f32+0x70>
 80022b0:	f100 0610 	add.w	r6, r0, #16
 80022b4:	f101 0510 	add.w	r5, r1, #16
 80022b8:	f102 0410 	add.w	r4, r2, #16
 80022bc:	4667      	mov	r7, ip
 80022be:	ed15 7a04 	vldr	s14, [r5, #-16]
 80022c2:	ed56 7a04 	vldr	s15, [r6, #-16]
 80022c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ca:	3f01      	subs	r7, #1
 80022cc:	ed44 7a04 	vstr	s15, [r4, #-16]
 80022d0:	ed15 7a03 	vldr	s14, [r5, #-12]
 80022d4:	ed56 7a03 	vldr	s15, [r6, #-12]
 80022d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022dc:	f106 0610 	add.w	r6, r6, #16
 80022e0:	ed44 7a03 	vstr	s15, [r4, #-12]
 80022e4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80022e8:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	f105 0510 	add.w	r5, r5, #16
 80022f4:	ed44 7a02 	vstr	s15, [r4, #-8]
 80022f8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80022fc:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002304:	f104 0410 	add.w	r4, r4, #16
 8002308:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800230c:	d1d7      	bne.n	80022be <arm_mult_f32+0x16>
 800230e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002312:	4420      	add	r0, r4
 8002314:	4421      	add	r1, r4
 8002316:	4422      	add	r2, r4
 8002318:	f013 0303 	ands.w	r3, r3, #3
 800231c:	d01b      	beq.n	8002356 <arm_mult_f32+0xae>
 800231e:	edd1 7a00 	vldr	s15, [r1]
 8002322:	ed90 7a00 	vldr	s14, [r0]
 8002326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232a:	3b01      	subs	r3, #1
 800232c:	edc2 7a00 	vstr	s15, [r2]
 8002330:	d011      	beq.n	8002356 <arm_mult_f32+0xae>
 8002332:	edd0 7a01 	vldr	s15, [r0, #4]
 8002336:	ed91 7a01 	vldr	s14, [r1, #4]
 800233a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233e:	2b01      	cmp	r3, #1
 8002340:	edc2 7a01 	vstr	s15, [r2, #4]
 8002344:	d007      	beq.n	8002356 <arm_mult_f32+0xae>
 8002346:	edd0 7a02 	vldr	s15, [r0, #8]
 800234a:	ed91 7a02 	vldr	s14, [r1, #8]
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	edc2 7a02 	vstr	s15, [r2, #8]
 8002356:	bcf0      	pop	{r4, r5, r6, r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <arm_add_f32>:
 800235c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002360:	b4f0      	push	{r4, r5, r6, r7}
 8002362:	d033      	beq.n	80023cc <arm_add_f32+0x70>
 8002364:	f100 0610 	add.w	r6, r0, #16
 8002368:	f101 0510 	add.w	r5, r1, #16
 800236c:	f102 0410 	add.w	r4, r2, #16
 8002370:	4667      	mov	r7, ip
 8002372:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002376:	ed56 7a04 	vldr	s15, [r6, #-16]
 800237a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800237e:	3f01      	subs	r7, #1
 8002380:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002384:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002388:	ed56 7a03 	vldr	s15, [r6, #-12]
 800238c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002390:	f106 0610 	add.w	r6, r6, #16
 8002394:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002398:	ed15 7a02 	vldr	s14, [r5, #-8]
 800239c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80023a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023a4:	f105 0510 	add.w	r5, r5, #16
 80023a8:	ed44 7a02 	vstr	s15, [r4, #-8]
 80023ac:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80023b0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80023b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b8:	f104 0410 	add.w	r4, r4, #16
 80023bc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80023c0:	d1d7      	bne.n	8002372 <arm_add_f32+0x16>
 80023c2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80023c6:	4420      	add	r0, r4
 80023c8:	4421      	add	r1, r4
 80023ca:	4422      	add	r2, r4
 80023cc:	f013 0303 	ands.w	r3, r3, #3
 80023d0:	d01b      	beq.n	800240a <arm_add_f32+0xae>
 80023d2:	edd1 7a00 	vldr	s15, [r1]
 80023d6:	ed90 7a00 	vldr	s14, [r0]
 80023da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023de:	3b01      	subs	r3, #1
 80023e0:	edc2 7a00 	vstr	s15, [r2]
 80023e4:	d011      	beq.n	800240a <arm_add_f32+0xae>
 80023e6:	edd0 7a01 	vldr	s15, [r0, #4]
 80023ea:	ed91 7a01 	vldr	s14, [r1, #4]
 80023ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80023f8:	d007      	beq.n	800240a <arm_add_f32+0xae>
 80023fa:	edd0 7a02 	vldr	s15, [r0, #8]
 80023fe:	ed91 7a02 	vldr	s14, [r1, #8]
 8002402:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002406:	edc2 7a02 	vstr	s15, [r2, #8]
 800240a:	bcf0      	pop	{r4, r5, r6, r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop

08002410 <__errno>:
 8002410:	4b01      	ldr	r3, [pc, #4]	; (8002418 <__errno+0x8>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000000c 	.word	0x2000000c

0800241c <__libc_init_array>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4d0d      	ldr	r5, [pc, #52]	; (8002454 <__libc_init_array+0x38>)
 8002420:	4c0d      	ldr	r4, [pc, #52]	; (8002458 <__libc_init_array+0x3c>)
 8002422:	1b64      	subs	r4, r4, r5
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	2600      	movs	r6, #0
 8002428:	42a6      	cmp	r6, r4
 800242a:	d109      	bne.n	8002440 <__libc_init_array+0x24>
 800242c:	4d0b      	ldr	r5, [pc, #44]	; (800245c <__libc_init_array+0x40>)
 800242e:	4c0c      	ldr	r4, [pc, #48]	; (8002460 <__libc_init_array+0x44>)
 8002430:	f002 fd36 	bl	8004ea0 <_init>
 8002434:	1b64      	subs	r4, r4, r5
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	2600      	movs	r6, #0
 800243a:	42a6      	cmp	r6, r4
 800243c:	d105      	bne.n	800244a <__libc_init_array+0x2e>
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	f855 3b04 	ldr.w	r3, [r5], #4
 8002444:	4798      	blx	r3
 8002446:	3601      	adds	r6, #1
 8002448:	e7ee      	b.n	8002428 <__libc_init_array+0xc>
 800244a:	f855 3b04 	ldr.w	r3, [r5], #4
 800244e:	4798      	blx	r3
 8002450:	3601      	adds	r6, #1
 8002452:	e7f2      	b.n	800243a <__libc_init_array+0x1e>
 8002454:	080052e4 	.word	0x080052e4
 8002458:	080052e4 	.word	0x080052e4
 800245c:	080052e4 	.word	0x080052e4
 8002460:	080052e8 	.word	0x080052e8

08002464 <memset>:
 8002464:	4402      	add	r2, r0
 8002466:	4603      	mov	r3, r0
 8002468:	4293      	cmp	r3, r2
 800246a:	d100      	bne.n	800246e <memset+0xa>
 800246c:	4770      	bx	lr
 800246e:	f803 1b01 	strb.w	r1, [r3], #1
 8002472:	e7f9      	b.n	8002468 <memset+0x4>

08002474 <__cvt>:
 8002474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002478:	ec55 4b10 	vmov	r4, r5, d0
 800247c:	2d00      	cmp	r5, #0
 800247e:	460e      	mov	r6, r1
 8002480:	4619      	mov	r1, r3
 8002482:	462b      	mov	r3, r5
 8002484:	bfbb      	ittet	lt
 8002486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800248a:	461d      	movlt	r5, r3
 800248c:	2300      	movge	r3, #0
 800248e:	232d      	movlt	r3, #45	; 0x2d
 8002490:	700b      	strb	r3, [r1, #0]
 8002492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002498:	4691      	mov	r9, r2
 800249a:	f023 0820 	bic.w	r8, r3, #32
 800249e:	bfbc      	itt	lt
 80024a0:	4622      	movlt	r2, r4
 80024a2:	4614      	movlt	r4, r2
 80024a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80024a8:	d005      	beq.n	80024b6 <__cvt+0x42>
 80024aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80024ae:	d100      	bne.n	80024b2 <__cvt+0x3e>
 80024b0:	3601      	adds	r6, #1
 80024b2:	2102      	movs	r1, #2
 80024b4:	e000      	b.n	80024b8 <__cvt+0x44>
 80024b6:	2103      	movs	r1, #3
 80024b8:	ab03      	add	r3, sp, #12
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	ab02      	add	r3, sp, #8
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	ec45 4b10 	vmov	d0, r4, r5
 80024c4:	4653      	mov	r3, sl
 80024c6:	4632      	mov	r2, r6
 80024c8:	f000 fcca 	bl	8002e60 <_dtoa_r>
 80024cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80024d0:	4607      	mov	r7, r0
 80024d2:	d102      	bne.n	80024da <__cvt+0x66>
 80024d4:	f019 0f01 	tst.w	r9, #1
 80024d8:	d022      	beq.n	8002520 <__cvt+0xac>
 80024da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80024de:	eb07 0906 	add.w	r9, r7, r6
 80024e2:	d110      	bne.n	8002506 <__cvt+0x92>
 80024e4:	783b      	ldrb	r3, [r7, #0]
 80024e6:	2b30      	cmp	r3, #48	; 0x30
 80024e8:	d10a      	bne.n	8002500 <__cvt+0x8c>
 80024ea:	2200      	movs	r2, #0
 80024ec:	2300      	movs	r3, #0
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fe fb01 	bl	8000af8 <__aeabi_dcmpeq>
 80024f6:	b918      	cbnz	r0, 8002500 <__cvt+0x8c>
 80024f8:	f1c6 0601 	rsb	r6, r6, #1
 80024fc:	f8ca 6000 	str.w	r6, [sl]
 8002500:	f8da 3000 	ldr.w	r3, [sl]
 8002504:	4499      	add	r9, r3
 8002506:	2200      	movs	r2, #0
 8002508:	2300      	movs	r3, #0
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fe faf3 	bl	8000af8 <__aeabi_dcmpeq>
 8002512:	b108      	cbz	r0, 8002518 <__cvt+0xa4>
 8002514:	f8cd 900c 	str.w	r9, [sp, #12]
 8002518:	2230      	movs	r2, #48	; 0x30
 800251a:	9b03      	ldr	r3, [sp, #12]
 800251c:	454b      	cmp	r3, r9
 800251e:	d307      	bcc.n	8002530 <__cvt+0xbc>
 8002520:	9b03      	ldr	r3, [sp, #12]
 8002522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002524:	1bdb      	subs	r3, r3, r7
 8002526:	4638      	mov	r0, r7
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	b004      	add	sp, #16
 800252c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002530:	1c59      	adds	r1, r3, #1
 8002532:	9103      	str	r1, [sp, #12]
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e7f0      	b.n	800251a <__cvt+0xa6>

08002538 <__exponent>:
 8002538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800253a:	4603      	mov	r3, r0
 800253c:	2900      	cmp	r1, #0
 800253e:	bfb8      	it	lt
 8002540:	4249      	neglt	r1, r1
 8002542:	f803 2b02 	strb.w	r2, [r3], #2
 8002546:	bfb4      	ite	lt
 8002548:	222d      	movlt	r2, #45	; 0x2d
 800254a:	222b      	movge	r2, #43	; 0x2b
 800254c:	2909      	cmp	r1, #9
 800254e:	7042      	strb	r2, [r0, #1]
 8002550:	dd2a      	ble.n	80025a8 <__exponent+0x70>
 8002552:	f10d 0407 	add.w	r4, sp, #7
 8002556:	46a4      	mov	ip, r4
 8002558:	270a      	movs	r7, #10
 800255a:	46a6      	mov	lr, r4
 800255c:	460a      	mov	r2, r1
 800255e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002562:	fb07 1516 	mls	r5, r7, r6, r1
 8002566:	3530      	adds	r5, #48	; 0x30
 8002568:	2a63      	cmp	r2, #99	; 0x63
 800256a:	f104 34ff 	add.w	r4, r4, #4294967295
 800256e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002572:	4631      	mov	r1, r6
 8002574:	dcf1      	bgt.n	800255a <__exponent+0x22>
 8002576:	3130      	adds	r1, #48	; 0x30
 8002578:	f1ae 0502 	sub.w	r5, lr, #2
 800257c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002580:	1c44      	adds	r4, r0, #1
 8002582:	4629      	mov	r1, r5
 8002584:	4561      	cmp	r1, ip
 8002586:	d30a      	bcc.n	800259e <__exponent+0x66>
 8002588:	f10d 0209 	add.w	r2, sp, #9
 800258c:	eba2 020e 	sub.w	r2, r2, lr
 8002590:	4565      	cmp	r5, ip
 8002592:	bf88      	it	hi
 8002594:	2200      	movhi	r2, #0
 8002596:	4413      	add	r3, r2
 8002598:	1a18      	subs	r0, r3, r0
 800259a:	b003      	add	sp, #12
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80025a6:	e7ed      	b.n	8002584 <__exponent+0x4c>
 80025a8:	2330      	movs	r3, #48	; 0x30
 80025aa:	3130      	adds	r1, #48	; 0x30
 80025ac:	7083      	strb	r3, [r0, #2]
 80025ae:	70c1      	strb	r1, [r0, #3]
 80025b0:	1d03      	adds	r3, r0, #4
 80025b2:	e7f1      	b.n	8002598 <__exponent+0x60>

080025b4 <_printf_float>:
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	ed2d 8b02 	vpush	{d8}
 80025bc:	b08d      	sub	sp, #52	; 0x34
 80025be:	460c      	mov	r4, r1
 80025c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80025c4:	4616      	mov	r6, r2
 80025c6:	461f      	mov	r7, r3
 80025c8:	4605      	mov	r5, r0
 80025ca:	f001 fa37 	bl	8003a3c <_localeconv_r>
 80025ce:	f8d0 a000 	ldr.w	sl, [r0]
 80025d2:	4650      	mov	r0, sl
 80025d4:	f7fd fe14 	bl	8000200 <strlen>
 80025d8:	2300      	movs	r3, #0
 80025da:	930a      	str	r3, [sp, #40]	; 0x28
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	9305      	str	r3, [sp, #20]
 80025e0:	f8d8 3000 	ldr.w	r3, [r8]
 80025e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80025e8:	3307      	adds	r3, #7
 80025ea:	f023 0307 	bic.w	r3, r3, #7
 80025ee:	f103 0208 	add.w	r2, r3, #8
 80025f2:	f8c8 2000 	str.w	r2, [r8]
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80025fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002606:	9307      	str	r3, [sp, #28]
 8002608:	f8cd 8018 	str.w	r8, [sp, #24]
 800260c:	ee08 0a10 	vmov	s16, r0
 8002610:	4b9f      	ldr	r3, [pc, #636]	; (8002890 <_printf_float+0x2dc>)
 8002612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	f7fe fa9f 	bl	8000b5c <__aeabi_dcmpun>
 800261e:	bb88      	cbnz	r0, 8002684 <_printf_float+0xd0>
 8002620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002624:	4b9a      	ldr	r3, [pc, #616]	; (8002890 <_printf_float+0x2dc>)
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
 800262a:	f7fe fa79 	bl	8000b20 <__aeabi_dcmple>
 800262e:	bb48      	cbnz	r0, 8002684 <_printf_float+0xd0>
 8002630:	2200      	movs	r2, #0
 8002632:	2300      	movs	r3, #0
 8002634:	4640      	mov	r0, r8
 8002636:	4649      	mov	r1, r9
 8002638:	f7fe fa68 	bl	8000b0c <__aeabi_dcmplt>
 800263c:	b110      	cbz	r0, 8002644 <_printf_float+0x90>
 800263e:	232d      	movs	r3, #45	; 0x2d
 8002640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002644:	4b93      	ldr	r3, [pc, #588]	; (8002894 <_printf_float+0x2e0>)
 8002646:	4894      	ldr	r0, [pc, #592]	; (8002898 <_printf_float+0x2e4>)
 8002648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800264c:	bf94      	ite	ls
 800264e:	4698      	movls	r8, r3
 8002650:	4680      	movhi	r8, r0
 8002652:	2303      	movs	r3, #3
 8002654:	6123      	str	r3, [r4, #16]
 8002656:	9b05      	ldr	r3, [sp, #20]
 8002658:	f023 0204 	bic.w	r2, r3, #4
 800265c:	6022      	str	r2, [r4, #0]
 800265e:	f04f 0900 	mov.w	r9, #0
 8002662:	9700      	str	r7, [sp, #0]
 8002664:	4633      	mov	r3, r6
 8002666:	aa0b      	add	r2, sp, #44	; 0x2c
 8002668:	4621      	mov	r1, r4
 800266a:	4628      	mov	r0, r5
 800266c:	f000 f9d8 	bl	8002a20 <_printf_common>
 8002670:	3001      	adds	r0, #1
 8002672:	f040 8090 	bne.w	8002796 <_printf_float+0x1e2>
 8002676:	f04f 30ff 	mov.w	r0, #4294967295
 800267a:	b00d      	add	sp, #52	; 0x34
 800267c:	ecbd 8b02 	vpop	{d8}
 8002680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	4640      	mov	r0, r8
 800268a:	4649      	mov	r1, r9
 800268c:	f7fe fa66 	bl	8000b5c <__aeabi_dcmpun>
 8002690:	b140      	cbz	r0, 80026a4 <_printf_float+0xf0>
 8002692:	464b      	mov	r3, r9
 8002694:	2b00      	cmp	r3, #0
 8002696:	bfbc      	itt	lt
 8002698:	232d      	movlt	r3, #45	; 0x2d
 800269a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800269e:	487f      	ldr	r0, [pc, #508]	; (800289c <_printf_float+0x2e8>)
 80026a0:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <_printf_float+0x2ec>)
 80026a2:	e7d1      	b.n	8002648 <_printf_float+0x94>
 80026a4:	6863      	ldr	r3, [r4, #4]
 80026a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80026aa:	9206      	str	r2, [sp, #24]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	d13f      	bne.n	8002730 <_printf_float+0x17c>
 80026b0:	2306      	movs	r3, #6
 80026b2:	6063      	str	r3, [r4, #4]
 80026b4:	9b05      	ldr	r3, [sp, #20]
 80026b6:	6861      	ldr	r1, [r4, #4]
 80026b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026bc:	2300      	movs	r3, #0
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	ab0a      	add	r3, sp, #40	; 0x28
 80026c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80026c6:	ab09      	add	r3, sp, #36	; 0x24
 80026c8:	ec49 8b10 	vmov	d0, r8, r9
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6022      	str	r2, [r4, #0]
 80026d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7ff fecd 	bl	8002474 <__cvt>
 80026da:	9b06      	ldr	r3, [sp, #24]
 80026dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026de:	2b47      	cmp	r3, #71	; 0x47
 80026e0:	4680      	mov	r8, r0
 80026e2:	d108      	bne.n	80026f6 <_printf_float+0x142>
 80026e4:	1cc8      	adds	r0, r1, #3
 80026e6:	db02      	blt.n	80026ee <_printf_float+0x13a>
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	4299      	cmp	r1, r3
 80026ec:	dd41      	ble.n	8002772 <_printf_float+0x1be>
 80026ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80026f2:	fa5f fb8b 	uxtb.w	fp, fp
 80026f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80026fa:	d820      	bhi.n	800273e <_printf_float+0x18a>
 80026fc:	3901      	subs	r1, #1
 80026fe:	465a      	mov	r2, fp
 8002700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002704:	9109      	str	r1, [sp, #36]	; 0x24
 8002706:	f7ff ff17 	bl	8002538 <__exponent>
 800270a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800270c:	1813      	adds	r3, r2, r0
 800270e:	2a01      	cmp	r2, #1
 8002710:	4681      	mov	r9, r0
 8002712:	6123      	str	r3, [r4, #16]
 8002714:	dc02      	bgt.n	800271c <_printf_float+0x168>
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	07d2      	lsls	r2, r2, #31
 800271a:	d501      	bpl.n	8002720 <_printf_float+0x16c>
 800271c:	3301      	adds	r3, #1
 800271e:	6123      	str	r3, [r4, #16]
 8002720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002724:	2b00      	cmp	r3, #0
 8002726:	d09c      	beq.n	8002662 <_printf_float+0xae>
 8002728:	232d      	movs	r3, #45	; 0x2d
 800272a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800272e:	e798      	b.n	8002662 <_printf_float+0xae>
 8002730:	9a06      	ldr	r2, [sp, #24]
 8002732:	2a47      	cmp	r2, #71	; 0x47
 8002734:	d1be      	bne.n	80026b4 <_printf_float+0x100>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1bc      	bne.n	80026b4 <_printf_float+0x100>
 800273a:	2301      	movs	r3, #1
 800273c:	e7b9      	b.n	80026b2 <_printf_float+0xfe>
 800273e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002742:	d118      	bne.n	8002776 <_printf_float+0x1c2>
 8002744:	2900      	cmp	r1, #0
 8002746:	6863      	ldr	r3, [r4, #4]
 8002748:	dd0b      	ble.n	8002762 <_printf_float+0x1ae>
 800274a:	6121      	str	r1, [r4, #16]
 800274c:	b913      	cbnz	r3, 8002754 <_printf_float+0x1a0>
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	07d0      	lsls	r0, r2, #31
 8002752:	d502      	bpl.n	800275a <_printf_float+0x1a6>
 8002754:	3301      	adds	r3, #1
 8002756:	440b      	add	r3, r1
 8002758:	6123      	str	r3, [r4, #16]
 800275a:	65a1      	str	r1, [r4, #88]	; 0x58
 800275c:	f04f 0900 	mov.w	r9, #0
 8002760:	e7de      	b.n	8002720 <_printf_float+0x16c>
 8002762:	b913      	cbnz	r3, 800276a <_printf_float+0x1b6>
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	07d2      	lsls	r2, r2, #31
 8002768:	d501      	bpl.n	800276e <_printf_float+0x1ba>
 800276a:	3302      	adds	r3, #2
 800276c:	e7f4      	b.n	8002758 <_printf_float+0x1a4>
 800276e:	2301      	movs	r3, #1
 8002770:	e7f2      	b.n	8002758 <_printf_float+0x1a4>
 8002772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002778:	4299      	cmp	r1, r3
 800277a:	db05      	blt.n	8002788 <_printf_float+0x1d4>
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	6121      	str	r1, [r4, #16]
 8002780:	07d8      	lsls	r0, r3, #31
 8002782:	d5ea      	bpl.n	800275a <_printf_float+0x1a6>
 8002784:	1c4b      	adds	r3, r1, #1
 8002786:	e7e7      	b.n	8002758 <_printf_float+0x1a4>
 8002788:	2900      	cmp	r1, #0
 800278a:	bfd4      	ite	le
 800278c:	f1c1 0202 	rsble	r2, r1, #2
 8002790:	2201      	movgt	r2, #1
 8002792:	4413      	add	r3, r2
 8002794:	e7e0      	b.n	8002758 <_printf_float+0x1a4>
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	055a      	lsls	r2, r3, #21
 800279a:	d407      	bmi.n	80027ac <_printf_float+0x1f8>
 800279c:	6923      	ldr	r3, [r4, #16]
 800279e:	4642      	mov	r2, r8
 80027a0:	4631      	mov	r1, r6
 80027a2:	4628      	mov	r0, r5
 80027a4:	47b8      	blx	r7
 80027a6:	3001      	adds	r0, #1
 80027a8:	d12c      	bne.n	8002804 <_printf_float+0x250>
 80027aa:	e764      	b.n	8002676 <_printf_float+0xc2>
 80027ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80027b0:	f240 80e0 	bls.w	8002974 <_printf_float+0x3c0>
 80027b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80027b8:	2200      	movs	r2, #0
 80027ba:	2300      	movs	r3, #0
 80027bc:	f7fe f99c 	bl	8000af8 <__aeabi_dcmpeq>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d034      	beq.n	800282e <_printf_float+0x27a>
 80027c4:	4a37      	ldr	r2, [pc, #220]	; (80028a4 <_printf_float+0x2f0>)
 80027c6:	2301      	movs	r3, #1
 80027c8:	4631      	mov	r1, r6
 80027ca:	4628      	mov	r0, r5
 80027cc:	47b8      	blx	r7
 80027ce:	3001      	adds	r0, #1
 80027d0:	f43f af51 	beq.w	8002676 <_printf_float+0xc2>
 80027d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027d8:	429a      	cmp	r2, r3
 80027da:	db02      	blt.n	80027e2 <_printf_float+0x22e>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	07d8      	lsls	r0, r3, #31
 80027e0:	d510      	bpl.n	8002804 <_printf_float+0x250>
 80027e2:	ee18 3a10 	vmov	r3, s16
 80027e6:	4652      	mov	r2, sl
 80027e8:	4631      	mov	r1, r6
 80027ea:	4628      	mov	r0, r5
 80027ec:	47b8      	blx	r7
 80027ee:	3001      	adds	r0, #1
 80027f0:	f43f af41 	beq.w	8002676 <_printf_float+0xc2>
 80027f4:	f04f 0800 	mov.w	r8, #0
 80027f8:	f104 091a 	add.w	r9, r4, #26
 80027fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	4543      	cmp	r3, r8
 8002802:	dc09      	bgt.n	8002818 <_printf_float+0x264>
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	079b      	lsls	r3, r3, #30
 8002808:	f100 8105 	bmi.w	8002a16 <_printf_float+0x462>
 800280c:	68e0      	ldr	r0, [r4, #12]
 800280e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002810:	4298      	cmp	r0, r3
 8002812:	bfb8      	it	lt
 8002814:	4618      	movlt	r0, r3
 8002816:	e730      	b.n	800267a <_printf_float+0xc6>
 8002818:	2301      	movs	r3, #1
 800281a:	464a      	mov	r2, r9
 800281c:	4631      	mov	r1, r6
 800281e:	4628      	mov	r0, r5
 8002820:	47b8      	blx	r7
 8002822:	3001      	adds	r0, #1
 8002824:	f43f af27 	beq.w	8002676 <_printf_float+0xc2>
 8002828:	f108 0801 	add.w	r8, r8, #1
 800282c:	e7e6      	b.n	80027fc <_printf_float+0x248>
 800282e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002830:	2b00      	cmp	r3, #0
 8002832:	dc39      	bgt.n	80028a8 <_printf_float+0x2f4>
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <_printf_float+0x2f0>)
 8002836:	2301      	movs	r3, #1
 8002838:	4631      	mov	r1, r6
 800283a:	4628      	mov	r0, r5
 800283c:	47b8      	blx	r7
 800283e:	3001      	adds	r0, #1
 8002840:	f43f af19 	beq.w	8002676 <_printf_float+0xc2>
 8002844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002848:	4313      	orrs	r3, r2
 800284a:	d102      	bne.n	8002852 <_printf_float+0x29e>
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	07d9      	lsls	r1, r3, #31
 8002850:	d5d8      	bpl.n	8002804 <_printf_float+0x250>
 8002852:	ee18 3a10 	vmov	r3, s16
 8002856:	4652      	mov	r2, sl
 8002858:	4631      	mov	r1, r6
 800285a:	4628      	mov	r0, r5
 800285c:	47b8      	blx	r7
 800285e:	3001      	adds	r0, #1
 8002860:	f43f af09 	beq.w	8002676 <_printf_float+0xc2>
 8002864:	f04f 0900 	mov.w	r9, #0
 8002868:	f104 0a1a 	add.w	sl, r4, #26
 800286c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800286e:	425b      	negs	r3, r3
 8002870:	454b      	cmp	r3, r9
 8002872:	dc01      	bgt.n	8002878 <_printf_float+0x2c4>
 8002874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002876:	e792      	b.n	800279e <_printf_float+0x1ea>
 8002878:	2301      	movs	r3, #1
 800287a:	4652      	mov	r2, sl
 800287c:	4631      	mov	r1, r6
 800287e:	4628      	mov	r0, r5
 8002880:	47b8      	blx	r7
 8002882:	3001      	adds	r0, #1
 8002884:	f43f aef7 	beq.w	8002676 <_printf_float+0xc2>
 8002888:	f109 0901 	add.w	r9, r9, #1
 800288c:	e7ee      	b.n	800286c <_printf_float+0x2b8>
 800288e:	bf00      	nop
 8002890:	7fefffff 	.word	0x7fefffff
 8002894:	08004f10 	.word	0x08004f10
 8002898:	08004f14 	.word	0x08004f14
 800289c:	08004f1c 	.word	0x08004f1c
 80028a0:	08004f18 	.word	0x08004f18
 80028a4:	08004f20 	.word	0x08004f20
 80028a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80028aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bfa8      	it	ge
 80028b0:	461a      	movge	r2, r3
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	4691      	mov	r9, r2
 80028b6:	dc37      	bgt.n	8002928 <_printf_float+0x374>
 80028b8:	f04f 0b00 	mov.w	fp, #0
 80028bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028c0:	f104 021a 	add.w	r2, r4, #26
 80028c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028c6:	9305      	str	r3, [sp, #20]
 80028c8:	eba3 0309 	sub.w	r3, r3, r9
 80028cc:	455b      	cmp	r3, fp
 80028ce:	dc33      	bgt.n	8002938 <_printf_float+0x384>
 80028d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028d4:	429a      	cmp	r2, r3
 80028d6:	db3b      	blt.n	8002950 <_printf_float+0x39c>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	07da      	lsls	r2, r3, #31
 80028dc:	d438      	bmi.n	8002950 <_printf_float+0x39c>
 80028de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e0:	9a05      	ldr	r2, [sp, #20]
 80028e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028e4:	1a9a      	subs	r2, r3, r2
 80028e6:	eba3 0901 	sub.w	r9, r3, r1
 80028ea:	4591      	cmp	r9, r2
 80028ec:	bfa8      	it	ge
 80028ee:	4691      	movge	r9, r2
 80028f0:	f1b9 0f00 	cmp.w	r9, #0
 80028f4:	dc35      	bgt.n	8002962 <_printf_float+0x3ae>
 80028f6:	f04f 0800 	mov.w	r8, #0
 80028fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028fe:	f104 0a1a 	add.w	sl, r4, #26
 8002902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	eba3 0309 	sub.w	r3, r3, r9
 800290c:	4543      	cmp	r3, r8
 800290e:	f77f af79 	ble.w	8002804 <_printf_float+0x250>
 8002912:	2301      	movs	r3, #1
 8002914:	4652      	mov	r2, sl
 8002916:	4631      	mov	r1, r6
 8002918:	4628      	mov	r0, r5
 800291a:	47b8      	blx	r7
 800291c:	3001      	adds	r0, #1
 800291e:	f43f aeaa 	beq.w	8002676 <_printf_float+0xc2>
 8002922:	f108 0801 	add.w	r8, r8, #1
 8002926:	e7ec      	b.n	8002902 <_printf_float+0x34e>
 8002928:	4613      	mov	r3, r2
 800292a:	4631      	mov	r1, r6
 800292c:	4642      	mov	r2, r8
 800292e:	4628      	mov	r0, r5
 8002930:	47b8      	blx	r7
 8002932:	3001      	adds	r0, #1
 8002934:	d1c0      	bne.n	80028b8 <_printf_float+0x304>
 8002936:	e69e      	b.n	8002676 <_printf_float+0xc2>
 8002938:	2301      	movs	r3, #1
 800293a:	4631      	mov	r1, r6
 800293c:	4628      	mov	r0, r5
 800293e:	9205      	str	r2, [sp, #20]
 8002940:	47b8      	blx	r7
 8002942:	3001      	adds	r0, #1
 8002944:	f43f ae97 	beq.w	8002676 <_printf_float+0xc2>
 8002948:	9a05      	ldr	r2, [sp, #20]
 800294a:	f10b 0b01 	add.w	fp, fp, #1
 800294e:	e7b9      	b.n	80028c4 <_printf_float+0x310>
 8002950:	ee18 3a10 	vmov	r3, s16
 8002954:	4652      	mov	r2, sl
 8002956:	4631      	mov	r1, r6
 8002958:	4628      	mov	r0, r5
 800295a:	47b8      	blx	r7
 800295c:	3001      	adds	r0, #1
 800295e:	d1be      	bne.n	80028de <_printf_float+0x32a>
 8002960:	e689      	b.n	8002676 <_printf_float+0xc2>
 8002962:	9a05      	ldr	r2, [sp, #20]
 8002964:	464b      	mov	r3, r9
 8002966:	4442      	add	r2, r8
 8002968:	4631      	mov	r1, r6
 800296a:	4628      	mov	r0, r5
 800296c:	47b8      	blx	r7
 800296e:	3001      	adds	r0, #1
 8002970:	d1c1      	bne.n	80028f6 <_printf_float+0x342>
 8002972:	e680      	b.n	8002676 <_printf_float+0xc2>
 8002974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002976:	2a01      	cmp	r2, #1
 8002978:	dc01      	bgt.n	800297e <_printf_float+0x3ca>
 800297a:	07db      	lsls	r3, r3, #31
 800297c:	d538      	bpl.n	80029f0 <_printf_float+0x43c>
 800297e:	2301      	movs	r3, #1
 8002980:	4642      	mov	r2, r8
 8002982:	4631      	mov	r1, r6
 8002984:	4628      	mov	r0, r5
 8002986:	47b8      	blx	r7
 8002988:	3001      	adds	r0, #1
 800298a:	f43f ae74 	beq.w	8002676 <_printf_float+0xc2>
 800298e:	ee18 3a10 	vmov	r3, s16
 8002992:	4652      	mov	r2, sl
 8002994:	4631      	mov	r1, r6
 8002996:	4628      	mov	r0, r5
 8002998:	47b8      	blx	r7
 800299a:	3001      	adds	r0, #1
 800299c:	f43f ae6b 	beq.w	8002676 <_printf_float+0xc2>
 80029a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80029a4:	2200      	movs	r2, #0
 80029a6:	2300      	movs	r3, #0
 80029a8:	f7fe f8a6 	bl	8000af8 <__aeabi_dcmpeq>
 80029ac:	b9d8      	cbnz	r0, 80029e6 <_printf_float+0x432>
 80029ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029b0:	f108 0201 	add.w	r2, r8, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	4631      	mov	r1, r6
 80029b8:	4628      	mov	r0, r5
 80029ba:	47b8      	blx	r7
 80029bc:	3001      	adds	r0, #1
 80029be:	d10e      	bne.n	80029de <_printf_float+0x42a>
 80029c0:	e659      	b.n	8002676 <_printf_float+0xc2>
 80029c2:	2301      	movs	r3, #1
 80029c4:	4652      	mov	r2, sl
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b8      	blx	r7
 80029cc:	3001      	adds	r0, #1
 80029ce:	f43f ae52 	beq.w	8002676 <_printf_float+0xc2>
 80029d2:	f108 0801 	add.w	r8, r8, #1
 80029d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	4543      	cmp	r3, r8
 80029dc:	dcf1      	bgt.n	80029c2 <_printf_float+0x40e>
 80029de:	464b      	mov	r3, r9
 80029e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80029e4:	e6dc      	b.n	80027a0 <_printf_float+0x1ec>
 80029e6:	f04f 0800 	mov.w	r8, #0
 80029ea:	f104 0a1a 	add.w	sl, r4, #26
 80029ee:	e7f2      	b.n	80029d6 <_printf_float+0x422>
 80029f0:	2301      	movs	r3, #1
 80029f2:	4642      	mov	r2, r8
 80029f4:	e7df      	b.n	80029b6 <_printf_float+0x402>
 80029f6:	2301      	movs	r3, #1
 80029f8:	464a      	mov	r2, r9
 80029fa:	4631      	mov	r1, r6
 80029fc:	4628      	mov	r0, r5
 80029fe:	47b8      	blx	r7
 8002a00:	3001      	adds	r0, #1
 8002a02:	f43f ae38 	beq.w	8002676 <_printf_float+0xc2>
 8002a06:	f108 0801 	add.w	r8, r8, #1
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	4543      	cmp	r3, r8
 8002a12:	dcf0      	bgt.n	80029f6 <_printf_float+0x442>
 8002a14:	e6fa      	b.n	800280c <_printf_float+0x258>
 8002a16:	f04f 0800 	mov.w	r8, #0
 8002a1a:	f104 0919 	add.w	r9, r4, #25
 8002a1e:	e7f4      	b.n	8002a0a <_printf_float+0x456>

08002a20 <_printf_common>:
 8002a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	4616      	mov	r6, r2
 8002a26:	4699      	mov	r9, r3
 8002a28:	688a      	ldr	r2, [r1, #8]
 8002a2a:	690b      	ldr	r3, [r1, #16]
 8002a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bfb8      	it	lt
 8002a34:	4613      	movlt	r3, r2
 8002a36:	6033      	str	r3, [r6, #0]
 8002a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a3c:	4607      	mov	r7, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	b10a      	cbz	r2, 8002a46 <_printf_common+0x26>
 8002a42:	3301      	adds	r3, #1
 8002a44:	6033      	str	r3, [r6, #0]
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	0699      	lsls	r1, r3, #26
 8002a4a:	bf42      	ittt	mi
 8002a4c:	6833      	ldrmi	r3, [r6, #0]
 8002a4e:	3302      	addmi	r3, #2
 8002a50:	6033      	strmi	r3, [r6, #0]
 8002a52:	6825      	ldr	r5, [r4, #0]
 8002a54:	f015 0506 	ands.w	r5, r5, #6
 8002a58:	d106      	bne.n	8002a68 <_printf_common+0x48>
 8002a5a:	f104 0a19 	add.w	sl, r4, #25
 8002a5e:	68e3      	ldr	r3, [r4, #12]
 8002a60:	6832      	ldr	r2, [r6, #0]
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	42ab      	cmp	r3, r5
 8002a66:	dc26      	bgt.n	8002ab6 <_printf_common+0x96>
 8002a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a6c:	1e13      	subs	r3, r2, #0
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	bf18      	it	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	0692      	lsls	r2, r2, #26
 8002a76:	d42b      	bmi.n	8002ad0 <_printf_common+0xb0>
 8002a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	4638      	mov	r0, r7
 8002a80:	47c0      	blx	r8
 8002a82:	3001      	adds	r0, #1
 8002a84:	d01e      	beq.n	8002ac4 <_printf_common+0xa4>
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	68e5      	ldr	r5, [r4, #12]
 8002a8a:	6832      	ldr	r2, [r6, #0]
 8002a8c:	f003 0306 	and.w	r3, r3, #6
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	bf08      	it	eq
 8002a94:	1aad      	subeq	r5, r5, r2
 8002a96:	68a3      	ldr	r3, [r4, #8]
 8002a98:	6922      	ldr	r2, [r4, #16]
 8002a9a:	bf0c      	ite	eq
 8002a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aa0:	2500      	movne	r5, #0
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	bfc4      	itt	gt
 8002aa6:	1a9b      	subgt	r3, r3, r2
 8002aa8:	18ed      	addgt	r5, r5, r3
 8002aaa:	2600      	movs	r6, #0
 8002aac:	341a      	adds	r4, #26
 8002aae:	42b5      	cmp	r5, r6
 8002ab0:	d11a      	bne.n	8002ae8 <_printf_common+0xc8>
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	e008      	b.n	8002ac8 <_printf_common+0xa8>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4652      	mov	r2, sl
 8002aba:	4649      	mov	r1, r9
 8002abc:	4638      	mov	r0, r7
 8002abe:	47c0      	blx	r8
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	d103      	bne.n	8002acc <_printf_common+0xac>
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002acc:	3501      	adds	r5, #1
 8002ace:	e7c6      	b.n	8002a5e <_printf_common+0x3e>
 8002ad0:	18e1      	adds	r1, r4, r3
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	2030      	movs	r0, #48	; 0x30
 8002ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ada:	4422      	add	r2, r4
 8002adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	e7c7      	b.n	8002a78 <_printf_common+0x58>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	4622      	mov	r2, r4
 8002aec:	4649      	mov	r1, r9
 8002aee:	4638      	mov	r0, r7
 8002af0:	47c0      	blx	r8
 8002af2:	3001      	adds	r0, #1
 8002af4:	d0e6      	beq.n	8002ac4 <_printf_common+0xa4>
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7d9      	b.n	8002aae <_printf_common+0x8e>
	...

08002afc <_printf_i>:
 8002afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b00:	7e0f      	ldrb	r7, [r1, #24]
 8002b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b04:	2f78      	cmp	r7, #120	; 0x78
 8002b06:	4691      	mov	r9, r2
 8002b08:	4680      	mov	r8, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	469a      	mov	sl, r3
 8002b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b12:	d807      	bhi.n	8002b24 <_printf_i+0x28>
 8002b14:	2f62      	cmp	r7, #98	; 0x62
 8002b16:	d80a      	bhi.n	8002b2e <_printf_i+0x32>
 8002b18:	2f00      	cmp	r7, #0
 8002b1a:	f000 80d8 	beq.w	8002cce <_printf_i+0x1d2>
 8002b1e:	2f58      	cmp	r7, #88	; 0x58
 8002b20:	f000 80a3 	beq.w	8002c6a <_printf_i+0x16e>
 8002b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b2c:	e03a      	b.n	8002ba4 <_printf_i+0xa8>
 8002b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b32:	2b15      	cmp	r3, #21
 8002b34:	d8f6      	bhi.n	8002b24 <_printf_i+0x28>
 8002b36:	a101      	add	r1, pc, #4	; (adr r1, 8002b3c <_printf_i+0x40>)
 8002b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b3c:	08002b95 	.word	0x08002b95
 8002b40:	08002ba9 	.word	0x08002ba9
 8002b44:	08002b25 	.word	0x08002b25
 8002b48:	08002b25 	.word	0x08002b25
 8002b4c:	08002b25 	.word	0x08002b25
 8002b50:	08002b25 	.word	0x08002b25
 8002b54:	08002ba9 	.word	0x08002ba9
 8002b58:	08002b25 	.word	0x08002b25
 8002b5c:	08002b25 	.word	0x08002b25
 8002b60:	08002b25 	.word	0x08002b25
 8002b64:	08002b25 	.word	0x08002b25
 8002b68:	08002cb5 	.word	0x08002cb5
 8002b6c:	08002bd9 	.word	0x08002bd9
 8002b70:	08002c97 	.word	0x08002c97
 8002b74:	08002b25 	.word	0x08002b25
 8002b78:	08002b25 	.word	0x08002b25
 8002b7c:	08002cd7 	.word	0x08002cd7
 8002b80:	08002b25 	.word	0x08002b25
 8002b84:	08002bd9 	.word	0x08002bd9
 8002b88:	08002b25 	.word	0x08002b25
 8002b8c:	08002b25 	.word	0x08002b25
 8002b90:	08002c9f 	.word	0x08002c9f
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	1d1a      	adds	r2, r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	602a      	str	r2, [r5, #0]
 8002b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0a3      	b.n	8002cf0 <_printf_i+0x1f4>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	6829      	ldr	r1, [r5, #0]
 8002bac:	0606      	lsls	r6, r0, #24
 8002bae:	f101 0304 	add.w	r3, r1, #4
 8002bb2:	d50a      	bpl.n	8002bca <_printf_i+0xce>
 8002bb4:	680e      	ldr	r6, [r1, #0]
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	2e00      	cmp	r6, #0
 8002bba:	da03      	bge.n	8002bc4 <_printf_i+0xc8>
 8002bbc:	232d      	movs	r3, #45	; 0x2d
 8002bbe:	4276      	negs	r6, r6
 8002bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bc4:	485e      	ldr	r0, [pc, #376]	; (8002d40 <_printf_i+0x244>)
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	e019      	b.n	8002bfe <_printf_i+0x102>
 8002bca:	680e      	ldr	r6, [r1, #0]
 8002bcc:	602b      	str	r3, [r5, #0]
 8002bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bd2:	bf18      	it	ne
 8002bd4:	b236      	sxthne	r6, r6
 8002bd6:	e7ef      	b.n	8002bb8 <_printf_i+0xbc>
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	1d19      	adds	r1, r3, #4
 8002bde:	6029      	str	r1, [r5, #0]
 8002be0:	0601      	lsls	r1, r0, #24
 8002be2:	d501      	bpl.n	8002be8 <_printf_i+0xec>
 8002be4:	681e      	ldr	r6, [r3, #0]
 8002be6:	e002      	b.n	8002bee <_printf_i+0xf2>
 8002be8:	0646      	lsls	r6, r0, #25
 8002bea:	d5fb      	bpl.n	8002be4 <_printf_i+0xe8>
 8002bec:	881e      	ldrh	r6, [r3, #0]
 8002bee:	4854      	ldr	r0, [pc, #336]	; (8002d40 <_printf_i+0x244>)
 8002bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2308      	moveq	r3, #8
 8002bf6:	230a      	movne	r3, #10
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bfe:	6865      	ldr	r5, [r4, #4]
 8002c00:	60a5      	str	r5, [r4, #8]
 8002c02:	2d00      	cmp	r5, #0
 8002c04:	bfa2      	ittt	ge
 8002c06:	6821      	ldrge	r1, [r4, #0]
 8002c08:	f021 0104 	bicge.w	r1, r1, #4
 8002c0c:	6021      	strge	r1, [r4, #0]
 8002c0e:	b90e      	cbnz	r6, 8002c14 <_printf_i+0x118>
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	d04d      	beq.n	8002cb0 <_printf_i+0x1b4>
 8002c14:	4615      	mov	r5, r2
 8002c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8002c1e:	5dc7      	ldrb	r7, [r0, r7]
 8002c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c24:	4637      	mov	r7, r6
 8002c26:	42bb      	cmp	r3, r7
 8002c28:	460e      	mov	r6, r1
 8002c2a:	d9f4      	bls.n	8002c16 <_printf_i+0x11a>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d10b      	bne.n	8002c48 <_printf_i+0x14c>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	07de      	lsls	r6, r3, #31
 8002c34:	d508      	bpl.n	8002c48 <_printf_i+0x14c>
 8002c36:	6923      	ldr	r3, [r4, #16]
 8002c38:	6861      	ldr	r1, [r4, #4]
 8002c3a:	4299      	cmp	r1, r3
 8002c3c:	bfde      	ittt	le
 8002c3e:	2330      	movle	r3, #48	; 0x30
 8002c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c48:	1b52      	subs	r2, r2, r5
 8002c4a:	6122      	str	r2, [r4, #16]
 8002c4c:	f8cd a000 	str.w	sl, [sp]
 8002c50:	464b      	mov	r3, r9
 8002c52:	aa03      	add	r2, sp, #12
 8002c54:	4621      	mov	r1, r4
 8002c56:	4640      	mov	r0, r8
 8002c58:	f7ff fee2 	bl	8002a20 <_printf_common>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d14c      	bne.n	8002cfa <_printf_i+0x1fe>
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	b004      	add	sp, #16
 8002c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6a:	4835      	ldr	r0, [pc, #212]	; (8002d40 <_printf_i+0x244>)
 8002c6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c70:	6829      	ldr	r1, [r5, #0]
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c78:	6029      	str	r1, [r5, #0]
 8002c7a:	061d      	lsls	r5, r3, #24
 8002c7c:	d514      	bpl.n	8002ca8 <_printf_i+0x1ac>
 8002c7e:	07df      	lsls	r7, r3, #31
 8002c80:	bf44      	itt	mi
 8002c82:	f043 0320 	orrmi.w	r3, r3, #32
 8002c86:	6023      	strmi	r3, [r4, #0]
 8002c88:	b91e      	cbnz	r6, 8002c92 <_printf_i+0x196>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f023 0320 	bic.w	r3, r3, #32
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	2310      	movs	r3, #16
 8002c94:	e7b0      	b.n	8002bf8 <_printf_i+0xfc>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	f043 0320 	orr.w	r3, r3, #32
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	2378      	movs	r3, #120	; 0x78
 8002ca0:	4828      	ldr	r0, [pc, #160]	; (8002d44 <_printf_i+0x248>)
 8002ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ca6:	e7e3      	b.n	8002c70 <_printf_i+0x174>
 8002ca8:	0659      	lsls	r1, r3, #25
 8002caa:	bf48      	it	mi
 8002cac:	b2b6      	uxthmi	r6, r6
 8002cae:	e7e6      	b.n	8002c7e <_printf_i+0x182>
 8002cb0:	4615      	mov	r5, r2
 8002cb2:	e7bb      	b.n	8002c2c <_printf_i+0x130>
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	6826      	ldr	r6, [r4, #0]
 8002cb8:	6961      	ldr	r1, [r4, #20]
 8002cba:	1d18      	adds	r0, r3, #4
 8002cbc:	6028      	str	r0, [r5, #0]
 8002cbe:	0635      	lsls	r5, r6, #24
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	d501      	bpl.n	8002cc8 <_printf_i+0x1cc>
 8002cc4:	6019      	str	r1, [r3, #0]
 8002cc6:	e002      	b.n	8002cce <_printf_i+0x1d2>
 8002cc8:	0670      	lsls	r0, r6, #25
 8002cca:	d5fb      	bpl.n	8002cc4 <_printf_i+0x1c8>
 8002ccc:	8019      	strh	r1, [r3, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	6123      	str	r3, [r4, #16]
 8002cd2:	4615      	mov	r5, r2
 8002cd4:	e7ba      	b.n	8002c4c <_printf_i+0x150>
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	1d1a      	adds	r2, r3, #4
 8002cda:	602a      	str	r2, [r5, #0]
 8002cdc:	681d      	ldr	r5, [r3, #0]
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f7fd fa94 	bl	8000210 <memchr>
 8002ce8:	b108      	cbz	r0, 8002cee <_printf_i+0x1f2>
 8002cea:	1b40      	subs	r0, r0, r5
 8002cec:	6060      	str	r0, [r4, #4]
 8002cee:	6863      	ldr	r3, [r4, #4]
 8002cf0:	6123      	str	r3, [r4, #16]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cf8:	e7a8      	b.n	8002c4c <_printf_i+0x150>
 8002cfa:	6923      	ldr	r3, [r4, #16]
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	4649      	mov	r1, r9
 8002d00:	4640      	mov	r0, r8
 8002d02:	47d0      	blx	sl
 8002d04:	3001      	adds	r0, #1
 8002d06:	d0ab      	beq.n	8002c60 <_printf_i+0x164>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	079b      	lsls	r3, r3, #30
 8002d0c:	d413      	bmi.n	8002d36 <_printf_i+0x23a>
 8002d0e:	68e0      	ldr	r0, [r4, #12]
 8002d10:	9b03      	ldr	r3, [sp, #12]
 8002d12:	4298      	cmp	r0, r3
 8002d14:	bfb8      	it	lt
 8002d16:	4618      	movlt	r0, r3
 8002d18:	e7a4      	b.n	8002c64 <_printf_i+0x168>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4632      	mov	r2, r6
 8002d1e:	4649      	mov	r1, r9
 8002d20:	4640      	mov	r0, r8
 8002d22:	47d0      	blx	sl
 8002d24:	3001      	adds	r0, #1
 8002d26:	d09b      	beq.n	8002c60 <_printf_i+0x164>
 8002d28:	3501      	adds	r5, #1
 8002d2a:	68e3      	ldr	r3, [r4, #12]
 8002d2c:	9903      	ldr	r1, [sp, #12]
 8002d2e:	1a5b      	subs	r3, r3, r1
 8002d30:	42ab      	cmp	r3, r5
 8002d32:	dcf2      	bgt.n	8002d1a <_printf_i+0x21e>
 8002d34:	e7eb      	b.n	8002d0e <_printf_i+0x212>
 8002d36:	2500      	movs	r5, #0
 8002d38:	f104 0619 	add.w	r6, r4, #25
 8002d3c:	e7f5      	b.n	8002d2a <_printf_i+0x22e>
 8002d3e:	bf00      	nop
 8002d40:	08004f22 	.word	0x08004f22
 8002d44:	08004f33 	.word	0x08004f33

08002d48 <quorem>:
 8002d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4c:	6903      	ldr	r3, [r0, #16]
 8002d4e:	690c      	ldr	r4, [r1, #16]
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	4607      	mov	r7, r0
 8002d54:	f2c0 8081 	blt.w	8002e5a <quorem+0x112>
 8002d58:	3c01      	subs	r4, #1
 8002d5a:	f101 0814 	add.w	r8, r1, #20
 8002d5e:	f100 0514 	add.w	r5, r0, #20
 8002d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d70:	3301      	adds	r3, #1
 8002d72:	429a      	cmp	r2, r3
 8002d74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002d78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002d7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d80:	d331      	bcc.n	8002de6 <quorem+0x9e>
 8002d82:	f04f 0e00 	mov.w	lr, #0
 8002d86:	4640      	mov	r0, r8
 8002d88:	46ac      	mov	ip, r5
 8002d8a:	46f2      	mov	sl, lr
 8002d8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002d90:	b293      	uxth	r3, r2
 8002d92:	fb06 e303 	mla	r3, r6, r3, lr
 8002d96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8002da0:	f8dc a000 	ldr.w	sl, [ip]
 8002da4:	0c12      	lsrs	r2, r2, #16
 8002da6:	fa13 f38a 	uxtah	r3, r3, sl
 8002daa:	fb06 e202 	mla	r2, r6, r2, lr
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	9b00      	ldr	r3, [sp, #0]
 8002db2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002db6:	b292      	uxth	r2, r2
 8002db8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002dc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8002dc4:	4581      	cmp	r9, r0
 8002dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dca:	f84c 3b04 	str.w	r3, [ip], #4
 8002dce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002dd2:	d2db      	bcs.n	8002d8c <quorem+0x44>
 8002dd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8002dd8:	b92b      	cbnz	r3, 8002de6 <quorem+0x9e>
 8002dda:	9b01      	ldr	r3, [sp, #4]
 8002ddc:	3b04      	subs	r3, #4
 8002dde:	429d      	cmp	r5, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	d32e      	bcc.n	8002e42 <quorem+0xfa>
 8002de4:	613c      	str	r4, [r7, #16]
 8002de6:	4638      	mov	r0, r7
 8002de8:	f001 f8c4 	bl	8003f74 <__mcmp>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	db24      	blt.n	8002e3a <quorem+0xf2>
 8002df0:	3601      	adds	r6, #1
 8002df2:	4628      	mov	r0, r5
 8002df4:	f04f 0c00 	mov.w	ip, #0
 8002df8:	f858 2b04 	ldr.w	r2, [r8], #4
 8002dfc:	f8d0 e000 	ldr.w	lr, [r0]
 8002e00:	b293      	uxth	r3, r2
 8002e02:	ebac 0303 	sub.w	r3, ip, r3
 8002e06:	0c12      	lsrs	r2, r2, #16
 8002e08:	fa13 f38e 	uxtah	r3, r3, lr
 8002e0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002e10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e1a:	45c1      	cmp	r9, r8
 8002e1c:	f840 3b04 	str.w	r3, [r0], #4
 8002e20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002e24:	d2e8      	bcs.n	8002df8 <quorem+0xb0>
 8002e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e2e:	b922      	cbnz	r2, 8002e3a <quorem+0xf2>
 8002e30:	3b04      	subs	r3, #4
 8002e32:	429d      	cmp	r5, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	d30a      	bcc.n	8002e4e <quorem+0x106>
 8002e38:	613c      	str	r4, [r7, #16]
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	b003      	add	sp, #12
 8002e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	3b04      	subs	r3, #4
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	d1cc      	bne.n	8002de4 <quorem+0x9c>
 8002e4a:	3c01      	subs	r4, #1
 8002e4c:	e7c7      	b.n	8002dde <quorem+0x96>
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	3b04      	subs	r3, #4
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d1f0      	bne.n	8002e38 <quorem+0xf0>
 8002e56:	3c01      	subs	r4, #1
 8002e58:	e7eb      	b.n	8002e32 <quorem+0xea>
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e7ee      	b.n	8002e3c <quorem+0xf4>
	...

08002e60 <_dtoa_r>:
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	ed2d 8b04 	vpush	{d8-d9}
 8002e68:	ec57 6b10 	vmov	r6, r7, d0
 8002e6c:	b093      	sub	sp, #76	; 0x4c
 8002e6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002e70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002e74:	9106      	str	r1, [sp, #24]
 8002e76:	ee10 aa10 	vmov	sl, s0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8002e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8002e80:	46bb      	mov	fp, r7
 8002e82:	b975      	cbnz	r5, 8002ea2 <_dtoa_r+0x42>
 8002e84:	2010      	movs	r0, #16
 8002e86:	f000 fddd 	bl	8003a44 <malloc>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6260      	str	r0, [r4, #36]	; 0x24
 8002e8e:	b920      	cbnz	r0, 8002e9a <_dtoa_r+0x3a>
 8002e90:	4ba7      	ldr	r3, [pc, #668]	; (8003130 <_dtoa_r+0x2d0>)
 8002e92:	21ea      	movs	r1, #234	; 0xea
 8002e94:	48a7      	ldr	r0, [pc, #668]	; (8003134 <_dtoa_r+0x2d4>)
 8002e96:	f001 fa75 	bl	8004384 <__assert_func>
 8002e9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002e9e:	6005      	str	r5, [r0, #0]
 8002ea0:	60c5      	str	r5, [r0, #12]
 8002ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	b151      	cbz	r1, 8002ebe <_dtoa_r+0x5e>
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	604a      	str	r2, [r1, #4]
 8002eac:	2301      	movs	r3, #1
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 fe1c 	bl	8003af0 <_Bfree>
 8002eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	1e3b      	subs	r3, r7, #0
 8002ec0:	bfaa      	itet	ge
 8002ec2:	2300      	movge	r3, #0
 8002ec4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002ec8:	f8c8 3000 	strge.w	r3, [r8]
 8002ecc:	4b9a      	ldr	r3, [pc, #616]	; (8003138 <_dtoa_r+0x2d8>)
 8002ece:	bfbc      	itt	lt
 8002ed0:	2201      	movlt	r2, #1
 8002ed2:	f8c8 2000 	strlt.w	r2, [r8]
 8002ed6:	ea33 030b 	bics.w	r3, r3, fp
 8002eda:	d11b      	bne.n	8002f14 <_dtoa_r+0xb4>
 8002edc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ede:	f242 730f 	movw	r3, #9999	; 0x270f
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002ee8:	4333      	orrs	r3, r6
 8002eea:	f000 8592 	beq.w	8003a12 <_dtoa_r+0xbb2>
 8002eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ef0:	b963      	cbnz	r3, 8002f0c <_dtoa_r+0xac>
 8002ef2:	4b92      	ldr	r3, [pc, #584]	; (800313c <_dtoa_r+0x2dc>)
 8002ef4:	e022      	b.n	8002f3c <_dtoa_r+0xdc>
 8002ef6:	4b92      	ldr	r3, [pc, #584]	; (8003140 <_dtoa_r+0x2e0>)
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	3308      	adds	r3, #8
 8002efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	9801      	ldr	r0, [sp, #4]
 8002f02:	b013      	add	sp, #76	; 0x4c
 8002f04:	ecbd 8b04 	vpop	{d8-d9}
 8002f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0c:	4b8b      	ldr	r3, [pc, #556]	; (800313c <_dtoa_r+0x2dc>)
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	3303      	adds	r3, #3
 8002f12:	e7f3      	b.n	8002efc <_dtoa_r+0x9c>
 8002f14:	2200      	movs	r2, #0
 8002f16:	2300      	movs	r3, #0
 8002f18:	4650      	mov	r0, sl
 8002f1a:	4659      	mov	r1, fp
 8002f1c:	f7fd fdec 	bl	8000af8 <__aeabi_dcmpeq>
 8002f20:	ec4b ab19 	vmov	d9, sl, fp
 8002f24:	4680      	mov	r8, r0
 8002f26:	b158      	cbz	r0, 8002f40 <_dtoa_r+0xe0>
 8002f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 856b 	beq.w	8003a0c <_dtoa_r+0xbac>
 8002f36:	4883      	ldr	r0, [pc, #524]	; (8003144 <_dtoa_r+0x2e4>)
 8002f38:	6018      	str	r0, [r3, #0]
 8002f3a:	1e43      	subs	r3, r0, #1
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	e7df      	b.n	8002f00 <_dtoa_r+0xa0>
 8002f40:	ec4b ab10 	vmov	d0, sl, fp
 8002f44:	aa10      	add	r2, sp, #64	; 0x40
 8002f46:	a911      	add	r1, sp, #68	; 0x44
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f001 f8b9 	bl	80040c0 <__d2b>
 8002f4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002f52:	ee08 0a10 	vmov	s16, r0
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	f000 8084 	beq.w	8003064 <_dtoa_r+0x204>
 8002f5c:	ee19 3a90 	vmov	r3, s19
 8002f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002f68:	4656      	mov	r6, sl
 8002f6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002f6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002f72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002f76:	4b74      	ldr	r3, [pc, #464]	; (8003148 <_dtoa_r+0x2e8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	f7fd f99b 	bl	80002b8 <__aeabi_dsub>
 8002f82:	a365      	add	r3, pc, #404	; (adr r3, 8003118 <_dtoa_r+0x2b8>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fb4e 	bl	8000628 <__aeabi_dmul>
 8002f8c:	a364      	add	r3, pc, #400	; (adr r3, 8003120 <_dtoa_r+0x2c0>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd f993 	bl	80002bc <__adddf3>
 8002f96:	4606      	mov	r6, r0
 8002f98:	4628      	mov	r0, r5
 8002f9a:	460f      	mov	r7, r1
 8002f9c:	f7fd fada 	bl	8000554 <__aeabi_i2d>
 8002fa0:	a361      	add	r3, pc, #388	; (adr r3, 8003128 <_dtoa_r+0x2c8>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f7fd fb3f 	bl	8000628 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4630      	mov	r0, r6
 8002fb0:	4639      	mov	r1, r7
 8002fb2:	f7fd f983 	bl	80002bc <__adddf3>
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	460f      	mov	r7, r1
 8002fba:	f7fd fde5 	bl	8000b88 <__aeabi_d2iz>
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	9000      	str	r0, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	f7fd fda0 	bl	8000b0c <__aeabi_dcmplt>
 8002fcc:	b150      	cbz	r0, 8002fe4 <_dtoa_r+0x184>
 8002fce:	9800      	ldr	r0, [sp, #0]
 8002fd0:	f7fd fac0 	bl	8000554 <__aeabi_i2d>
 8002fd4:	4632      	mov	r2, r6
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	f7fd fd8e 	bl	8000af8 <__aeabi_dcmpeq>
 8002fdc:	b910      	cbnz	r0, 8002fe4 <_dtoa_r+0x184>
 8002fde:	9b00      	ldr	r3, [sp, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	9b00      	ldr	r3, [sp, #0]
 8002fe6:	2b16      	cmp	r3, #22
 8002fe8:	d85a      	bhi.n	80030a0 <_dtoa_r+0x240>
 8002fea:	9a00      	ldr	r2, [sp, #0]
 8002fec:	4b57      	ldr	r3, [pc, #348]	; (800314c <_dtoa_r+0x2ec>)
 8002fee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	ec51 0b19 	vmov	r0, r1, d9
 8002ffa:	f7fd fd87 	bl	8000b0c <__aeabi_dcmplt>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d050      	beq.n	80030a4 <_dtoa_r+0x244>
 8003002:	9b00      	ldr	r3, [sp, #0]
 8003004:	3b01      	subs	r3, #1
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2300      	movs	r3, #0
 800300a:	930b      	str	r3, [sp, #44]	; 0x2c
 800300c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800300e:	1b5d      	subs	r5, r3, r5
 8003010:	1e6b      	subs	r3, r5, #1
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	bf45      	ittet	mi
 8003016:	f1c5 0301 	rsbmi	r3, r5, #1
 800301a:	9304      	strmi	r3, [sp, #16]
 800301c:	2300      	movpl	r3, #0
 800301e:	2300      	movmi	r3, #0
 8003020:	bf4c      	ite	mi
 8003022:	9305      	strmi	r3, [sp, #20]
 8003024:	9304      	strpl	r3, [sp, #16]
 8003026:	9b00      	ldr	r3, [sp, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db3d      	blt.n	80030a8 <_dtoa_r+0x248>
 800302c:	9b05      	ldr	r3, [sp, #20]
 800302e:	9a00      	ldr	r2, [sp, #0]
 8003030:	920a      	str	r2, [sp, #40]	; 0x28
 8003032:	4413      	add	r3, r2
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	2300      	movs	r3, #0
 8003038:	9307      	str	r3, [sp, #28]
 800303a:	9b06      	ldr	r3, [sp, #24]
 800303c:	2b09      	cmp	r3, #9
 800303e:	f200 8089 	bhi.w	8003154 <_dtoa_r+0x2f4>
 8003042:	2b05      	cmp	r3, #5
 8003044:	bfc4      	itt	gt
 8003046:	3b04      	subgt	r3, #4
 8003048:	9306      	strgt	r3, [sp, #24]
 800304a:	9b06      	ldr	r3, [sp, #24]
 800304c:	f1a3 0302 	sub.w	r3, r3, #2
 8003050:	bfcc      	ite	gt
 8003052:	2500      	movgt	r5, #0
 8003054:	2501      	movle	r5, #1
 8003056:	2b03      	cmp	r3, #3
 8003058:	f200 8087 	bhi.w	800316a <_dtoa_r+0x30a>
 800305c:	e8df f003 	tbb	[pc, r3]
 8003060:	59383a2d 	.word	0x59383a2d
 8003064:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003068:	441d      	add	r5, r3
 800306a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800306e:	2b20      	cmp	r3, #32
 8003070:	bfc1      	itttt	gt
 8003072:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003076:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800307a:	fa0b f303 	lslgt.w	r3, fp, r3
 800307e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003082:	bfda      	itte	le
 8003084:	f1c3 0320 	rsble	r3, r3, #32
 8003088:	fa06 f003 	lslle.w	r0, r6, r3
 800308c:	4318      	orrgt	r0, r3
 800308e:	f7fd fa51 	bl	8000534 <__aeabi_ui2d>
 8003092:	2301      	movs	r3, #1
 8003094:	4606      	mov	r6, r0
 8003096:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800309a:	3d01      	subs	r5, #1
 800309c:	930e      	str	r3, [sp, #56]	; 0x38
 800309e:	e76a      	b.n	8002f76 <_dtoa_r+0x116>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e7b2      	b.n	800300a <_dtoa_r+0x1aa>
 80030a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80030a6:	e7b1      	b.n	800300c <_dtoa_r+0x1ac>
 80030a8:	9b04      	ldr	r3, [sp, #16]
 80030aa:	9a00      	ldr	r2, [sp, #0]
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	4253      	negs	r3, r2
 80030b2:	9307      	str	r3, [sp, #28]
 80030b4:	2300      	movs	r3, #0
 80030b6:	930a      	str	r3, [sp, #40]	; 0x28
 80030b8:	e7bf      	b.n	800303a <_dtoa_r+0x1da>
 80030ba:	2300      	movs	r3, #0
 80030bc:	9308      	str	r3, [sp, #32]
 80030be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	dc55      	bgt.n	8003170 <_dtoa_r+0x310>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80030ca:	461a      	mov	r2, r3
 80030cc:	9209      	str	r2, [sp, #36]	; 0x24
 80030ce:	e00c      	b.n	80030ea <_dtoa_r+0x28a>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e7f3      	b.n	80030bc <_dtoa_r+0x25c>
 80030d4:	2300      	movs	r3, #0
 80030d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030d8:	9308      	str	r3, [sp, #32]
 80030da:	9b00      	ldr	r3, [sp, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	9302      	str	r3, [sp, #8]
 80030e0:	3301      	adds	r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	bfb8      	it	lt
 80030e8:	2301      	movlt	r3, #1
 80030ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80030ec:	2200      	movs	r2, #0
 80030ee:	6042      	str	r2, [r0, #4]
 80030f0:	2204      	movs	r2, #4
 80030f2:	f102 0614 	add.w	r6, r2, #20
 80030f6:	429e      	cmp	r6, r3
 80030f8:	6841      	ldr	r1, [r0, #4]
 80030fa:	d93d      	bls.n	8003178 <_dtoa_r+0x318>
 80030fc:	4620      	mov	r0, r4
 80030fe:	f000 fcb7 	bl	8003a70 <_Balloc>
 8003102:	9001      	str	r0, [sp, #4]
 8003104:	2800      	cmp	r0, #0
 8003106:	d13b      	bne.n	8003180 <_dtoa_r+0x320>
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <_dtoa_r+0x2f0>)
 800310a:	4602      	mov	r2, r0
 800310c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003110:	e6c0      	b.n	8002e94 <_dtoa_r+0x34>
 8003112:	2301      	movs	r3, #1
 8003114:	e7df      	b.n	80030d6 <_dtoa_r+0x276>
 8003116:	bf00      	nop
 8003118:	636f4361 	.word	0x636f4361
 800311c:	3fd287a7 	.word	0x3fd287a7
 8003120:	8b60c8b3 	.word	0x8b60c8b3
 8003124:	3fc68a28 	.word	0x3fc68a28
 8003128:	509f79fb 	.word	0x509f79fb
 800312c:	3fd34413 	.word	0x3fd34413
 8003130:	08004f51 	.word	0x08004f51
 8003134:	08004f68 	.word	0x08004f68
 8003138:	7ff00000 	.word	0x7ff00000
 800313c:	08004f4d 	.word	0x08004f4d
 8003140:	08004f44 	.word	0x08004f44
 8003144:	08004f21 	.word	0x08004f21
 8003148:	3ff80000 	.word	0x3ff80000
 800314c:	08005058 	.word	0x08005058
 8003150:	08004fc3 	.word	0x08004fc3
 8003154:	2501      	movs	r5, #1
 8003156:	2300      	movs	r3, #0
 8003158:	9306      	str	r3, [sp, #24]
 800315a:	9508      	str	r5, [sp, #32]
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	2312      	movs	r3, #18
 8003168:	e7b0      	b.n	80030cc <_dtoa_r+0x26c>
 800316a:	2301      	movs	r3, #1
 800316c:	9308      	str	r3, [sp, #32]
 800316e:	e7f5      	b.n	800315c <_dtoa_r+0x2fc>
 8003170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003172:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003176:	e7b8      	b.n	80030ea <_dtoa_r+0x28a>
 8003178:	3101      	adds	r1, #1
 800317a:	6041      	str	r1, [r0, #4]
 800317c:	0052      	lsls	r2, r2, #1
 800317e:	e7b8      	b.n	80030f2 <_dtoa_r+0x292>
 8003180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003182:	9a01      	ldr	r2, [sp, #4]
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	2b0e      	cmp	r3, #14
 800318a:	f200 809d 	bhi.w	80032c8 <_dtoa_r+0x468>
 800318e:	2d00      	cmp	r5, #0
 8003190:	f000 809a 	beq.w	80032c8 <_dtoa_r+0x468>
 8003194:	9b00      	ldr	r3, [sp, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	dd32      	ble.n	8003200 <_dtoa_r+0x3a0>
 800319a:	4ab7      	ldr	r2, [pc, #732]	; (8003478 <_dtoa_r+0x618>)
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80031a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80031a8:	9b00      	ldr	r3, [sp, #0]
 80031aa:	05d8      	lsls	r0, r3, #23
 80031ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80031b0:	d516      	bpl.n	80031e0 <_dtoa_r+0x380>
 80031b2:	4bb2      	ldr	r3, [pc, #712]	; (800347c <_dtoa_r+0x61c>)
 80031b4:	ec51 0b19 	vmov	r0, r1, d9
 80031b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80031bc:	f7fd fb5e 	bl	800087c <__aeabi_ddiv>
 80031c0:	f007 070f 	and.w	r7, r7, #15
 80031c4:	4682      	mov	sl, r0
 80031c6:	468b      	mov	fp, r1
 80031c8:	2503      	movs	r5, #3
 80031ca:	4eac      	ldr	r6, [pc, #688]	; (800347c <_dtoa_r+0x61c>)
 80031cc:	b957      	cbnz	r7, 80031e4 <_dtoa_r+0x384>
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	4650      	mov	r0, sl
 80031d4:	4659      	mov	r1, fp
 80031d6:	f7fd fb51 	bl	800087c <__aeabi_ddiv>
 80031da:	4682      	mov	sl, r0
 80031dc:	468b      	mov	fp, r1
 80031de:	e028      	b.n	8003232 <_dtoa_r+0x3d2>
 80031e0:	2502      	movs	r5, #2
 80031e2:	e7f2      	b.n	80031ca <_dtoa_r+0x36a>
 80031e4:	07f9      	lsls	r1, r7, #31
 80031e6:	d508      	bpl.n	80031fa <_dtoa_r+0x39a>
 80031e8:	4640      	mov	r0, r8
 80031ea:	4649      	mov	r1, r9
 80031ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80031f0:	f7fd fa1a 	bl	8000628 <__aeabi_dmul>
 80031f4:	3501      	adds	r5, #1
 80031f6:	4680      	mov	r8, r0
 80031f8:	4689      	mov	r9, r1
 80031fa:	107f      	asrs	r7, r7, #1
 80031fc:	3608      	adds	r6, #8
 80031fe:	e7e5      	b.n	80031cc <_dtoa_r+0x36c>
 8003200:	f000 809b 	beq.w	800333a <_dtoa_r+0x4da>
 8003204:	9b00      	ldr	r3, [sp, #0]
 8003206:	4f9d      	ldr	r7, [pc, #628]	; (800347c <_dtoa_r+0x61c>)
 8003208:	425e      	negs	r6, r3
 800320a:	4b9b      	ldr	r3, [pc, #620]	; (8003478 <_dtoa_r+0x618>)
 800320c:	f006 020f 	and.w	r2, r6, #15
 8003210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	ec51 0b19 	vmov	r0, r1, d9
 800321c:	f7fd fa04 	bl	8000628 <__aeabi_dmul>
 8003220:	1136      	asrs	r6, r6, #4
 8003222:	4682      	mov	sl, r0
 8003224:	468b      	mov	fp, r1
 8003226:	2300      	movs	r3, #0
 8003228:	2502      	movs	r5, #2
 800322a:	2e00      	cmp	r6, #0
 800322c:	d17a      	bne.n	8003324 <_dtoa_r+0x4c4>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1d3      	bne.n	80031da <_dtoa_r+0x37a>
 8003232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8082 	beq.w	800333e <_dtoa_r+0x4de>
 800323a:	4b91      	ldr	r3, [pc, #580]	; (8003480 <_dtoa_r+0x620>)
 800323c:	2200      	movs	r2, #0
 800323e:	4650      	mov	r0, sl
 8003240:	4659      	mov	r1, fp
 8003242:	f7fd fc63 	bl	8000b0c <__aeabi_dcmplt>
 8003246:	2800      	cmp	r0, #0
 8003248:	d079      	beq.n	800333e <_dtoa_r+0x4de>
 800324a:	9b03      	ldr	r3, [sp, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d076      	beq.n	800333e <_dtoa_r+0x4de>
 8003250:	9b02      	ldr	r3, [sp, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	dd36      	ble.n	80032c4 <_dtoa_r+0x464>
 8003256:	9b00      	ldr	r3, [sp, #0]
 8003258:	4650      	mov	r0, sl
 800325a:	4659      	mov	r1, fp
 800325c:	1e5f      	subs	r7, r3, #1
 800325e:	2200      	movs	r2, #0
 8003260:	4b88      	ldr	r3, [pc, #544]	; (8003484 <_dtoa_r+0x624>)
 8003262:	f7fd f9e1 	bl	8000628 <__aeabi_dmul>
 8003266:	9e02      	ldr	r6, [sp, #8]
 8003268:	4682      	mov	sl, r0
 800326a:	468b      	mov	fp, r1
 800326c:	3501      	adds	r5, #1
 800326e:	4628      	mov	r0, r5
 8003270:	f7fd f970 	bl	8000554 <__aeabi_i2d>
 8003274:	4652      	mov	r2, sl
 8003276:	465b      	mov	r3, fp
 8003278:	f7fd f9d6 	bl	8000628 <__aeabi_dmul>
 800327c:	4b82      	ldr	r3, [pc, #520]	; (8003488 <_dtoa_r+0x628>)
 800327e:	2200      	movs	r2, #0
 8003280:	f7fd f81c 	bl	80002bc <__adddf3>
 8003284:	46d0      	mov	r8, sl
 8003286:	46d9      	mov	r9, fp
 8003288:	4682      	mov	sl, r0
 800328a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800328e:	2e00      	cmp	r6, #0
 8003290:	d158      	bne.n	8003344 <_dtoa_r+0x4e4>
 8003292:	4b7e      	ldr	r3, [pc, #504]	; (800348c <_dtoa_r+0x62c>)
 8003294:	2200      	movs	r2, #0
 8003296:	4640      	mov	r0, r8
 8003298:	4649      	mov	r1, r9
 800329a:	f7fd f80d 	bl	80002b8 <__aeabi_dsub>
 800329e:	4652      	mov	r2, sl
 80032a0:	465b      	mov	r3, fp
 80032a2:	4680      	mov	r8, r0
 80032a4:	4689      	mov	r9, r1
 80032a6:	f7fd fc4f 	bl	8000b48 <__aeabi_dcmpgt>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	f040 8295 	bne.w	80037da <_dtoa_r+0x97a>
 80032b0:	4652      	mov	r2, sl
 80032b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80032b6:	4640      	mov	r0, r8
 80032b8:	4649      	mov	r1, r9
 80032ba:	f7fd fc27 	bl	8000b0c <__aeabi_dcmplt>
 80032be:	2800      	cmp	r0, #0
 80032c0:	f040 8289 	bne.w	80037d6 <_dtoa_r+0x976>
 80032c4:	ec5b ab19 	vmov	sl, fp, d9
 80032c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f2c0 8148 	blt.w	8003560 <_dtoa_r+0x700>
 80032d0:	9a00      	ldr	r2, [sp, #0]
 80032d2:	2a0e      	cmp	r2, #14
 80032d4:	f300 8144 	bgt.w	8003560 <_dtoa_r+0x700>
 80032d8:	4b67      	ldr	r3, [pc, #412]	; (8003478 <_dtoa_r+0x618>)
 80032da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f280 80d5 	bge.w	8003494 <_dtoa_r+0x634>
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f300 80d1 	bgt.w	8003494 <_dtoa_r+0x634>
 80032f2:	f040 826f 	bne.w	80037d4 <_dtoa_r+0x974>
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <_dtoa_r+0x62c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fd f993 	bl	8000628 <__aeabi_dmul>
 8003302:	4652      	mov	r2, sl
 8003304:	465b      	mov	r3, fp
 8003306:	f7fd fc15 	bl	8000b34 <__aeabi_dcmpge>
 800330a:	9e03      	ldr	r6, [sp, #12]
 800330c:	4637      	mov	r7, r6
 800330e:	2800      	cmp	r0, #0
 8003310:	f040 8245 	bne.w	800379e <_dtoa_r+0x93e>
 8003314:	9d01      	ldr	r5, [sp, #4]
 8003316:	2331      	movs	r3, #49	; 0x31
 8003318:	f805 3b01 	strb.w	r3, [r5], #1
 800331c:	9b00      	ldr	r3, [sp, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	e240      	b.n	80037a6 <_dtoa_r+0x946>
 8003324:	07f2      	lsls	r2, r6, #31
 8003326:	d505      	bpl.n	8003334 <_dtoa_r+0x4d4>
 8003328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332c:	f7fd f97c 	bl	8000628 <__aeabi_dmul>
 8003330:	3501      	adds	r5, #1
 8003332:	2301      	movs	r3, #1
 8003334:	1076      	asrs	r6, r6, #1
 8003336:	3708      	adds	r7, #8
 8003338:	e777      	b.n	800322a <_dtoa_r+0x3ca>
 800333a:	2502      	movs	r5, #2
 800333c:	e779      	b.n	8003232 <_dtoa_r+0x3d2>
 800333e:	9f00      	ldr	r7, [sp, #0]
 8003340:	9e03      	ldr	r6, [sp, #12]
 8003342:	e794      	b.n	800326e <_dtoa_r+0x40e>
 8003344:	9901      	ldr	r1, [sp, #4]
 8003346:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <_dtoa_r+0x618>)
 8003348:	4431      	add	r1, r6
 800334a:	910d      	str	r1, [sp, #52]	; 0x34
 800334c:	9908      	ldr	r1, [sp, #32]
 800334e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003352:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003356:	2900      	cmp	r1, #0
 8003358:	d043      	beq.n	80033e2 <_dtoa_r+0x582>
 800335a:	494d      	ldr	r1, [pc, #308]	; (8003490 <_dtoa_r+0x630>)
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd fa8d 	bl	800087c <__aeabi_ddiv>
 8003362:	4652      	mov	r2, sl
 8003364:	465b      	mov	r3, fp
 8003366:	f7fc ffa7 	bl	80002b8 <__aeabi_dsub>
 800336a:	9d01      	ldr	r5, [sp, #4]
 800336c:	4682      	mov	sl, r0
 800336e:	468b      	mov	fp, r1
 8003370:	4649      	mov	r1, r9
 8003372:	4640      	mov	r0, r8
 8003374:	f7fd fc08 	bl	8000b88 <__aeabi_d2iz>
 8003378:	4606      	mov	r6, r0
 800337a:	f7fd f8eb 	bl	8000554 <__aeabi_i2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4640      	mov	r0, r8
 8003384:	4649      	mov	r1, r9
 8003386:	f7fc ff97 	bl	80002b8 <__aeabi_dsub>
 800338a:	3630      	adds	r6, #48	; 0x30
 800338c:	f805 6b01 	strb.w	r6, [r5], #1
 8003390:	4652      	mov	r2, sl
 8003392:	465b      	mov	r3, fp
 8003394:	4680      	mov	r8, r0
 8003396:	4689      	mov	r9, r1
 8003398:	f7fd fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800339c:	2800      	cmp	r0, #0
 800339e:	d163      	bne.n	8003468 <_dtoa_r+0x608>
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	4936      	ldr	r1, [pc, #216]	; (8003480 <_dtoa_r+0x620>)
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fc ff86 	bl	80002b8 <__aeabi_dsub>
 80033ac:	4652      	mov	r2, sl
 80033ae:	465b      	mov	r3, fp
 80033b0:	f7fd fbac 	bl	8000b0c <__aeabi_dcmplt>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	f040 80b5 	bne.w	8003524 <_dtoa_r+0x6c4>
 80033ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033bc:	429d      	cmp	r5, r3
 80033be:	d081      	beq.n	80032c4 <_dtoa_r+0x464>
 80033c0:	4b30      	ldr	r3, [pc, #192]	; (8003484 <_dtoa_r+0x624>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	4650      	mov	r0, sl
 80033c6:	4659      	mov	r1, fp
 80033c8:	f7fd f92e 	bl	8000628 <__aeabi_dmul>
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <_dtoa_r+0x624>)
 80033ce:	4682      	mov	sl, r0
 80033d0:	468b      	mov	fp, r1
 80033d2:	4640      	mov	r0, r8
 80033d4:	4649      	mov	r1, r9
 80033d6:	2200      	movs	r2, #0
 80033d8:	f7fd f926 	bl	8000628 <__aeabi_dmul>
 80033dc:	4680      	mov	r8, r0
 80033de:	4689      	mov	r9, r1
 80033e0:	e7c6      	b.n	8003370 <_dtoa_r+0x510>
 80033e2:	4650      	mov	r0, sl
 80033e4:	4659      	mov	r1, fp
 80033e6:	f7fd f91f 	bl	8000628 <__aeabi_dmul>
 80033ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ec:	9d01      	ldr	r5, [sp, #4]
 80033ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80033f0:	4682      	mov	sl, r0
 80033f2:	468b      	mov	fp, r1
 80033f4:	4649      	mov	r1, r9
 80033f6:	4640      	mov	r0, r8
 80033f8:	f7fd fbc6 	bl	8000b88 <__aeabi_d2iz>
 80033fc:	4606      	mov	r6, r0
 80033fe:	f7fd f8a9 	bl	8000554 <__aeabi_i2d>
 8003402:	3630      	adds	r6, #48	; 0x30
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4640      	mov	r0, r8
 800340a:	4649      	mov	r1, r9
 800340c:	f7fc ff54 	bl	80002b8 <__aeabi_dsub>
 8003410:	f805 6b01 	strb.w	r6, [r5], #1
 8003414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003416:	429d      	cmp	r5, r3
 8003418:	4680      	mov	r8, r0
 800341a:	4689      	mov	r9, r1
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	d124      	bne.n	800346c <_dtoa_r+0x60c>
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <_dtoa_r+0x630>)
 8003424:	4650      	mov	r0, sl
 8003426:	4659      	mov	r1, fp
 8003428:	f7fc ff48 	bl	80002bc <__adddf3>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4640      	mov	r0, r8
 8003432:	4649      	mov	r1, r9
 8003434:	f7fd fb88 	bl	8000b48 <__aeabi_dcmpgt>
 8003438:	2800      	cmp	r0, #0
 800343a:	d173      	bne.n	8003524 <_dtoa_r+0x6c4>
 800343c:	4652      	mov	r2, sl
 800343e:	465b      	mov	r3, fp
 8003440:	4913      	ldr	r1, [pc, #76]	; (8003490 <_dtoa_r+0x630>)
 8003442:	2000      	movs	r0, #0
 8003444:	f7fc ff38 	bl	80002b8 <__aeabi_dsub>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4640      	mov	r0, r8
 800344e:	4649      	mov	r1, r9
 8003450:	f7fd fb5c 	bl	8000b0c <__aeabi_dcmplt>
 8003454:	2800      	cmp	r0, #0
 8003456:	f43f af35 	beq.w	80032c4 <_dtoa_r+0x464>
 800345a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800345c:	1e6b      	subs	r3, r5, #1
 800345e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003460:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003464:	2b30      	cmp	r3, #48	; 0x30
 8003466:	d0f8      	beq.n	800345a <_dtoa_r+0x5fa>
 8003468:	9700      	str	r7, [sp, #0]
 800346a:	e049      	b.n	8003500 <_dtoa_r+0x6a0>
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <_dtoa_r+0x624>)
 800346e:	f7fd f8db 	bl	8000628 <__aeabi_dmul>
 8003472:	4680      	mov	r8, r0
 8003474:	4689      	mov	r9, r1
 8003476:	e7bd      	b.n	80033f4 <_dtoa_r+0x594>
 8003478:	08005058 	.word	0x08005058
 800347c:	08005030 	.word	0x08005030
 8003480:	3ff00000 	.word	0x3ff00000
 8003484:	40240000 	.word	0x40240000
 8003488:	401c0000 	.word	0x401c0000
 800348c:	40140000 	.word	0x40140000
 8003490:	3fe00000 	.word	0x3fe00000
 8003494:	9d01      	ldr	r5, [sp, #4]
 8003496:	4656      	mov	r6, sl
 8003498:	465f      	mov	r7, fp
 800349a:	4642      	mov	r2, r8
 800349c:	464b      	mov	r3, r9
 800349e:	4630      	mov	r0, r6
 80034a0:	4639      	mov	r1, r7
 80034a2:	f7fd f9eb 	bl	800087c <__aeabi_ddiv>
 80034a6:	f7fd fb6f 	bl	8000b88 <__aeabi_d2iz>
 80034aa:	4682      	mov	sl, r0
 80034ac:	f7fd f852 	bl	8000554 <__aeabi_i2d>
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	f7fd f8b8 	bl	8000628 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4630      	mov	r0, r6
 80034be:	4639      	mov	r1, r7
 80034c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80034c4:	f7fc fef8 	bl	80002b8 <__aeabi_dsub>
 80034c8:	f805 6b01 	strb.w	r6, [r5], #1
 80034cc:	9e01      	ldr	r6, [sp, #4]
 80034ce:	9f03      	ldr	r7, [sp, #12]
 80034d0:	1bae      	subs	r6, r5, r6
 80034d2:	42b7      	cmp	r7, r6
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	d135      	bne.n	8003546 <_dtoa_r+0x6e6>
 80034da:	f7fc feef 	bl	80002bc <__adddf3>
 80034de:	4642      	mov	r2, r8
 80034e0:	464b      	mov	r3, r9
 80034e2:	4606      	mov	r6, r0
 80034e4:	460f      	mov	r7, r1
 80034e6:	f7fd fb2f 	bl	8000b48 <__aeabi_dcmpgt>
 80034ea:	b9d0      	cbnz	r0, 8003522 <_dtoa_r+0x6c2>
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	4630      	mov	r0, r6
 80034f2:	4639      	mov	r1, r7
 80034f4:	f7fd fb00 	bl	8000af8 <__aeabi_dcmpeq>
 80034f8:	b110      	cbz	r0, 8003500 <_dtoa_r+0x6a0>
 80034fa:	f01a 0f01 	tst.w	sl, #1
 80034fe:	d110      	bne.n	8003522 <_dtoa_r+0x6c2>
 8003500:	4620      	mov	r0, r4
 8003502:	ee18 1a10 	vmov	r1, s16
 8003506:	f000 faf3 	bl	8003af0 <_Bfree>
 800350a:	2300      	movs	r3, #0
 800350c:	9800      	ldr	r0, [sp, #0]
 800350e:	702b      	strb	r3, [r5, #0]
 8003510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003512:	3001      	adds	r0, #1
 8003514:	6018      	str	r0, [r3, #0]
 8003516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003518:	2b00      	cmp	r3, #0
 800351a:	f43f acf1 	beq.w	8002f00 <_dtoa_r+0xa0>
 800351e:	601d      	str	r5, [r3, #0]
 8003520:	e4ee      	b.n	8002f00 <_dtoa_r+0xa0>
 8003522:	9f00      	ldr	r7, [sp, #0]
 8003524:	462b      	mov	r3, r5
 8003526:	461d      	mov	r5, r3
 8003528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800352c:	2a39      	cmp	r2, #57	; 0x39
 800352e:	d106      	bne.n	800353e <_dtoa_r+0x6de>
 8003530:	9a01      	ldr	r2, [sp, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d1f7      	bne.n	8003526 <_dtoa_r+0x6c6>
 8003536:	9901      	ldr	r1, [sp, #4]
 8003538:	2230      	movs	r2, #48	; 0x30
 800353a:	3701      	adds	r7, #1
 800353c:	700a      	strb	r2, [r1, #0]
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	3201      	adds	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e790      	b.n	8003468 <_dtoa_r+0x608>
 8003546:	4ba6      	ldr	r3, [pc, #664]	; (80037e0 <_dtoa_r+0x980>)
 8003548:	2200      	movs	r2, #0
 800354a:	f7fd f86d 	bl	8000628 <__aeabi_dmul>
 800354e:	2200      	movs	r2, #0
 8003550:	2300      	movs	r3, #0
 8003552:	4606      	mov	r6, r0
 8003554:	460f      	mov	r7, r1
 8003556:	f7fd facf 	bl	8000af8 <__aeabi_dcmpeq>
 800355a:	2800      	cmp	r0, #0
 800355c:	d09d      	beq.n	800349a <_dtoa_r+0x63a>
 800355e:	e7cf      	b.n	8003500 <_dtoa_r+0x6a0>
 8003560:	9a08      	ldr	r2, [sp, #32]
 8003562:	2a00      	cmp	r2, #0
 8003564:	f000 80d7 	beq.w	8003716 <_dtoa_r+0x8b6>
 8003568:	9a06      	ldr	r2, [sp, #24]
 800356a:	2a01      	cmp	r2, #1
 800356c:	f300 80ba 	bgt.w	80036e4 <_dtoa_r+0x884>
 8003570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003572:	2a00      	cmp	r2, #0
 8003574:	f000 80b2 	beq.w	80036dc <_dtoa_r+0x87c>
 8003578:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800357c:	9e07      	ldr	r6, [sp, #28]
 800357e:	9d04      	ldr	r5, [sp, #16]
 8003580:	9a04      	ldr	r2, [sp, #16]
 8003582:	441a      	add	r2, r3
 8003584:	9204      	str	r2, [sp, #16]
 8003586:	9a05      	ldr	r2, [sp, #20]
 8003588:	2101      	movs	r1, #1
 800358a:	441a      	add	r2, r3
 800358c:	4620      	mov	r0, r4
 800358e:	9205      	str	r2, [sp, #20]
 8003590:	f000 fb66 	bl	8003c60 <__i2b>
 8003594:	4607      	mov	r7, r0
 8003596:	2d00      	cmp	r5, #0
 8003598:	dd0c      	ble.n	80035b4 <_dtoa_r+0x754>
 800359a:	9b05      	ldr	r3, [sp, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	dd09      	ble.n	80035b4 <_dtoa_r+0x754>
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	9a04      	ldr	r2, [sp, #16]
 80035a4:	bfa8      	it	ge
 80035a6:	462b      	movge	r3, r5
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	9204      	str	r2, [sp, #16]
 80035ac:	9a05      	ldr	r2, [sp, #20]
 80035ae:	1aed      	subs	r5, r5, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	9b07      	ldr	r3, [sp, #28]
 80035b6:	b31b      	cbz	r3, 8003600 <_dtoa_r+0x7a0>
 80035b8:	9b08      	ldr	r3, [sp, #32]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80af 	beq.w	800371e <_dtoa_r+0x8be>
 80035c0:	2e00      	cmp	r6, #0
 80035c2:	dd13      	ble.n	80035ec <_dtoa_r+0x78c>
 80035c4:	4639      	mov	r1, r7
 80035c6:	4632      	mov	r2, r6
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 fc09 	bl	8003de0 <__pow5mult>
 80035ce:	ee18 2a10 	vmov	r2, s16
 80035d2:	4601      	mov	r1, r0
 80035d4:	4607      	mov	r7, r0
 80035d6:	4620      	mov	r0, r4
 80035d8:	f000 fb58 	bl	8003c8c <__multiply>
 80035dc:	ee18 1a10 	vmov	r1, s16
 80035e0:	4680      	mov	r8, r0
 80035e2:	4620      	mov	r0, r4
 80035e4:	f000 fa84 	bl	8003af0 <_Bfree>
 80035e8:	ee08 8a10 	vmov	s16, r8
 80035ec:	9b07      	ldr	r3, [sp, #28]
 80035ee:	1b9a      	subs	r2, r3, r6
 80035f0:	d006      	beq.n	8003600 <_dtoa_r+0x7a0>
 80035f2:	ee18 1a10 	vmov	r1, s16
 80035f6:	4620      	mov	r0, r4
 80035f8:	f000 fbf2 	bl	8003de0 <__pow5mult>
 80035fc:	ee08 0a10 	vmov	s16, r0
 8003600:	2101      	movs	r1, #1
 8003602:	4620      	mov	r0, r4
 8003604:	f000 fb2c 	bl	8003c60 <__i2b>
 8003608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	4606      	mov	r6, r0
 800360e:	f340 8088 	ble.w	8003722 <_dtoa_r+0x8c2>
 8003612:	461a      	mov	r2, r3
 8003614:	4601      	mov	r1, r0
 8003616:	4620      	mov	r0, r4
 8003618:	f000 fbe2 	bl	8003de0 <__pow5mult>
 800361c:	9b06      	ldr	r3, [sp, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	4606      	mov	r6, r0
 8003622:	f340 8081 	ble.w	8003728 <_dtoa_r+0x8c8>
 8003626:	f04f 0800 	mov.w	r8, #0
 800362a:	6933      	ldr	r3, [r6, #16]
 800362c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003630:	6918      	ldr	r0, [r3, #16]
 8003632:	f000 fac5 	bl	8003bc0 <__hi0bits>
 8003636:	f1c0 0020 	rsb	r0, r0, #32
 800363a:	9b05      	ldr	r3, [sp, #20]
 800363c:	4418      	add	r0, r3
 800363e:	f010 001f 	ands.w	r0, r0, #31
 8003642:	f000 8092 	beq.w	800376a <_dtoa_r+0x90a>
 8003646:	f1c0 0320 	rsb	r3, r0, #32
 800364a:	2b04      	cmp	r3, #4
 800364c:	f340 808a 	ble.w	8003764 <_dtoa_r+0x904>
 8003650:	f1c0 001c 	rsb	r0, r0, #28
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	4403      	add	r3, r0
 8003658:	9304      	str	r3, [sp, #16]
 800365a:	9b05      	ldr	r3, [sp, #20]
 800365c:	4403      	add	r3, r0
 800365e:	4405      	add	r5, r0
 8003660:	9305      	str	r3, [sp, #20]
 8003662:	9b04      	ldr	r3, [sp, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	dd07      	ble.n	8003678 <_dtoa_r+0x818>
 8003668:	ee18 1a10 	vmov	r1, s16
 800366c:	461a      	mov	r2, r3
 800366e:	4620      	mov	r0, r4
 8003670:	f000 fc10 	bl	8003e94 <__lshift>
 8003674:	ee08 0a10 	vmov	s16, r0
 8003678:	9b05      	ldr	r3, [sp, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	dd05      	ble.n	800368a <_dtoa_r+0x82a>
 800367e:	4631      	mov	r1, r6
 8003680:	461a      	mov	r2, r3
 8003682:	4620      	mov	r0, r4
 8003684:	f000 fc06 	bl	8003e94 <__lshift>
 8003688:	4606      	mov	r6, r0
 800368a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d06e      	beq.n	800376e <_dtoa_r+0x90e>
 8003690:	ee18 0a10 	vmov	r0, s16
 8003694:	4631      	mov	r1, r6
 8003696:	f000 fc6d 	bl	8003f74 <__mcmp>
 800369a:	2800      	cmp	r0, #0
 800369c:	da67      	bge.n	800376e <_dtoa_r+0x90e>
 800369e:	9b00      	ldr	r3, [sp, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	ee18 1a10 	vmov	r1, s16
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	220a      	movs	r2, #10
 80036aa:	2300      	movs	r3, #0
 80036ac:	4620      	mov	r0, r4
 80036ae:	f000 fa41 	bl	8003b34 <__multadd>
 80036b2:	9b08      	ldr	r3, [sp, #32]
 80036b4:	ee08 0a10 	vmov	s16, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 81b1 	beq.w	8003a20 <_dtoa_r+0xbc0>
 80036be:	2300      	movs	r3, #0
 80036c0:	4639      	mov	r1, r7
 80036c2:	220a      	movs	r2, #10
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fa35 	bl	8003b34 <__multadd>
 80036ca:	9b02      	ldr	r3, [sp, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	4607      	mov	r7, r0
 80036d0:	f300 808e 	bgt.w	80037f0 <_dtoa_r+0x990>
 80036d4:	9b06      	ldr	r3, [sp, #24]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	dc51      	bgt.n	800377e <_dtoa_r+0x91e>
 80036da:	e089      	b.n	80037f0 <_dtoa_r+0x990>
 80036dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80036e2:	e74b      	b.n	800357c <_dtoa_r+0x71c>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	1e5e      	subs	r6, r3, #1
 80036e8:	9b07      	ldr	r3, [sp, #28]
 80036ea:	42b3      	cmp	r3, r6
 80036ec:	bfbf      	itttt	lt
 80036ee:	9b07      	ldrlt	r3, [sp, #28]
 80036f0:	9607      	strlt	r6, [sp, #28]
 80036f2:	1af2      	sublt	r2, r6, r3
 80036f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80036f6:	bfb6      	itet	lt
 80036f8:	189b      	addlt	r3, r3, r2
 80036fa:	1b9e      	subge	r6, r3, r6
 80036fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	bfb8      	it	lt
 8003702:	2600      	movlt	r6, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	bfb7      	itett	lt
 8003708:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800370c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003710:	1a9d      	sublt	r5, r3, r2
 8003712:	2300      	movlt	r3, #0
 8003714:	e734      	b.n	8003580 <_dtoa_r+0x720>
 8003716:	9e07      	ldr	r6, [sp, #28]
 8003718:	9d04      	ldr	r5, [sp, #16]
 800371a:	9f08      	ldr	r7, [sp, #32]
 800371c:	e73b      	b.n	8003596 <_dtoa_r+0x736>
 800371e:	9a07      	ldr	r2, [sp, #28]
 8003720:	e767      	b.n	80035f2 <_dtoa_r+0x792>
 8003722:	9b06      	ldr	r3, [sp, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	dc18      	bgt.n	800375a <_dtoa_r+0x8fa>
 8003728:	f1ba 0f00 	cmp.w	sl, #0
 800372c:	d115      	bne.n	800375a <_dtoa_r+0x8fa>
 800372e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003732:	b993      	cbnz	r3, 800375a <_dtoa_r+0x8fa>
 8003734:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003738:	0d1b      	lsrs	r3, r3, #20
 800373a:	051b      	lsls	r3, r3, #20
 800373c:	b183      	cbz	r3, 8003760 <_dtoa_r+0x900>
 800373e:	9b04      	ldr	r3, [sp, #16]
 8003740:	3301      	adds	r3, #1
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	9b05      	ldr	r3, [sp, #20]
 8003746:	3301      	adds	r3, #1
 8003748:	9305      	str	r3, [sp, #20]
 800374a:	f04f 0801 	mov.w	r8, #1
 800374e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af6a 	bne.w	800362a <_dtoa_r+0x7ca>
 8003756:	2001      	movs	r0, #1
 8003758:	e76f      	b.n	800363a <_dtoa_r+0x7da>
 800375a:	f04f 0800 	mov.w	r8, #0
 800375e:	e7f6      	b.n	800374e <_dtoa_r+0x8ee>
 8003760:	4698      	mov	r8, r3
 8003762:	e7f4      	b.n	800374e <_dtoa_r+0x8ee>
 8003764:	f43f af7d 	beq.w	8003662 <_dtoa_r+0x802>
 8003768:	4618      	mov	r0, r3
 800376a:	301c      	adds	r0, #28
 800376c:	e772      	b.n	8003654 <_dtoa_r+0x7f4>
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	dc37      	bgt.n	80037e4 <_dtoa_r+0x984>
 8003774:	9b06      	ldr	r3, [sp, #24]
 8003776:	2b02      	cmp	r3, #2
 8003778:	dd34      	ble.n	80037e4 <_dtoa_r+0x984>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	9b02      	ldr	r3, [sp, #8]
 8003780:	b96b      	cbnz	r3, 800379e <_dtoa_r+0x93e>
 8003782:	4631      	mov	r1, r6
 8003784:	2205      	movs	r2, #5
 8003786:	4620      	mov	r0, r4
 8003788:	f000 f9d4 	bl	8003b34 <__multadd>
 800378c:	4601      	mov	r1, r0
 800378e:	4606      	mov	r6, r0
 8003790:	ee18 0a10 	vmov	r0, s16
 8003794:	f000 fbee 	bl	8003f74 <__mcmp>
 8003798:	2800      	cmp	r0, #0
 800379a:	f73f adbb 	bgt.w	8003314 <_dtoa_r+0x4b4>
 800379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a0:	9d01      	ldr	r5, [sp, #4]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f04f 0800 	mov.w	r8, #0
 80037aa:	4631      	mov	r1, r6
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 f99f 	bl	8003af0 <_Bfree>
 80037b2:	2f00      	cmp	r7, #0
 80037b4:	f43f aea4 	beq.w	8003500 <_dtoa_r+0x6a0>
 80037b8:	f1b8 0f00 	cmp.w	r8, #0
 80037bc:	d005      	beq.n	80037ca <_dtoa_r+0x96a>
 80037be:	45b8      	cmp	r8, r7
 80037c0:	d003      	beq.n	80037ca <_dtoa_r+0x96a>
 80037c2:	4641      	mov	r1, r8
 80037c4:	4620      	mov	r0, r4
 80037c6:	f000 f993 	bl	8003af0 <_Bfree>
 80037ca:	4639      	mov	r1, r7
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 f98f 	bl	8003af0 <_Bfree>
 80037d2:	e695      	b.n	8003500 <_dtoa_r+0x6a0>
 80037d4:	2600      	movs	r6, #0
 80037d6:	4637      	mov	r7, r6
 80037d8:	e7e1      	b.n	800379e <_dtoa_r+0x93e>
 80037da:	9700      	str	r7, [sp, #0]
 80037dc:	4637      	mov	r7, r6
 80037de:	e599      	b.n	8003314 <_dtoa_r+0x4b4>
 80037e0:	40240000 	.word	0x40240000
 80037e4:	9b08      	ldr	r3, [sp, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80ca 	beq.w	8003980 <_dtoa_r+0xb20>
 80037ec:	9b03      	ldr	r3, [sp, #12]
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	dd05      	ble.n	8003800 <_dtoa_r+0x9a0>
 80037f4:	4639      	mov	r1, r7
 80037f6:	462a      	mov	r2, r5
 80037f8:	4620      	mov	r0, r4
 80037fa:	f000 fb4b 	bl	8003e94 <__lshift>
 80037fe:	4607      	mov	r7, r0
 8003800:	f1b8 0f00 	cmp.w	r8, #0
 8003804:	d05b      	beq.n	80038be <_dtoa_r+0xa5e>
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4620      	mov	r0, r4
 800380a:	f000 f931 	bl	8003a70 <_Balloc>
 800380e:	4605      	mov	r5, r0
 8003810:	b928      	cbnz	r0, 800381e <_dtoa_r+0x9be>
 8003812:	4b87      	ldr	r3, [pc, #540]	; (8003a30 <_dtoa_r+0xbd0>)
 8003814:	4602      	mov	r2, r0
 8003816:	f240 21ea 	movw	r1, #746	; 0x2ea
 800381a:	f7ff bb3b 	b.w	8002e94 <_dtoa_r+0x34>
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	3202      	adds	r2, #2
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	f107 010c 	add.w	r1, r7, #12
 8003828:	300c      	adds	r0, #12
 800382a:	f000 f913 	bl	8003a54 <memcpy>
 800382e:	2201      	movs	r2, #1
 8003830:	4629      	mov	r1, r5
 8003832:	4620      	mov	r0, r4
 8003834:	f000 fb2e 	bl	8003e94 <__lshift>
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	f103 0901 	add.w	r9, r3, #1
 800383e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003842:	4413      	add	r3, r2
 8003844:	9305      	str	r3, [sp, #20]
 8003846:	f00a 0301 	and.w	r3, sl, #1
 800384a:	46b8      	mov	r8, r7
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	4607      	mov	r7, r0
 8003850:	4631      	mov	r1, r6
 8003852:	ee18 0a10 	vmov	r0, s16
 8003856:	f7ff fa77 	bl	8002d48 <quorem>
 800385a:	4641      	mov	r1, r8
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003862:	ee18 0a10 	vmov	r0, s16
 8003866:	f000 fb85 	bl	8003f74 <__mcmp>
 800386a:	463a      	mov	r2, r7
 800386c:	9003      	str	r0, [sp, #12]
 800386e:	4631      	mov	r1, r6
 8003870:	4620      	mov	r0, r4
 8003872:	f000 fb9b 	bl	8003fac <__mdiff>
 8003876:	68c2      	ldr	r2, [r0, #12]
 8003878:	f109 3bff 	add.w	fp, r9, #4294967295
 800387c:	4605      	mov	r5, r0
 800387e:	bb02      	cbnz	r2, 80038c2 <_dtoa_r+0xa62>
 8003880:	4601      	mov	r1, r0
 8003882:	ee18 0a10 	vmov	r0, s16
 8003886:	f000 fb75 	bl	8003f74 <__mcmp>
 800388a:	4602      	mov	r2, r0
 800388c:	4629      	mov	r1, r5
 800388e:	4620      	mov	r0, r4
 8003890:	9207      	str	r2, [sp, #28]
 8003892:	f000 f92d 	bl	8003af0 <_Bfree>
 8003896:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800389a:	ea43 0102 	orr.w	r1, r3, r2
 800389e:	9b04      	ldr	r3, [sp, #16]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	464d      	mov	r5, r9
 80038a4:	d10f      	bne.n	80038c6 <_dtoa_r+0xa66>
 80038a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80038aa:	d02a      	beq.n	8003902 <_dtoa_r+0xaa2>
 80038ac:	9b03      	ldr	r3, [sp, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	dd02      	ble.n	80038b8 <_dtoa_r+0xa58>
 80038b2:	9b02      	ldr	r3, [sp, #8]
 80038b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80038b8:	f88b a000 	strb.w	sl, [fp]
 80038bc:	e775      	b.n	80037aa <_dtoa_r+0x94a>
 80038be:	4638      	mov	r0, r7
 80038c0:	e7ba      	b.n	8003838 <_dtoa_r+0x9d8>
 80038c2:	2201      	movs	r2, #1
 80038c4:	e7e2      	b.n	800388c <_dtoa_r+0xa2c>
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db04      	blt.n	80038d6 <_dtoa_r+0xa76>
 80038cc:	9906      	ldr	r1, [sp, #24]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	9904      	ldr	r1, [sp, #16]
 80038d2:	430b      	orrs	r3, r1
 80038d4:	d122      	bne.n	800391c <_dtoa_r+0xabc>
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	ddee      	ble.n	80038b8 <_dtoa_r+0xa58>
 80038da:	ee18 1a10 	vmov	r1, s16
 80038de:	2201      	movs	r2, #1
 80038e0:	4620      	mov	r0, r4
 80038e2:	f000 fad7 	bl	8003e94 <__lshift>
 80038e6:	4631      	mov	r1, r6
 80038e8:	ee08 0a10 	vmov	s16, r0
 80038ec:	f000 fb42 	bl	8003f74 <__mcmp>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	dc03      	bgt.n	80038fc <_dtoa_r+0xa9c>
 80038f4:	d1e0      	bne.n	80038b8 <_dtoa_r+0xa58>
 80038f6:	f01a 0f01 	tst.w	sl, #1
 80038fa:	d0dd      	beq.n	80038b8 <_dtoa_r+0xa58>
 80038fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003900:	d1d7      	bne.n	80038b2 <_dtoa_r+0xa52>
 8003902:	2339      	movs	r3, #57	; 0x39
 8003904:	f88b 3000 	strb.w	r3, [fp]
 8003908:	462b      	mov	r3, r5
 800390a:	461d      	mov	r5, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003912:	2a39      	cmp	r2, #57	; 0x39
 8003914:	d071      	beq.n	80039fa <_dtoa_r+0xb9a>
 8003916:	3201      	adds	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e746      	b.n	80037aa <_dtoa_r+0x94a>
 800391c:	2a00      	cmp	r2, #0
 800391e:	dd07      	ble.n	8003930 <_dtoa_r+0xad0>
 8003920:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003924:	d0ed      	beq.n	8003902 <_dtoa_r+0xaa2>
 8003926:	f10a 0301 	add.w	r3, sl, #1
 800392a:	f88b 3000 	strb.w	r3, [fp]
 800392e:	e73c      	b.n	80037aa <_dtoa_r+0x94a>
 8003930:	9b05      	ldr	r3, [sp, #20]
 8003932:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003936:	4599      	cmp	r9, r3
 8003938:	d047      	beq.n	80039ca <_dtoa_r+0xb6a>
 800393a:	ee18 1a10 	vmov	r1, s16
 800393e:	2300      	movs	r3, #0
 8003940:	220a      	movs	r2, #10
 8003942:	4620      	mov	r0, r4
 8003944:	f000 f8f6 	bl	8003b34 <__multadd>
 8003948:	45b8      	cmp	r8, r7
 800394a:	ee08 0a10 	vmov	s16, r0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f04f 020a 	mov.w	r2, #10
 8003956:	4641      	mov	r1, r8
 8003958:	4620      	mov	r0, r4
 800395a:	d106      	bne.n	800396a <_dtoa_r+0xb0a>
 800395c:	f000 f8ea 	bl	8003b34 <__multadd>
 8003960:	4680      	mov	r8, r0
 8003962:	4607      	mov	r7, r0
 8003964:	f109 0901 	add.w	r9, r9, #1
 8003968:	e772      	b.n	8003850 <_dtoa_r+0x9f0>
 800396a:	f000 f8e3 	bl	8003b34 <__multadd>
 800396e:	4639      	mov	r1, r7
 8003970:	4680      	mov	r8, r0
 8003972:	2300      	movs	r3, #0
 8003974:	220a      	movs	r2, #10
 8003976:	4620      	mov	r0, r4
 8003978:	f000 f8dc 	bl	8003b34 <__multadd>
 800397c:	4607      	mov	r7, r0
 800397e:	e7f1      	b.n	8003964 <_dtoa_r+0xb04>
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	9d01      	ldr	r5, [sp, #4]
 8003986:	ee18 0a10 	vmov	r0, s16
 800398a:	4631      	mov	r1, r6
 800398c:	f7ff f9dc 	bl	8002d48 <quorem>
 8003990:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	f805 ab01 	strb.w	sl, [r5], #1
 800399a:	1aea      	subs	r2, r5, r3
 800399c:	9b02      	ldr	r3, [sp, #8]
 800399e:	4293      	cmp	r3, r2
 80039a0:	dd09      	ble.n	80039b6 <_dtoa_r+0xb56>
 80039a2:	ee18 1a10 	vmov	r1, s16
 80039a6:	2300      	movs	r3, #0
 80039a8:	220a      	movs	r2, #10
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 f8c2 	bl	8003b34 <__multadd>
 80039b0:	ee08 0a10 	vmov	s16, r0
 80039b4:	e7e7      	b.n	8003986 <_dtoa_r+0xb26>
 80039b6:	9b02      	ldr	r3, [sp, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfc8      	it	gt
 80039bc:	461d      	movgt	r5, r3
 80039be:	9b01      	ldr	r3, [sp, #4]
 80039c0:	bfd8      	it	le
 80039c2:	2501      	movle	r5, #1
 80039c4:	441d      	add	r5, r3
 80039c6:	f04f 0800 	mov.w	r8, #0
 80039ca:	ee18 1a10 	vmov	r1, s16
 80039ce:	2201      	movs	r2, #1
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 fa5f 	bl	8003e94 <__lshift>
 80039d6:	4631      	mov	r1, r6
 80039d8:	ee08 0a10 	vmov	s16, r0
 80039dc:	f000 faca 	bl	8003f74 <__mcmp>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	dc91      	bgt.n	8003908 <_dtoa_r+0xaa8>
 80039e4:	d102      	bne.n	80039ec <_dtoa_r+0xb8c>
 80039e6:	f01a 0f01 	tst.w	sl, #1
 80039ea:	d18d      	bne.n	8003908 <_dtoa_r+0xaa8>
 80039ec:	462b      	mov	r3, r5
 80039ee:	461d      	mov	r5, r3
 80039f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80039f4:	2a30      	cmp	r2, #48	; 0x30
 80039f6:	d0fa      	beq.n	80039ee <_dtoa_r+0xb8e>
 80039f8:	e6d7      	b.n	80037aa <_dtoa_r+0x94a>
 80039fa:	9a01      	ldr	r2, [sp, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d184      	bne.n	800390a <_dtoa_r+0xaaa>
 8003a00:	9b00      	ldr	r3, [sp, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2331      	movs	r3, #49	; 0x31
 8003a08:	7013      	strb	r3, [r2, #0]
 8003a0a:	e6ce      	b.n	80037aa <_dtoa_r+0x94a>
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <_dtoa_r+0xbd4>)
 8003a0e:	f7ff ba95 	b.w	8002f3c <_dtoa_r+0xdc>
 8003a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f47f aa6e 	bne.w	8002ef6 <_dtoa_r+0x96>
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <_dtoa_r+0xbd8>)
 8003a1c:	f7ff ba8e 	b.w	8002f3c <_dtoa_r+0xdc>
 8003a20:	9b02      	ldr	r3, [sp, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dcae      	bgt.n	8003984 <_dtoa_r+0xb24>
 8003a26:	9b06      	ldr	r3, [sp, #24]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	f73f aea8 	bgt.w	800377e <_dtoa_r+0x91e>
 8003a2e:	e7a9      	b.n	8003984 <_dtoa_r+0xb24>
 8003a30:	08004fc3 	.word	0x08004fc3
 8003a34:	08004f20 	.word	0x08004f20
 8003a38:	08004f44 	.word	0x08004f44

08003a3c <_localeconv_r>:
 8003a3c:	4800      	ldr	r0, [pc, #0]	; (8003a40 <_localeconv_r+0x4>)
 8003a3e:	4770      	bx	lr
 8003a40:	20000160 	.word	0x20000160

08003a44 <malloc>:
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <malloc+0xc>)
 8003a46:	4601      	mov	r1, r0
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f000 bc17 	b.w	800427c <_malloc_r>
 8003a4e:	bf00      	nop
 8003a50:	2000000c 	.word	0x2000000c

08003a54 <memcpy>:
 8003a54:	440a      	add	r2, r1
 8003a56:	4291      	cmp	r1, r2
 8003a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a5c:	d100      	bne.n	8003a60 <memcpy+0xc>
 8003a5e:	4770      	bx	lr
 8003a60:	b510      	push	{r4, lr}
 8003a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a6a:	4291      	cmp	r1, r2
 8003a6c:	d1f9      	bne.n	8003a62 <memcpy+0xe>
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <_Balloc>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a74:	4604      	mov	r4, r0
 8003a76:	460d      	mov	r5, r1
 8003a78:	b976      	cbnz	r6, 8003a98 <_Balloc+0x28>
 8003a7a:	2010      	movs	r0, #16
 8003a7c:	f7ff ffe2 	bl	8003a44 <malloc>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6260      	str	r0, [r4, #36]	; 0x24
 8003a84:	b920      	cbnz	r0, 8003a90 <_Balloc+0x20>
 8003a86:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <_Balloc+0x78>)
 8003a88:	4818      	ldr	r0, [pc, #96]	; (8003aec <_Balloc+0x7c>)
 8003a8a:	2166      	movs	r1, #102	; 0x66
 8003a8c:	f000 fc7a 	bl	8004384 <__assert_func>
 8003a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a94:	6006      	str	r6, [r0, #0]
 8003a96:	60c6      	str	r6, [r0, #12]
 8003a98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a9a:	68f3      	ldr	r3, [r6, #12]
 8003a9c:	b183      	cbz	r3, 8003ac0 <_Balloc+0x50>
 8003a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003aa6:	b9b8      	cbnz	r0, 8003ad8 <_Balloc+0x68>
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8003aae:	1d72      	adds	r2, r6, #5
 8003ab0:	0092      	lsls	r2, r2, #2
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 fb60 	bl	8004178 <_calloc_r>
 8003ab8:	b160      	cbz	r0, 8003ad4 <_Balloc+0x64>
 8003aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003abe:	e00e      	b.n	8003ade <_Balloc+0x6e>
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f000 fb57 	bl	8004178 <_calloc_r>
 8003aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003acc:	60f0      	str	r0, [r6, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e4      	bne.n	8003a9e <_Balloc+0x2e>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	6802      	ldr	r2, [r0, #0]
 8003ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ae4:	e7f7      	b.n	8003ad6 <_Balloc+0x66>
 8003ae6:	bf00      	nop
 8003ae8:	08004f51 	.word	0x08004f51
 8003aec:	08004fd4 	.word	0x08004fd4

08003af0 <_Bfree>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003af4:	4605      	mov	r5, r0
 8003af6:	460c      	mov	r4, r1
 8003af8:	b976      	cbnz	r6, 8003b18 <_Bfree+0x28>
 8003afa:	2010      	movs	r0, #16
 8003afc:	f7ff ffa2 	bl	8003a44 <malloc>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6268      	str	r0, [r5, #36]	; 0x24
 8003b04:	b920      	cbnz	r0, 8003b10 <_Bfree+0x20>
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <_Bfree+0x3c>)
 8003b08:	4809      	ldr	r0, [pc, #36]	; (8003b30 <_Bfree+0x40>)
 8003b0a:	218a      	movs	r1, #138	; 0x8a
 8003b0c:	f000 fc3a 	bl	8004384 <__assert_func>
 8003b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b14:	6006      	str	r6, [r0, #0]
 8003b16:	60c6      	str	r6, [r0, #12]
 8003b18:	b13c      	cbz	r4, 8003b2a <_Bfree+0x3a>
 8003b1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b1c:	6862      	ldr	r2, [r4, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b24:	6021      	str	r1, [r4, #0]
 8003b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	08004f51 	.word	0x08004f51
 8003b30:	08004fd4 	.word	0x08004fd4

08003b34 <__multadd>:
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	690d      	ldr	r5, [r1, #16]
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	461e      	mov	r6, r3
 8003b40:	f101 0c14 	add.w	ip, r1, #20
 8003b44:	2000      	movs	r0, #0
 8003b46:	f8dc 3000 	ldr.w	r3, [ip]
 8003b4a:	b299      	uxth	r1, r3
 8003b4c:	fb02 6101 	mla	r1, r2, r1, r6
 8003b50:	0c1e      	lsrs	r6, r3, #16
 8003b52:	0c0b      	lsrs	r3, r1, #16
 8003b54:	fb02 3306 	mla	r3, r2, r6, r3
 8003b58:	b289      	uxth	r1, r1
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003b60:	4285      	cmp	r5, r0
 8003b62:	f84c 1b04 	str.w	r1, [ip], #4
 8003b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003b6a:	dcec      	bgt.n	8003b46 <__multadd+0x12>
 8003b6c:	b30e      	cbz	r6, 8003bb2 <__multadd+0x7e>
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc19      	bgt.n	8003ba8 <__multadd+0x74>
 8003b74:	6861      	ldr	r1, [r4, #4]
 8003b76:	4638      	mov	r0, r7
 8003b78:	3101      	adds	r1, #1
 8003b7a:	f7ff ff79 	bl	8003a70 <_Balloc>
 8003b7e:	4680      	mov	r8, r0
 8003b80:	b928      	cbnz	r0, 8003b8e <__multadd+0x5a>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <__multadd+0x84>)
 8003b86:	480d      	ldr	r0, [pc, #52]	; (8003bbc <__multadd+0x88>)
 8003b88:	21b5      	movs	r1, #181	; 0xb5
 8003b8a:	f000 fbfb 	bl	8004384 <__assert_func>
 8003b8e:	6922      	ldr	r2, [r4, #16]
 8003b90:	3202      	adds	r2, #2
 8003b92:	f104 010c 	add.w	r1, r4, #12
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	300c      	adds	r0, #12
 8003b9a:	f7ff ff5b 	bl	8003a54 <memcpy>
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f7ff ffa5 	bl	8003af0 <_Bfree>
 8003ba6:	4644      	mov	r4, r8
 8003ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003bac:	3501      	adds	r5, #1
 8003bae:	615e      	str	r6, [r3, #20]
 8003bb0:	6125      	str	r5, [r4, #16]
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb8:	08004fc3 	.word	0x08004fc3
 8003bbc:	08004fd4 	.word	0x08004fd4

08003bc0 <__hi0bits>:
 8003bc0:	0c03      	lsrs	r3, r0, #16
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	b9d3      	cbnz	r3, 8003bfc <__hi0bits+0x3c>
 8003bc6:	0400      	lsls	r0, r0, #16
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003bce:	bf04      	itt	eq
 8003bd0:	0200      	lsleq	r0, r0, #8
 8003bd2:	3308      	addeq	r3, #8
 8003bd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003bd8:	bf04      	itt	eq
 8003bda:	0100      	lsleq	r0, r0, #4
 8003bdc:	3304      	addeq	r3, #4
 8003bde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003be2:	bf04      	itt	eq
 8003be4:	0080      	lsleq	r0, r0, #2
 8003be6:	3302      	addeq	r3, #2
 8003be8:	2800      	cmp	r0, #0
 8003bea:	db05      	blt.n	8003bf8 <__hi0bits+0x38>
 8003bec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003bf0:	f103 0301 	add.w	r3, r3, #1
 8003bf4:	bf08      	it	eq
 8003bf6:	2320      	moveq	r3, #32
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	4770      	bx	lr
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e7e4      	b.n	8003bca <__hi0bits+0xa>

08003c00 <__lo0bits>:
 8003c00:	6803      	ldr	r3, [r0, #0]
 8003c02:	f013 0207 	ands.w	r2, r3, #7
 8003c06:	4601      	mov	r1, r0
 8003c08:	d00b      	beq.n	8003c22 <__lo0bits+0x22>
 8003c0a:	07da      	lsls	r2, r3, #31
 8003c0c:	d423      	bmi.n	8003c56 <__lo0bits+0x56>
 8003c0e:	0798      	lsls	r0, r3, #30
 8003c10:	bf49      	itett	mi
 8003c12:	085b      	lsrmi	r3, r3, #1
 8003c14:	089b      	lsrpl	r3, r3, #2
 8003c16:	2001      	movmi	r0, #1
 8003c18:	600b      	strmi	r3, [r1, #0]
 8003c1a:	bf5c      	itt	pl
 8003c1c:	600b      	strpl	r3, [r1, #0]
 8003c1e:	2002      	movpl	r0, #2
 8003c20:	4770      	bx	lr
 8003c22:	b298      	uxth	r0, r3
 8003c24:	b9a8      	cbnz	r0, 8003c52 <__lo0bits+0x52>
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	2010      	movs	r0, #16
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	b90a      	cbnz	r2, 8003c32 <__lo0bits+0x32>
 8003c2e:	3008      	adds	r0, #8
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	071a      	lsls	r2, r3, #28
 8003c34:	bf04      	itt	eq
 8003c36:	091b      	lsreq	r3, r3, #4
 8003c38:	3004      	addeq	r0, #4
 8003c3a:	079a      	lsls	r2, r3, #30
 8003c3c:	bf04      	itt	eq
 8003c3e:	089b      	lsreq	r3, r3, #2
 8003c40:	3002      	addeq	r0, #2
 8003c42:	07da      	lsls	r2, r3, #31
 8003c44:	d403      	bmi.n	8003c4e <__lo0bits+0x4e>
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	f100 0001 	add.w	r0, r0, #1
 8003c4c:	d005      	beq.n	8003c5a <__lo0bits+0x5a>
 8003c4e:	600b      	str	r3, [r1, #0]
 8003c50:	4770      	bx	lr
 8003c52:	4610      	mov	r0, r2
 8003c54:	e7e9      	b.n	8003c2a <__lo0bits+0x2a>
 8003c56:	2000      	movs	r0, #0
 8003c58:	4770      	bx	lr
 8003c5a:	2020      	movs	r0, #32
 8003c5c:	4770      	bx	lr
	...

08003c60 <__i2b>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	460c      	mov	r4, r1
 8003c64:	2101      	movs	r1, #1
 8003c66:	f7ff ff03 	bl	8003a70 <_Balloc>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	b928      	cbnz	r0, 8003c7a <__i2b+0x1a>
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <__i2b+0x24>)
 8003c70:	4805      	ldr	r0, [pc, #20]	; (8003c88 <__i2b+0x28>)
 8003c72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c76:	f000 fb85 	bl	8004384 <__assert_func>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6144      	str	r4, [r0, #20]
 8003c7e:	6103      	str	r3, [r0, #16]
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	bf00      	nop
 8003c84:	08004fc3 	.word	0x08004fc3
 8003c88:	08004fd4 	.word	0x08004fd4

08003c8c <__multiply>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	4691      	mov	r9, r2
 8003c92:	690a      	ldr	r2, [r1, #16]
 8003c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bfb8      	it	lt
 8003c9c:	460b      	movlt	r3, r1
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	bfbc      	itt	lt
 8003ca2:	464c      	movlt	r4, r9
 8003ca4:	4699      	movlt	r9, r3
 8003ca6:	6927      	ldr	r7, [r4, #16]
 8003ca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003cac:	68a3      	ldr	r3, [r4, #8]
 8003cae:	6861      	ldr	r1, [r4, #4]
 8003cb0:	eb07 060a 	add.w	r6, r7, sl
 8003cb4:	42b3      	cmp	r3, r6
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	bfb8      	it	lt
 8003cba:	3101      	addlt	r1, #1
 8003cbc:	f7ff fed8 	bl	8003a70 <_Balloc>
 8003cc0:	b930      	cbnz	r0, 8003cd0 <__multiply+0x44>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <__multiply+0x14c>)
 8003cc6:	4845      	ldr	r0, [pc, #276]	; (8003ddc <__multiply+0x150>)
 8003cc8:	f240 115d 	movw	r1, #349	; 0x15d
 8003ccc:	f000 fb5a 	bl	8004384 <__assert_func>
 8003cd0:	f100 0514 	add.w	r5, r0, #20
 8003cd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003cd8:	462b      	mov	r3, r5
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4543      	cmp	r3, r8
 8003cde:	d321      	bcc.n	8003d24 <__multiply+0x98>
 8003ce0:	f104 0314 	add.w	r3, r4, #20
 8003ce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003ce8:	f109 0314 	add.w	r3, r9, #20
 8003cec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	1b3a      	subs	r2, r7, r4
 8003cf4:	3a15      	subs	r2, #21
 8003cf6:	f022 0203 	bic.w	r2, r2, #3
 8003cfa:	3204      	adds	r2, #4
 8003cfc:	f104 0115 	add.w	r1, r4, #21
 8003d00:	428f      	cmp	r7, r1
 8003d02:	bf38      	it	cc
 8003d04:	2204      	movcc	r2, #4
 8003d06:	9201      	str	r2, [sp, #4]
 8003d08:	9a02      	ldr	r2, [sp, #8]
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d80c      	bhi.n	8003d2a <__multiply+0x9e>
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	dd03      	ble.n	8003d1c <__multiply+0x90>
 8003d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d05a      	beq.n	8003dd2 <__multiply+0x146>
 8003d1c:	6106      	str	r6, [r0, #16]
 8003d1e:	b005      	add	sp, #20
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	f843 2b04 	str.w	r2, [r3], #4
 8003d28:	e7d8      	b.n	8003cdc <__multiply+0x50>
 8003d2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d2e:	f1ba 0f00 	cmp.w	sl, #0
 8003d32:	d024      	beq.n	8003d7e <__multiply+0xf2>
 8003d34:	f104 0e14 	add.w	lr, r4, #20
 8003d38:	46a9      	mov	r9, r5
 8003d3a:	f04f 0c00 	mov.w	ip, #0
 8003d3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003d42:	f8d9 1000 	ldr.w	r1, [r9]
 8003d46:	fa1f fb82 	uxth.w	fp, r2
 8003d4a:	b289      	uxth	r1, r1
 8003d4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8003d50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003d54:	f8d9 2000 	ldr.w	r2, [r9]
 8003d58:	4461      	add	r1, ip
 8003d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003d5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8003d62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003d66:	b289      	uxth	r1, r1
 8003d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003d6c:	4577      	cmp	r7, lr
 8003d6e:	f849 1b04 	str.w	r1, [r9], #4
 8003d72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003d76:	d8e2      	bhi.n	8003d3e <__multiply+0xb2>
 8003d78:	9a01      	ldr	r2, [sp, #4]
 8003d7a:	f845 c002 	str.w	ip, [r5, r2]
 8003d7e:	9a03      	ldr	r2, [sp, #12]
 8003d80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003d84:	3304      	adds	r3, #4
 8003d86:	f1b9 0f00 	cmp.w	r9, #0
 8003d8a:	d020      	beq.n	8003dce <__multiply+0x142>
 8003d8c:	6829      	ldr	r1, [r5, #0]
 8003d8e:	f104 0c14 	add.w	ip, r4, #20
 8003d92:	46ae      	mov	lr, r5
 8003d94:	f04f 0a00 	mov.w	sl, #0
 8003d98:	f8bc b000 	ldrh.w	fp, [ip]
 8003d9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003da0:	fb09 220b 	mla	r2, r9, fp, r2
 8003da4:	4492      	add	sl, r2
 8003da6:	b289      	uxth	r1, r1
 8003da8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003dac:	f84e 1b04 	str.w	r1, [lr], #4
 8003db0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003db4:	f8be 1000 	ldrh.w	r1, [lr]
 8003db8:	0c12      	lsrs	r2, r2, #16
 8003dba:	fb09 1102 	mla	r1, r9, r2, r1
 8003dbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003dc2:	4567      	cmp	r7, ip
 8003dc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003dc8:	d8e6      	bhi.n	8003d98 <__multiply+0x10c>
 8003dca:	9a01      	ldr	r2, [sp, #4]
 8003dcc:	50a9      	str	r1, [r5, r2]
 8003dce:	3504      	adds	r5, #4
 8003dd0:	e79a      	b.n	8003d08 <__multiply+0x7c>
 8003dd2:	3e01      	subs	r6, #1
 8003dd4:	e79c      	b.n	8003d10 <__multiply+0x84>
 8003dd6:	bf00      	nop
 8003dd8:	08004fc3 	.word	0x08004fc3
 8003ddc:	08004fd4 	.word	0x08004fd4

08003de0 <__pow5mult>:
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de4:	4615      	mov	r5, r2
 8003de6:	f012 0203 	ands.w	r2, r2, #3
 8003dea:	4606      	mov	r6, r0
 8003dec:	460f      	mov	r7, r1
 8003dee:	d007      	beq.n	8003e00 <__pow5mult+0x20>
 8003df0:	4c25      	ldr	r4, [pc, #148]	; (8003e88 <__pow5mult+0xa8>)
 8003df2:	3a01      	subs	r2, #1
 8003df4:	2300      	movs	r3, #0
 8003df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003dfa:	f7ff fe9b 	bl	8003b34 <__multadd>
 8003dfe:	4607      	mov	r7, r0
 8003e00:	10ad      	asrs	r5, r5, #2
 8003e02:	d03d      	beq.n	8003e80 <__pow5mult+0xa0>
 8003e04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e06:	b97c      	cbnz	r4, 8003e28 <__pow5mult+0x48>
 8003e08:	2010      	movs	r0, #16
 8003e0a:	f7ff fe1b 	bl	8003a44 <malloc>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6270      	str	r0, [r6, #36]	; 0x24
 8003e12:	b928      	cbnz	r0, 8003e20 <__pow5mult+0x40>
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <__pow5mult+0xac>)
 8003e16:	481e      	ldr	r0, [pc, #120]	; (8003e90 <__pow5mult+0xb0>)
 8003e18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e1c:	f000 fab2 	bl	8004384 <__assert_func>
 8003e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e24:	6004      	str	r4, [r0, #0]
 8003e26:	60c4      	str	r4, [r0, #12]
 8003e28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e30:	b94c      	cbnz	r4, 8003e46 <__pow5mult+0x66>
 8003e32:	f240 2171 	movw	r1, #625	; 0x271
 8003e36:	4630      	mov	r0, r6
 8003e38:	f7ff ff12 	bl	8003c60 <__i2b>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e42:	4604      	mov	r4, r0
 8003e44:	6003      	str	r3, [r0, #0]
 8003e46:	f04f 0900 	mov.w	r9, #0
 8003e4a:	07eb      	lsls	r3, r5, #31
 8003e4c:	d50a      	bpl.n	8003e64 <__pow5mult+0x84>
 8003e4e:	4639      	mov	r1, r7
 8003e50:	4622      	mov	r2, r4
 8003e52:	4630      	mov	r0, r6
 8003e54:	f7ff ff1a 	bl	8003c8c <__multiply>
 8003e58:	4639      	mov	r1, r7
 8003e5a:	4680      	mov	r8, r0
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7ff fe47 	bl	8003af0 <_Bfree>
 8003e62:	4647      	mov	r7, r8
 8003e64:	106d      	asrs	r5, r5, #1
 8003e66:	d00b      	beq.n	8003e80 <__pow5mult+0xa0>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	b938      	cbnz	r0, 8003e7c <__pow5mult+0x9c>
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4630      	mov	r0, r6
 8003e72:	f7ff ff0b 	bl	8003c8c <__multiply>
 8003e76:	6020      	str	r0, [r4, #0]
 8003e78:	f8c0 9000 	str.w	r9, [r0]
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	e7e4      	b.n	8003e4a <__pow5mult+0x6a>
 8003e80:	4638      	mov	r0, r7
 8003e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e86:	bf00      	nop
 8003e88:	08005120 	.word	0x08005120
 8003e8c:	08004f51 	.word	0x08004f51
 8003e90:	08004fd4 	.word	0x08004fd4

08003e94 <__lshift>:
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	6849      	ldr	r1, [r1, #4]
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003ea2:	68a3      	ldr	r3, [r4, #8]
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	4691      	mov	r9, r2
 8003ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003eac:	f108 0601 	add.w	r6, r8, #1
 8003eb0:	42b3      	cmp	r3, r6
 8003eb2:	db0b      	blt.n	8003ecc <__lshift+0x38>
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff fddb 	bl	8003a70 <_Balloc>
 8003eba:	4605      	mov	r5, r0
 8003ebc:	b948      	cbnz	r0, 8003ed2 <__lshift+0x3e>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <__lshift+0xd8>)
 8003ec2:	482b      	ldr	r0, [pc, #172]	; (8003f70 <__lshift+0xdc>)
 8003ec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ec8:	f000 fa5c 	bl	8004384 <__assert_func>
 8003ecc:	3101      	adds	r1, #1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__lshift+0x1c>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f100 0114 	add.w	r1, r0, #20
 8003ed8:	f100 0210 	add.w	r2, r0, #16
 8003edc:	4618      	mov	r0, r3
 8003ede:	4553      	cmp	r3, sl
 8003ee0:	db37      	blt.n	8003f52 <__lshift+0xbe>
 8003ee2:	6920      	ldr	r0, [r4, #16]
 8003ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ee8:	f104 0314 	add.w	r3, r4, #20
 8003eec:	f019 091f 	ands.w	r9, r9, #31
 8003ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003ef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003ef8:	d02f      	beq.n	8003f5a <__lshift+0xc6>
 8003efa:	f1c9 0e20 	rsb	lr, r9, #32
 8003efe:	468a      	mov	sl, r1
 8003f00:	f04f 0c00 	mov.w	ip, #0
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	fa02 f209 	lsl.w	r2, r2, r9
 8003f0a:	ea42 020c 	orr.w	r2, r2, ip
 8003f0e:	f84a 2b04 	str.w	r2, [sl], #4
 8003f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f16:	4298      	cmp	r0, r3
 8003f18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003f1c:	d8f2      	bhi.n	8003f04 <__lshift+0x70>
 8003f1e:	1b03      	subs	r3, r0, r4
 8003f20:	3b15      	subs	r3, #21
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	3304      	adds	r3, #4
 8003f28:	f104 0215 	add.w	r2, r4, #21
 8003f2c:	4290      	cmp	r0, r2
 8003f2e:	bf38      	it	cc
 8003f30:	2304      	movcc	r3, #4
 8003f32:	f841 c003 	str.w	ip, [r1, r3]
 8003f36:	f1bc 0f00 	cmp.w	ip, #0
 8003f3a:	d001      	beq.n	8003f40 <__lshift+0xac>
 8003f3c:	f108 0602 	add.w	r6, r8, #2
 8003f40:	3e01      	subs	r6, #1
 8003f42:	4638      	mov	r0, r7
 8003f44:	612e      	str	r6, [r5, #16]
 8003f46:	4621      	mov	r1, r4
 8003f48:	f7ff fdd2 	bl	8003af0 <_Bfree>
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f52:	f842 0f04 	str.w	r0, [r2, #4]!
 8003f56:	3301      	adds	r3, #1
 8003f58:	e7c1      	b.n	8003ede <__lshift+0x4a>
 8003f5a:	3904      	subs	r1, #4
 8003f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f64:	4298      	cmp	r0, r3
 8003f66:	d8f9      	bhi.n	8003f5c <__lshift+0xc8>
 8003f68:	e7ea      	b.n	8003f40 <__lshift+0xac>
 8003f6a:	bf00      	nop
 8003f6c:	08004fc3 	.word	0x08004fc3
 8003f70:	08004fd4 	.word	0x08004fd4

08003f74 <__mcmp>:
 8003f74:	b530      	push	{r4, r5, lr}
 8003f76:	6902      	ldr	r2, [r0, #16]
 8003f78:	690c      	ldr	r4, [r1, #16]
 8003f7a:	1b12      	subs	r2, r2, r4
 8003f7c:	d10e      	bne.n	8003f9c <__mcmp+0x28>
 8003f7e:	f100 0314 	add.w	r3, r0, #20
 8003f82:	3114      	adds	r1, #20
 8003f84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003f8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003f90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003f94:	42a5      	cmp	r5, r4
 8003f96:	d003      	beq.n	8003fa0 <__mcmp+0x2c>
 8003f98:	d305      	bcc.n	8003fa6 <__mcmp+0x32>
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	bd30      	pop	{r4, r5, pc}
 8003fa0:	4283      	cmp	r3, r0
 8003fa2:	d3f3      	bcc.n	8003f8c <__mcmp+0x18>
 8003fa4:	e7fa      	b.n	8003f9c <__mcmp+0x28>
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	e7f7      	b.n	8003f9c <__mcmp+0x28>

08003fac <__mdiff>:
 8003fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4690      	mov	r8, r2
 8003fba:	f7ff ffdb 	bl	8003f74 <__mcmp>
 8003fbe:	1e05      	subs	r5, r0, #0
 8003fc0:	d110      	bne.n	8003fe4 <__mdiff+0x38>
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff fd53 	bl	8003a70 <_Balloc>
 8003fca:	b930      	cbnz	r0, 8003fda <__mdiff+0x2e>
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <__mdiff+0x10c>)
 8003fce:	4602      	mov	r2, r0
 8003fd0:	f240 2132 	movw	r1, #562	; 0x232
 8003fd4:	4839      	ldr	r0, [pc, #228]	; (80040bc <__mdiff+0x110>)
 8003fd6:	f000 f9d5 	bl	8004384 <__assert_func>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	bfa4      	itt	ge
 8003fe6:	4643      	movge	r3, r8
 8003fe8:	46a0      	movge	r8, r4
 8003fea:	4630      	mov	r0, r6
 8003fec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ff0:	bfa6      	itte	ge
 8003ff2:	461c      	movge	r4, r3
 8003ff4:	2500      	movge	r5, #0
 8003ff6:	2501      	movlt	r5, #1
 8003ff8:	f7ff fd3a 	bl	8003a70 <_Balloc>
 8003ffc:	b920      	cbnz	r0, 8004008 <__mdiff+0x5c>
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <__mdiff+0x10c>)
 8004000:	4602      	mov	r2, r0
 8004002:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004006:	e7e5      	b.n	8003fd4 <__mdiff+0x28>
 8004008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800400c:	6926      	ldr	r6, [r4, #16]
 800400e:	60c5      	str	r5, [r0, #12]
 8004010:	f104 0914 	add.w	r9, r4, #20
 8004014:	f108 0514 	add.w	r5, r8, #20
 8004018:	f100 0e14 	add.w	lr, r0, #20
 800401c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004024:	f108 0210 	add.w	r2, r8, #16
 8004028:	46f2      	mov	sl, lr
 800402a:	2100      	movs	r1, #0
 800402c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004034:	fa1f f883 	uxth.w	r8, r3
 8004038:	fa11 f18b 	uxtah	r1, r1, fp
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	eba1 0808 	sub.w	r8, r1, r8
 8004042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800404a:	fa1f f888 	uxth.w	r8, r8
 800404e:	1419      	asrs	r1, r3, #16
 8004050:	454e      	cmp	r6, r9
 8004052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004056:	f84a 3b04 	str.w	r3, [sl], #4
 800405a:	d8e7      	bhi.n	800402c <__mdiff+0x80>
 800405c:	1b33      	subs	r3, r6, r4
 800405e:	3b15      	subs	r3, #21
 8004060:	f023 0303 	bic.w	r3, r3, #3
 8004064:	3304      	adds	r3, #4
 8004066:	3415      	adds	r4, #21
 8004068:	42a6      	cmp	r6, r4
 800406a:	bf38      	it	cc
 800406c:	2304      	movcc	r3, #4
 800406e:	441d      	add	r5, r3
 8004070:	4473      	add	r3, lr
 8004072:	469e      	mov	lr, r3
 8004074:	462e      	mov	r6, r5
 8004076:	4566      	cmp	r6, ip
 8004078:	d30e      	bcc.n	8004098 <__mdiff+0xec>
 800407a:	f10c 0203 	add.w	r2, ip, #3
 800407e:	1b52      	subs	r2, r2, r5
 8004080:	f022 0203 	bic.w	r2, r2, #3
 8004084:	3d03      	subs	r5, #3
 8004086:	45ac      	cmp	ip, r5
 8004088:	bf38      	it	cc
 800408a:	2200      	movcc	r2, #0
 800408c:	441a      	add	r2, r3
 800408e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004092:	b17b      	cbz	r3, 80040b4 <__mdiff+0x108>
 8004094:	6107      	str	r7, [r0, #16]
 8004096:	e7a3      	b.n	8003fe0 <__mdiff+0x34>
 8004098:	f856 8b04 	ldr.w	r8, [r6], #4
 800409c:	fa11 f288 	uxtah	r2, r1, r8
 80040a0:	1414      	asrs	r4, r2, #16
 80040a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80040a6:	b292      	uxth	r2, r2
 80040a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80040ac:	f84e 2b04 	str.w	r2, [lr], #4
 80040b0:	1421      	asrs	r1, r4, #16
 80040b2:	e7e0      	b.n	8004076 <__mdiff+0xca>
 80040b4:	3f01      	subs	r7, #1
 80040b6:	e7ea      	b.n	800408e <__mdiff+0xe2>
 80040b8:	08004fc3 	.word	0x08004fc3
 80040bc:	08004fd4 	.word	0x08004fd4

080040c0 <__d2b>:
 80040c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040c4:	4689      	mov	r9, r1
 80040c6:	2101      	movs	r1, #1
 80040c8:	ec57 6b10 	vmov	r6, r7, d0
 80040cc:	4690      	mov	r8, r2
 80040ce:	f7ff fccf 	bl	8003a70 <_Balloc>
 80040d2:	4604      	mov	r4, r0
 80040d4:	b930      	cbnz	r0, 80040e4 <__d2b+0x24>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <__d2b+0xb0>)
 80040da:	4826      	ldr	r0, [pc, #152]	; (8004174 <__d2b+0xb4>)
 80040dc:	f240 310a 	movw	r1, #778	; 0x30a
 80040e0:	f000 f950 	bl	8004384 <__assert_func>
 80040e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80040e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80040ec:	bb35      	cbnz	r5, 800413c <__d2b+0x7c>
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	d028      	beq.n	8004146 <__d2b+0x86>
 80040f4:	4668      	mov	r0, sp
 80040f6:	9600      	str	r6, [sp, #0]
 80040f8:	f7ff fd82 	bl	8003c00 <__lo0bits>
 80040fc:	9900      	ldr	r1, [sp, #0]
 80040fe:	b300      	cbz	r0, 8004142 <__d2b+0x82>
 8004100:	9a01      	ldr	r2, [sp, #4]
 8004102:	f1c0 0320 	rsb	r3, r0, #32
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	430b      	orrs	r3, r1
 800410c:	40c2      	lsrs	r2, r0
 800410e:	6163      	str	r3, [r4, #20]
 8004110:	9201      	str	r2, [sp, #4]
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	61a3      	str	r3, [r4, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2202      	movne	r2, #2
 800411c:	2201      	moveq	r2, #1
 800411e:	6122      	str	r2, [r4, #16]
 8004120:	b1d5      	cbz	r5, 8004158 <__d2b+0x98>
 8004122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004126:	4405      	add	r5, r0
 8004128:	f8c9 5000 	str.w	r5, [r9]
 800412c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004130:	f8c8 0000 	str.w	r0, [r8]
 8004134:	4620      	mov	r0, r4
 8004136:	b003      	add	sp, #12
 8004138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800413c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004140:	e7d5      	b.n	80040ee <__d2b+0x2e>
 8004142:	6161      	str	r1, [r4, #20]
 8004144:	e7e5      	b.n	8004112 <__d2b+0x52>
 8004146:	a801      	add	r0, sp, #4
 8004148:	f7ff fd5a 	bl	8003c00 <__lo0bits>
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	6163      	str	r3, [r4, #20]
 8004150:	2201      	movs	r2, #1
 8004152:	6122      	str	r2, [r4, #16]
 8004154:	3020      	adds	r0, #32
 8004156:	e7e3      	b.n	8004120 <__d2b+0x60>
 8004158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800415c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004160:	f8c9 0000 	str.w	r0, [r9]
 8004164:	6918      	ldr	r0, [r3, #16]
 8004166:	f7ff fd2b 	bl	8003bc0 <__hi0bits>
 800416a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800416e:	e7df      	b.n	8004130 <__d2b+0x70>
 8004170:	08004fc3 	.word	0x08004fc3
 8004174:	08004fd4 	.word	0x08004fd4

08004178 <_calloc_r>:
 8004178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800417a:	fba1 2402 	umull	r2, r4, r1, r2
 800417e:	b94c      	cbnz	r4, 8004194 <_calloc_r+0x1c>
 8004180:	4611      	mov	r1, r2
 8004182:	9201      	str	r2, [sp, #4]
 8004184:	f000 f87a 	bl	800427c <_malloc_r>
 8004188:	9a01      	ldr	r2, [sp, #4]
 800418a:	4605      	mov	r5, r0
 800418c:	b930      	cbnz	r0, 800419c <_calloc_r+0x24>
 800418e:	4628      	mov	r0, r5
 8004190:	b003      	add	sp, #12
 8004192:	bd30      	pop	{r4, r5, pc}
 8004194:	220c      	movs	r2, #12
 8004196:	6002      	str	r2, [r0, #0]
 8004198:	2500      	movs	r5, #0
 800419a:	e7f8      	b.n	800418e <_calloc_r+0x16>
 800419c:	4621      	mov	r1, r4
 800419e:	f7fe f961 	bl	8002464 <memset>
 80041a2:	e7f4      	b.n	800418e <_calloc_r+0x16>

080041a4 <_free_r>:
 80041a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041a6:	2900      	cmp	r1, #0
 80041a8:	d044      	beq.n	8004234 <_free_r+0x90>
 80041aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ae:	9001      	str	r0, [sp, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f1a1 0404 	sub.w	r4, r1, #4
 80041b6:	bfb8      	it	lt
 80041b8:	18e4      	addlt	r4, r4, r3
 80041ba:	f000 f925 	bl	8004408 <__malloc_lock>
 80041be:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <_free_r+0x94>)
 80041c0:	9801      	ldr	r0, [sp, #4]
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	b933      	cbnz	r3, 80041d4 <_free_r+0x30>
 80041c6:	6063      	str	r3, [r4, #4]
 80041c8:	6014      	str	r4, [r2, #0]
 80041ca:	b003      	add	sp, #12
 80041cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041d0:	f000 b920 	b.w	8004414 <__malloc_unlock>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d908      	bls.n	80041ea <_free_r+0x46>
 80041d8:	6825      	ldr	r5, [r4, #0]
 80041da:	1961      	adds	r1, r4, r5
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf01      	itttt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	1949      	addeq	r1, r1, r5
 80041e6:	6021      	streq	r1, [r4, #0]
 80041e8:	e7ed      	b.n	80041c6 <_free_r+0x22>
 80041ea:	461a      	mov	r2, r3
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b10b      	cbz	r3, 80041f4 <_free_r+0x50>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d9fa      	bls.n	80041ea <_free_r+0x46>
 80041f4:	6811      	ldr	r1, [r2, #0]
 80041f6:	1855      	adds	r5, r2, r1
 80041f8:	42a5      	cmp	r5, r4
 80041fa:	d10b      	bne.n	8004214 <_free_r+0x70>
 80041fc:	6824      	ldr	r4, [r4, #0]
 80041fe:	4421      	add	r1, r4
 8004200:	1854      	adds	r4, r2, r1
 8004202:	42a3      	cmp	r3, r4
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	d1e0      	bne.n	80041ca <_free_r+0x26>
 8004208:	681c      	ldr	r4, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	6053      	str	r3, [r2, #4]
 800420e:	4421      	add	r1, r4
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	e7da      	b.n	80041ca <_free_r+0x26>
 8004214:	d902      	bls.n	800421c <_free_r+0x78>
 8004216:	230c      	movs	r3, #12
 8004218:	6003      	str	r3, [r0, #0]
 800421a:	e7d6      	b.n	80041ca <_free_r+0x26>
 800421c:	6825      	ldr	r5, [r4, #0]
 800421e:	1961      	adds	r1, r4, r5
 8004220:	428b      	cmp	r3, r1
 8004222:	bf04      	itt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	6063      	str	r3, [r4, #4]
 800422a:	bf04      	itt	eq
 800422c:	1949      	addeq	r1, r1, r5
 800422e:	6021      	streq	r1, [r4, #0]
 8004230:	6054      	str	r4, [r2, #4]
 8004232:	e7ca      	b.n	80041ca <_free_r+0x26>
 8004234:	b003      	add	sp, #12
 8004236:	bd30      	pop	{r4, r5, pc}
 8004238:	20000200 	.word	0x20000200

0800423c <sbrk_aligned>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4e0e      	ldr	r6, [pc, #56]	; (8004278 <sbrk_aligned+0x3c>)
 8004240:	460c      	mov	r4, r1
 8004242:	6831      	ldr	r1, [r6, #0]
 8004244:	4605      	mov	r5, r0
 8004246:	b911      	cbnz	r1, 800424e <sbrk_aligned+0x12>
 8004248:	f000 f88c 	bl	8004364 <_sbrk_r>
 800424c:	6030      	str	r0, [r6, #0]
 800424e:	4621      	mov	r1, r4
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f887 	bl	8004364 <_sbrk_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d00a      	beq.n	8004270 <sbrk_aligned+0x34>
 800425a:	1cc4      	adds	r4, r0, #3
 800425c:	f024 0403 	bic.w	r4, r4, #3
 8004260:	42a0      	cmp	r0, r4
 8004262:	d007      	beq.n	8004274 <sbrk_aligned+0x38>
 8004264:	1a21      	subs	r1, r4, r0
 8004266:	4628      	mov	r0, r5
 8004268:	f000 f87c 	bl	8004364 <_sbrk_r>
 800426c:	3001      	adds	r0, #1
 800426e:	d101      	bne.n	8004274 <sbrk_aligned+0x38>
 8004270:	f04f 34ff 	mov.w	r4, #4294967295
 8004274:	4620      	mov	r0, r4
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	20000204 	.word	0x20000204

0800427c <_malloc_r>:
 800427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	f025 0503 	bic.w	r5, r5, #3
 8004286:	3508      	adds	r5, #8
 8004288:	2d0c      	cmp	r5, #12
 800428a:	bf38      	it	cc
 800428c:	250c      	movcc	r5, #12
 800428e:	2d00      	cmp	r5, #0
 8004290:	4607      	mov	r7, r0
 8004292:	db01      	blt.n	8004298 <_malloc_r+0x1c>
 8004294:	42a9      	cmp	r1, r5
 8004296:	d905      	bls.n	80042a4 <_malloc_r+0x28>
 8004298:	230c      	movs	r3, #12
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	2600      	movs	r6, #0
 800429e:	4630      	mov	r0, r6
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	4e2e      	ldr	r6, [pc, #184]	; (8004360 <_malloc_r+0xe4>)
 80042a6:	f000 f8af 	bl	8004408 <__malloc_lock>
 80042aa:	6833      	ldr	r3, [r6, #0]
 80042ac:	461c      	mov	r4, r3
 80042ae:	bb34      	cbnz	r4, 80042fe <_malloc_r+0x82>
 80042b0:	4629      	mov	r1, r5
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7ff ffc2 	bl	800423c <sbrk_aligned>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	4604      	mov	r4, r0
 80042bc:	d14d      	bne.n	800435a <_malloc_r+0xde>
 80042be:	6834      	ldr	r4, [r6, #0]
 80042c0:	4626      	mov	r6, r4
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	d140      	bne.n	8004348 <_malloc_r+0xcc>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	4631      	mov	r1, r6
 80042ca:	4638      	mov	r0, r7
 80042cc:	eb04 0803 	add.w	r8, r4, r3
 80042d0:	f000 f848 	bl	8004364 <_sbrk_r>
 80042d4:	4580      	cmp	r8, r0
 80042d6:	d13a      	bne.n	800434e <_malloc_r+0xd2>
 80042d8:	6821      	ldr	r1, [r4, #0]
 80042da:	3503      	adds	r5, #3
 80042dc:	1a6d      	subs	r5, r5, r1
 80042de:	f025 0503 	bic.w	r5, r5, #3
 80042e2:	3508      	adds	r5, #8
 80042e4:	2d0c      	cmp	r5, #12
 80042e6:	bf38      	it	cc
 80042e8:	250c      	movcc	r5, #12
 80042ea:	4629      	mov	r1, r5
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff ffa5 	bl	800423c <sbrk_aligned>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d02b      	beq.n	800434e <_malloc_r+0xd2>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	442b      	add	r3, r5
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	e00e      	b.n	800431c <_malloc_r+0xa0>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	1b52      	subs	r2, r2, r5
 8004302:	d41e      	bmi.n	8004342 <_malloc_r+0xc6>
 8004304:	2a0b      	cmp	r2, #11
 8004306:	d916      	bls.n	8004336 <_malloc_r+0xba>
 8004308:	1961      	adds	r1, r4, r5
 800430a:	42a3      	cmp	r3, r4
 800430c:	6025      	str	r5, [r4, #0]
 800430e:	bf18      	it	ne
 8004310:	6059      	strne	r1, [r3, #4]
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	bf08      	it	eq
 8004316:	6031      	streq	r1, [r6, #0]
 8004318:	5162      	str	r2, [r4, r5]
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	4638      	mov	r0, r7
 800431e:	f104 060b 	add.w	r6, r4, #11
 8004322:	f000 f877 	bl	8004414 <__malloc_unlock>
 8004326:	f026 0607 	bic.w	r6, r6, #7
 800432a:	1d23      	adds	r3, r4, #4
 800432c:	1af2      	subs	r2, r6, r3
 800432e:	d0b6      	beq.n	800429e <_malloc_r+0x22>
 8004330:	1b9b      	subs	r3, r3, r6
 8004332:	50a3      	str	r3, [r4, r2]
 8004334:	e7b3      	b.n	800429e <_malloc_r+0x22>
 8004336:	6862      	ldr	r2, [r4, #4]
 8004338:	42a3      	cmp	r3, r4
 800433a:	bf0c      	ite	eq
 800433c:	6032      	streq	r2, [r6, #0]
 800433e:	605a      	strne	r2, [r3, #4]
 8004340:	e7ec      	b.n	800431c <_malloc_r+0xa0>
 8004342:	4623      	mov	r3, r4
 8004344:	6864      	ldr	r4, [r4, #4]
 8004346:	e7b2      	b.n	80042ae <_malloc_r+0x32>
 8004348:	4634      	mov	r4, r6
 800434a:	6876      	ldr	r6, [r6, #4]
 800434c:	e7b9      	b.n	80042c2 <_malloc_r+0x46>
 800434e:	230c      	movs	r3, #12
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4638      	mov	r0, r7
 8004354:	f000 f85e 	bl	8004414 <__malloc_unlock>
 8004358:	e7a1      	b.n	800429e <_malloc_r+0x22>
 800435a:	6025      	str	r5, [r4, #0]
 800435c:	e7de      	b.n	800431c <_malloc_r+0xa0>
 800435e:	bf00      	nop
 8004360:	20000200 	.word	0x20000200

08004364 <_sbrk_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d06      	ldr	r5, [pc, #24]	; (8004380 <_sbrk_r+0x1c>)
 8004368:	2300      	movs	r3, #0
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	f7fc fe6a 	bl	8001048 <_sbrk>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_sbrk_r+0x1a>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_sbrk_r+0x1a>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	20000208 	.word	0x20000208

08004384 <__assert_func>:
 8004384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004386:	4614      	mov	r4, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <__assert_func+0x2c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4605      	mov	r5, r0
 8004390:	68d8      	ldr	r0, [r3, #12]
 8004392:	b14c      	cbz	r4, 80043a8 <__assert_func+0x24>
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <__assert_func+0x30>)
 8004396:	9100      	str	r1, [sp, #0]
 8004398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800439c:	4906      	ldr	r1, [pc, #24]	; (80043b8 <__assert_func+0x34>)
 800439e:	462b      	mov	r3, r5
 80043a0:	f000 f80e 	bl	80043c0 <fiprintf>
 80043a4:	f000 fa64 	bl	8004870 <abort>
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <__assert_func+0x38>)
 80043aa:	461c      	mov	r4, r3
 80043ac:	e7f3      	b.n	8004396 <__assert_func+0x12>
 80043ae:	bf00      	nop
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	0800512c 	.word	0x0800512c
 80043b8:	08005139 	.word	0x08005139
 80043bc:	08005167 	.word	0x08005167

080043c0 <fiprintf>:
 80043c0:	b40e      	push	{r1, r2, r3}
 80043c2:	b503      	push	{r0, r1, lr}
 80043c4:	4601      	mov	r1, r0
 80043c6:	ab03      	add	r3, sp, #12
 80043c8:	4805      	ldr	r0, [pc, #20]	; (80043e0 <fiprintf+0x20>)
 80043ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ce:	6800      	ldr	r0, [r0, #0]
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	f000 f84f 	bl	8004474 <_vfiprintf_r>
 80043d6:	b002      	add	sp, #8
 80043d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043dc:	b003      	add	sp, #12
 80043de:	4770      	bx	lr
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <__ascii_mbtowc>:
 80043e4:	b082      	sub	sp, #8
 80043e6:	b901      	cbnz	r1, 80043ea <__ascii_mbtowc+0x6>
 80043e8:	a901      	add	r1, sp, #4
 80043ea:	b142      	cbz	r2, 80043fe <__ascii_mbtowc+0x1a>
 80043ec:	b14b      	cbz	r3, 8004402 <__ascii_mbtowc+0x1e>
 80043ee:	7813      	ldrb	r3, [r2, #0]
 80043f0:	600b      	str	r3, [r1, #0]
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	1e10      	subs	r0, r2, #0
 80043f6:	bf18      	it	ne
 80043f8:	2001      	movne	r0, #1
 80043fa:	b002      	add	sp, #8
 80043fc:	4770      	bx	lr
 80043fe:	4610      	mov	r0, r2
 8004400:	e7fb      	b.n	80043fa <__ascii_mbtowc+0x16>
 8004402:	f06f 0001 	mvn.w	r0, #1
 8004406:	e7f8      	b.n	80043fa <__ascii_mbtowc+0x16>

08004408 <__malloc_lock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_lock+0x8>)
 800440a:	f000 bbf1 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	2000020c 	.word	0x2000020c

08004414 <__malloc_unlock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_unlock+0x8>)
 8004416:	f000 bbec 	b.w	8004bf2 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	2000020c 	.word	0x2000020c

08004420 <__sfputc_r>:
 8004420:	6893      	ldr	r3, [r2, #8]
 8004422:	3b01      	subs	r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	b410      	push	{r4}
 8004428:	6093      	str	r3, [r2, #8]
 800442a:	da08      	bge.n	800443e <__sfputc_r+0x1e>
 800442c:	6994      	ldr	r4, [r2, #24]
 800442e:	42a3      	cmp	r3, r4
 8004430:	db01      	blt.n	8004436 <__sfputc_r+0x16>
 8004432:	290a      	cmp	r1, #10
 8004434:	d103      	bne.n	800443e <__sfputc_r+0x1e>
 8004436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800443a:	f000 b94b 	b.w	80046d4 <__swbuf_r>
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	1c58      	adds	r0, r3, #1
 8004442:	6010      	str	r0, [r2, #0]
 8004444:	7019      	strb	r1, [r3, #0]
 8004446:	4608      	mov	r0, r1
 8004448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444c:	4770      	bx	lr

0800444e <__sfputs_r>:
 800444e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004450:	4606      	mov	r6, r0
 8004452:	460f      	mov	r7, r1
 8004454:	4614      	mov	r4, r2
 8004456:	18d5      	adds	r5, r2, r3
 8004458:	42ac      	cmp	r4, r5
 800445a:	d101      	bne.n	8004460 <__sfputs_r+0x12>
 800445c:	2000      	movs	r0, #0
 800445e:	e007      	b.n	8004470 <__sfputs_r+0x22>
 8004460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004464:	463a      	mov	r2, r7
 8004466:	4630      	mov	r0, r6
 8004468:	f7ff ffda 	bl	8004420 <__sfputc_r>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d1f3      	bne.n	8004458 <__sfputs_r+0xa>
 8004470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004474 <_vfiprintf_r>:
 8004474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004478:	460d      	mov	r5, r1
 800447a:	b09d      	sub	sp, #116	; 0x74
 800447c:	4614      	mov	r4, r2
 800447e:	4698      	mov	r8, r3
 8004480:	4606      	mov	r6, r0
 8004482:	b118      	cbz	r0, 800448c <_vfiprintf_r+0x18>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_vfiprintf_r+0x18>
 8004488:	f000 fb14 	bl	8004ab4 <__sinit>
 800448c:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <_vfiprintf_r+0x240>)
 800448e:	429d      	cmp	r5, r3
 8004490:	d11b      	bne.n	80044ca <_vfiprintf_r+0x56>
 8004492:	6875      	ldr	r5, [r6, #4]
 8004494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004496:	07d9      	lsls	r1, r3, #31
 8004498:	d405      	bmi.n	80044a6 <_vfiprintf_r+0x32>
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	059a      	lsls	r2, r3, #22
 800449e:	d402      	bmi.n	80044a6 <_vfiprintf_r+0x32>
 80044a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044a2:	f000 fba5 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	d501      	bpl.n	80044b0 <_vfiprintf_r+0x3c>
 80044ac:	692b      	ldr	r3, [r5, #16]
 80044ae:	b9eb      	cbnz	r3, 80044ec <_vfiprintf_r+0x78>
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f000 f96e 	bl	8004794 <__swsetup_r>
 80044b8:	b1c0      	cbz	r0, 80044ec <_vfiprintf_r+0x78>
 80044ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044bc:	07dc      	lsls	r4, r3, #31
 80044be:	d50e      	bpl.n	80044de <_vfiprintf_r+0x6a>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	b01d      	add	sp, #116	; 0x74
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <_vfiprintf_r+0x244>)
 80044cc:	429d      	cmp	r5, r3
 80044ce:	d101      	bne.n	80044d4 <_vfiprintf_r+0x60>
 80044d0:	68b5      	ldr	r5, [r6, #8]
 80044d2:	e7df      	b.n	8004494 <_vfiprintf_r+0x20>
 80044d4:	4b79      	ldr	r3, [pc, #484]	; (80046bc <_vfiprintf_r+0x248>)
 80044d6:	429d      	cmp	r5, r3
 80044d8:	bf08      	it	eq
 80044da:	68f5      	ldreq	r5, [r6, #12]
 80044dc:	e7da      	b.n	8004494 <_vfiprintf_r+0x20>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	0598      	lsls	r0, r3, #22
 80044e2:	d4ed      	bmi.n	80044c0 <_vfiprintf_r+0x4c>
 80044e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e6:	f000 fb84 	bl	8004bf2 <__retarget_lock_release_recursive>
 80044ea:	e7e9      	b.n	80044c0 <_vfiprintf_r+0x4c>
 80044ec:	2300      	movs	r3, #0
 80044ee:	9309      	str	r3, [sp, #36]	; 0x24
 80044f0:	2320      	movs	r3, #32
 80044f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80044fa:	2330      	movs	r3, #48	; 0x30
 80044fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046c0 <_vfiprintf_r+0x24c>
 8004500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004504:	f04f 0901 	mov.w	r9, #1
 8004508:	4623      	mov	r3, r4
 800450a:	469a      	mov	sl, r3
 800450c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004510:	b10a      	cbz	r2, 8004516 <_vfiprintf_r+0xa2>
 8004512:	2a25      	cmp	r2, #37	; 0x25
 8004514:	d1f9      	bne.n	800450a <_vfiprintf_r+0x96>
 8004516:	ebba 0b04 	subs.w	fp, sl, r4
 800451a:	d00b      	beq.n	8004534 <_vfiprintf_r+0xc0>
 800451c:	465b      	mov	r3, fp
 800451e:	4622      	mov	r2, r4
 8004520:	4629      	mov	r1, r5
 8004522:	4630      	mov	r0, r6
 8004524:	f7ff ff93 	bl	800444e <__sfputs_r>
 8004528:	3001      	adds	r0, #1
 800452a:	f000 80aa 	beq.w	8004682 <_vfiprintf_r+0x20e>
 800452e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004530:	445a      	add	r2, fp
 8004532:	9209      	str	r2, [sp, #36]	; 0x24
 8004534:	f89a 3000 	ldrb.w	r3, [sl]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80a2 	beq.w	8004682 <_vfiprintf_r+0x20e>
 800453e:	2300      	movs	r3, #0
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004548:	f10a 0a01 	add.w	sl, sl, #1
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004554:	931a      	str	r3, [sp, #104]	; 0x68
 8004556:	4654      	mov	r4, sl
 8004558:	2205      	movs	r2, #5
 800455a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455e:	4858      	ldr	r0, [pc, #352]	; (80046c0 <_vfiprintf_r+0x24c>)
 8004560:	f7fb fe56 	bl	8000210 <memchr>
 8004564:	9a04      	ldr	r2, [sp, #16]
 8004566:	b9d8      	cbnz	r0, 80045a0 <_vfiprintf_r+0x12c>
 8004568:	06d1      	lsls	r1, r2, #27
 800456a:	bf44      	itt	mi
 800456c:	2320      	movmi	r3, #32
 800456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004572:	0713      	lsls	r3, r2, #28
 8004574:	bf44      	itt	mi
 8004576:	232b      	movmi	r3, #43	; 0x2b
 8004578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457c:	f89a 3000 	ldrb.w	r3, [sl]
 8004580:	2b2a      	cmp	r3, #42	; 0x2a
 8004582:	d015      	beq.n	80045b0 <_vfiprintf_r+0x13c>
 8004584:	9a07      	ldr	r2, [sp, #28]
 8004586:	4654      	mov	r4, sl
 8004588:	2000      	movs	r0, #0
 800458a:	f04f 0c0a 	mov.w	ip, #10
 800458e:	4621      	mov	r1, r4
 8004590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004594:	3b30      	subs	r3, #48	; 0x30
 8004596:	2b09      	cmp	r3, #9
 8004598:	d94e      	bls.n	8004638 <_vfiprintf_r+0x1c4>
 800459a:	b1b0      	cbz	r0, 80045ca <_vfiprintf_r+0x156>
 800459c:	9207      	str	r2, [sp, #28]
 800459e:	e014      	b.n	80045ca <_vfiprintf_r+0x156>
 80045a0:	eba0 0308 	sub.w	r3, r0, r8
 80045a4:	fa09 f303 	lsl.w	r3, r9, r3
 80045a8:	4313      	orrs	r3, r2
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	46a2      	mov	sl, r4
 80045ae:	e7d2      	b.n	8004556 <_vfiprintf_r+0xe2>
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	1d19      	adds	r1, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	9103      	str	r1, [sp, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfbb      	ittet	lt
 80045bc:	425b      	neglt	r3, r3
 80045be:	f042 0202 	orrlt.w	r2, r2, #2
 80045c2:	9307      	strge	r3, [sp, #28]
 80045c4:	9307      	strlt	r3, [sp, #28]
 80045c6:	bfb8      	it	lt
 80045c8:	9204      	strlt	r2, [sp, #16]
 80045ca:	7823      	ldrb	r3, [r4, #0]
 80045cc:	2b2e      	cmp	r3, #46	; 0x2e
 80045ce:	d10c      	bne.n	80045ea <_vfiprintf_r+0x176>
 80045d0:	7863      	ldrb	r3, [r4, #1]
 80045d2:	2b2a      	cmp	r3, #42	; 0x2a
 80045d4:	d135      	bne.n	8004642 <_vfiprintf_r+0x1ce>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	1d1a      	adds	r2, r3, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	9203      	str	r2, [sp, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfb8      	it	lt
 80045e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80045e6:	3402      	adds	r4, #2
 80045e8:	9305      	str	r3, [sp, #20]
 80045ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046d0 <_vfiprintf_r+0x25c>
 80045ee:	7821      	ldrb	r1, [r4, #0]
 80045f0:	2203      	movs	r2, #3
 80045f2:	4650      	mov	r0, sl
 80045f4:	f7fb fe0c 	bl	8000210 <memchr>
 80045f8:	b140      	cbz	r0, 800460c <_vfiprintf_r+0x198>
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	eba0 000a 	sub.w	r0, r0, sl
 8004600:	fa03 f000 	lsl.w	r0, r3, r0
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	4303      	orrs	r3, r0
 8004608:	3401      	adds	r4, #1
 800460a:	9304      	str	r3, [sp, #16]
 800460c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004610:	482c      	ldr	r0, [pc, #176]	; (80046c4 <_vfiprintf_r+0x250>)
 8004612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004616:	2206      	movs	r2, #6
 8004618:	f7fb fdfa 	bl	8000210 <memchr>
 800461c:	2800      	cmp	r0, #0
 800461e:	d03f      	beq.n	80046a0 <_vfiprintf_r+0x22c>
 8004620:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <_vfiprintf_r+0x254>)
 8004622:	bb1b      	cbnz	r3, 800466c <_vfiprintf_r+0x1f8>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	3307      	adds	r3, #7
 8004628:	f023 0307 	bic.w	r3, r3, #7
 800462c:	3308      	adds	r3, #8
 800462e:	9303      	str	r3, [sp, #12]
 8004630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004632:	443b      	add	r3, r7
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	e767      	b.n	8004508 <_vfiprintf_r+0x94>
 8004638:	fb0c 3202 	mla	r2, ip, r2, r3
 800463c:	460c      	mov	r4, r1
 800463e:	2001      	movs	r0, #1
 8004640:	e7a5      	b.n	800458e <_vfiprintf_r+0x11a>
 8004642:	2300      	movs	r3, #0
 8004644:	3401      	adds	r4, #1
 8004646:	9305      	str	r3, [sp, #20]
 8004648:	4619      	mov	r1, r3
 800464a:	f04f 0c0a 	mov.w	ip, #10
 800464e:	4620      	mov	r0, r4
 8004650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004654:	3a30      	subs	r2, #48	; 0x30
 8004656:	2a09      	cmp	r2, #9
 8004658:	d903      	bls.n	8004662 <_vfiprintf_r+0x1ee>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0c5      	beq.n	80045ea <_vfiprintf_r+0x176>
 800465e:	9105      	str	r1, [sp, #20]
 8004660:	e7c3      	b.n	80045ea <_vfiprintf_r+0x176>
 8004662:	fb0c 2101 	mla	r1, ip, r1, r2
 8004666:	4604      	mov	r4, r0
 8004668:	2301      	movs	r3, #1
 800466a:	e7f0      	b.n	800464e <_vfiprintf_r+0x1da>
 800466c:	ab03      	add	r3, sp, #12
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	462a      	mov	r2, r5
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <_vfiprintf_r+0x258>)
 8004674:	a904      	add	r1, sp, #16
 8004676:	4630      	mov	r0, r6
 8004678:	f7fd ff9c 	bl	80025b4 <_printf_float>
 800467c:	4607      	mov	r7, r0
 800467e:	1c78      	adds	r0, r7, #1
 8004680:	d1d6      	bne.n	8004630 <_vfiprintf_r+0x1bc>
 8004682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004684:	07d9      	lsls	r1, r3, #31
 8004686:	d405      	bmi.n	8004694 <_vfiprintf_r+0x220>
 8004688:	89ab      	ldrh	r3, [r5, #12]
 800468a:	059a      	lsls	r2, r3, #22
 800468c:	d402      	bmi.n	8004694 <_vfiprintf_r+0x220>
 800468e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004690:	f000 faaf 	bl	8004bf2 <__retarget_lock_release_recursive>
 8004694:	89ab      	ldrh	r3, [r5, #12]
 8004696:	065b      	lsls	r3, r3, #25
 8004698:	f53f af12 	bmi.w	80044c0 <_vfiprintf_r+0x4c>
 800469c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800469e:	e711      	b.n	80044c4 <_vfiprintf_r+0x50>
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	462a      	mov	r2, r5
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <_vfiprintf_r+0x258>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fe fa26 	bl	8002afc <_printf_i>
 80046b0:	e7e4      	b.n	800467c <_vfiprintf_r+0x208>
 80046b2:	bf00      	nop
 80046b4:	080052a4 	.word	0x080052a4
 80046b8:	080052c4 	.word	0x080052c4
 80046bc:	08005284 	.word	0x08005284
 80046c0:	08005172 	.word	0x08005172
 80046c4:	0800517c 	.word	0x0800517c
 80046c8:	080025b5 	.word	0x080025b5
 80046cc:	0800444f 	.word	0x0800444f
 80046d0:	08005178 	.word	0x08005178

080046d4 <__swbuf_r>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	460e      	mov	r6, r1
 80046d8:	4614      	mov	r4, r2
 80046da:	4605      	mov	r5, r0
 80046dc:	b118      	cbz	r0, 80046e6 <__swbuf_r+0x12>
 80046de:	6983      	ldr	r3, [r0, #24]
 80046e0:	b90b      	cbnz	r3, 80046e6 <__swbuf_r+0x12>
 80046e2:	f000 f9e7 	bl	8004ab4 <__sinit>
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <__swbuf_r+0x98>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d12b      	bne.n	8004744 <__swbuf_r+0x70>
 80046ec:	686c      	ldr	r4, [r5, #4]
 80046ee:	69a3      	ldr	r3, [r4, #24]
 80046f0:	60a3      	str	r3, [r4, #8]
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	071a      	lsls	r2, r3, #28
 80046f6:	d52f      	bpl.n	8004758 <__swbuf_r+0x84>
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	b36b      	cbz	r3, 8004758 <__swbuf_r+0x84>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1ac0      	subs	r0, r0, r3
 8004702:	6963      	ldr	r3, [r4, #20]
 8004704:	b2f6      	uxtb	r6, r6
 8004706:	4283      	cmp	r3, r0
 8004708:	4637      	mov	r7, r6
 800470a:	dc04      	bgt.n	8004716 <__swbuf_r+0x42>
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f93c 	bl	800498c <_fflush_r>
 8004714:	bb30      	cbnz	r0, 8004764 <__swbuf_r+0x90>
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	3b01      	subs	r3, #1
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	701e      	strb	r6, [r3, #0]
 8004724:	6963      	ldr	r3, [r4, #20]
 8004726:	3001      	adds	r0, #1
 8004728:	4283      	cmp	r3, r0
 800472a:	d004      	beq.n	8004736 <__swbuf_r+0x62>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	07db      	lsls	r3, r3, #31
 8004730:	d506      	bpl.n	8004740 <__swbuf_r+0x6c>
 8004732:	2e0a      	cmp	r6, #10
 8004734:	d104      	bne.n	8004740 <__swbuf_r+0x6c>
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f000 f927 	bl	800498c <_fflush_r>
 800473e:	b988      	cbnz	r0, 8004764 <__swbuf_r+0x90>
 8004740:	4638      	mov	r0, r7
 8004742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <__swbuf_r+0x9c>)
 8004746:	429c      	cmp	r4, r3
 8004748:	d101      	bne.n	800474e <__swbuf_r+0x7a>
 800474a:	68ac      	ldr	r4, [r5, #8]
 800474c:	e7cf      	b.n	80046ee <__swbuf_r+0x1a>
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <__swbuf_r+0xa0>)
 8004750:	429c      	cmp	r4, r3
 8004752:	bf08      	it	eq
 8004754:	68ec      	ldreq	r4, [r5, #12]
 8004756:	e7ca      	b.n	80046ee <__swbuf_r+0x1a>
 8004758:	4621      	mov	r1, r4
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f81a 	bl	8004794 <__swsetup_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	d0cb      	beq.n	80046fc <__swbuf_r+0x28>
 8004764:	f04f 37ff 	mov.w	r7, #4294967295
 8004768:	e7ea      	b.n	8004740 <__swbuf_r+0x6c>
 800476a:	bf00      	nop
 800476c:	080052a4 	.word	0x080052a4
 8004770:	080052c4 	.word	0x080052c4
 8004774:	08005284 	.word	0x08005284

08004778 <__ascii_wctomb>:
 8004778:	b149      	cbz	r1, 800478e <__ascii_wctomb+0x16>
 800477a:	2aff      	cmp	r2, #255	; 0xff
 800477c:	bf85      	ittet	hi
 800477e:	238a      	movhi	r3, #138	; 0x8a
 8004780:	6003      	strhi	r3, [r0, #0]
 8004782:	700a      	strbls	r2, [r1, #0]
 8004784:	f04f 30ff 	movhi.w	r0, #4294967295
 8004788:	bf98      	it	ls
 800478a:	2001      	movls	r0, #1
 800478c:	4770      	bx	lr
 800478e:	4608      	mov	r0, r1
 8004790:	4770      	bx	lr
	...

08004794 <__swsetup_r>:
 8004794:	4b32      	ldr	r3, [pc, #200]	; (8004860 <__swsetup_r+0xcc>)
 8004796:	b570      	push	{r4, r5, r6, lr}
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	4606      	mov	r6, r0
 800479c:	460c      	mov	r4, r1
 800479e:	b125      	cbz	r5, 80047aa <__swsetup_r+0x16>
 80047a0:	69ab      	ldr	r3, [r5, #24]
 80047a2:	b913      	cbnz	r3, 80047aa <__swsetup_r+0x16>
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 f985 	bl	8004ab4 <__sinit>
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <__swsetup_r+0xd0>)
 80047ac:	429c      	cmp	r4, r3
 80047ae:	d10f      	bne.n	80047d0 <__swsetup_r+0x3c>
 80047b0:	686c      	ldr	r4, [r5, #4]
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047b8:	0719      	lsls	r1, r3, #28
 80047ba:	d42c      	bmi.n	8004816 <__swsetup_r+0x82>
 80047bc:	06dd      	lsls	r5, r3, #27
 80047be:	d411      	bmi.n	80047e4 <__swsetup_r+0x50>
 80047c0:	2309      	movs	r3, #9
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	e03e      	b.n	800484e <__swsetup_r+0xba>
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <__swsetup_r+0xd4>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	d101      	bne.n	80047da <__swsetup_r+0x46>
 80047d6:	68ac      	ldr	r4, [r5, #8]
 80047d8:	e7eb      	b.n	80047b2 <__swsetup_r+0x1e>
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <__swsetup_r+0xd8>)
 80047dc:	429c      	cmp	r4, r3
 80047de:	bf08      	it	eq
 80047e0:	68ec      	ldreq	r4, [r5, #12]
 80047e2:	e7e6      	b.n	80047b2 <__swsetup_r+0x1e>
 80047e4:	0758      	lsls	r0, r3, #29
 80047e6:	d512      	bpl.n	800480e <__swsetup_r+0x7a>
 80047e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ea:	b141      	cbz	r1, 80047fe <__swsetup_r+0x6a>
 80047ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d002      	beq.n	80047fa <__swsetup_r+0x66>
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff fcd5 	bl	80041a4 <_free_r>
 80047fa:	2300      	movs	r3, #0
 80047fc:	6363      	str	r3, [r4, #52]	; 0x34
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	2300      	movs	r3, #0
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	b94b      	cbnz	r3, 800482e <__swsetup_r+0x9a>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d003      	beq.n	800482e <__swsetup_r+0x9a>
 8004826:	4621      	mov	r1, r4
 8004828:	4630      	mov	r0, r6
 800482a:	f000 fa09 	bl	8004c40 <__smakebuf_r>
 800482e:	89a0      	ldrh	r0, [r4, #12]
 8004830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004834:	f010 0301 	ands.w	r3, r0, #1
 8004838:	d00a      	beq.n	8004850 <__swsetup_r+0xbc>
 800483a:	2300      	movs	r3, #0
 800483c:	60a3      	str	r3, [r4, #8]
 800483e:	6963      	ldr	r3, [r4, #20]
 8004840:	425b      	negs	r3, r3
 8004842:	61a3      	str	r3, [r4, #24]
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	b943      	cbnz	r3, 800485a <__swsetup_r+0xc6>
 8004848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800484c:	d1ba      	bne.n	80047c4 <__swsetup_r+0x30>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	0781      	lsls	r1, r0, #30
 8004852:	bf58      	it	pl
 8004854:	6963      	ldrpl	r3, [r4, #20]
 8004856:	60a3      	str	r3, [r4, #8]
 8004858:	e7f4      	b.n	8004844 <__swsetup_r+0xb0>
 800485a:	2000      	movs	r0, #0
 800485c:	e7f7      	b.n	800484e <__swsetup_r+0xba>
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c
 8004864:	080052a4 	.word	0x080052a4
 8004868:	080052c4 	.word	0x080052c4
 800486c:	08005284 	.word	0x08005284

08004870 <abort>:
 8004870:	b508      	push	{r3, lr}
 8004872:	2006      	movs	r0, #6
 8004874:	f000 fa4c 	bl	8004d10 <raise>
 8004878:	2001      	movs	r0, #1
 800487a:	f7fc fb89 	bl	8000f90 <_exit>
	...

08004880 <__sflush_r>:
 8004880:	898a      	ldrh	r2, [r1, #12]
 8004882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004886:	4605      	mov	r5, r0
 8004888:	0710      	lsls	r0, r2, #28
 800488a:	460c      	mov	r4, r1
 800488c:	d458      	bmi.n	8004940 <__sflush_r+0xc0>
 800488e:	684b      	ldr	r3, [r1, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	dc05      	bgt.n	80048a0 <__sflush_r+0x20>
 8004894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	dc02      	bgt.n	80048a0 <__sflush_r+0x20>
 800489a:	2000      	movs	r0, #0
 800489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	d0f9      	beq.n	800489a <__sflush_r+0x1a>
 80048a6:	2300      	movs	r3, #0
 80048a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048ac:	682f      	ldr	r7, [r5, #0]
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	d032      	beq.n	8004918 <__sflush_r+0x98>
 80048b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	075a      	lsls	r2, r3, #29
 80048b8:	d505      	bpl.n	80048c6 <__sflush_r+0x46>
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048c0:	b10b      	cbz	r3, 80048c6 <__sflush_r+0x46>
 80048c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048c4:	1ac0      	subs	r0, r0, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	4602      	mov	r2, r0
 80048ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048cc:	6a21      	ldr	r1, [r4, #32]
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b0      	blx	r6
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	d106      	bne.n	80048e6 <__sflush_r+0x66>
 80048d8:	6829      	ldr	r1, [r5, #0]
 80048da:	291d      	cmp	r1, #29
 80048dc:	d82c      	bhi.n	8004938 <__sflush_r+0xb8>
 80048de:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <__sflush_r+0x108>)
 80048e0:	40ca      	lsrs	r2, r1
 80048e2:	07d6      	lsls	r6, r2, #31
 80048e4:	d528      	bpl.n	8004938 <__sflush_r+0xb8>
 80048e6:	2200      	movs	r2, #0
 80048e8:	6062      	str	r2, [r4, #4]
 80048ea:	04d9      	lsls	r1, r3, #19
 80048ec:	6922      	ldr	r2, [r4, #16]
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	d504      	bpl.n	80048fc <__sflush_r+0x7c>
 80048f2:	1c42      	adds	r2, r0, #1
 80048f4:	d101      	bne.n	80048fa <__sflush_r+0x7a>
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	b903      	cbnz	r3, 80048fc <__sflush_r+0x7c>
 80048fa:	6560      	str	r0, [r4, #84]	; 0x54
 80048fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fe:	602f      	str	r7, [r5, #0]
 8004900:	2900      	cmp	r1, #0
 8004902:	d0ca      	beq.n	800489a <__sflush_r+0x1a>
 8004904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004908:	4299      	cmp	r1, r3
 800490a:	d002      	beq.n	8004912 <__sflush_r+0x92>
 800490c:	4628      	mov	r0, r5
 800490e:	f7ff fc49 	bl	80041a4 <_free_r>
 8004912:	2000      	movs	r0, #0
 8004914:	6360      	str	r0, [r4, #52]	; 0x34
 8004916:	e7c1      	b.n	800489c <__sflush_r+0x1c>
 8004918:	6a21      	ldr	r1, [r4, #32]
 800491a:	2301      	movs	r3, #1
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	1c41      	adds	r1, r0, #1
 8004922:	d1c7      	bne.n	80048b4 <__sflush_r+0x34>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0c4      	beq.n	80048b4 <__sflush_r+0x34>
 800492a:	2b1d      	cmp	r3, #29
 800492c:	d001      	beq.n	8004932 <__sflush_r+0xb2>
 800492e:	2b16      	cmp	r3, #22
 8004930:	d101      	bne.n	8004936 <__sflush_r+0xb6>
 8004932:	602f      	str	r7, [r5, #0]
 8004934:	e7b1      	b.n	800489a <__sflush_r+0x1a>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	e7ad      	b.n	800489c <__sflush_r+0x1c>
 8004940:	690f      	ldr	r7, [r1, #16]
 8004942:	2f00      	cmp	r7, #0
 8004944:	d0a9      	beq.n	800489a <__sflush_r+0x1a>
 8004946:	0793      	lsls	r3, r2, #30
 8004948:	680e      	ldr	r6, [r1, #0]
 800494a:	bf08      	it	eq
 800494c:	694b      	ldreq	r3, [r1, #20]
 800494e:	600f      	str	r7, [r1, #0]
 8004950:	bf18      	it	ne
 8004952:	2300      	movne	r3, #0
 8004954:	eba6 0807 	sub.w	r8, r6, r7
 8004958:	608b      	str	r3, [r1, #8]
 800495a:	f1b8 0f00 	cmp.w	r8, #0
 800495e:	dd9c      	ble.n	800489a <__sflush_r+0x1a>
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004964:	4643      	mov	r3, r8
 8004966:	463a      	mov	r2, r7
 8004968:	4628      	mov	r0, r5
 800496a:	47b0      	blx	r6
 800496c:	2800      	cmp	r0, #0
 800496e:	dc06      	bgt.n	800497e <__sflush_r+0xfe>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e78e      	b.n	800489c <__sflush_r+0x1c>
 800497e:	4407      	add	r7, r0
 8004980:	eba8 0800 	sub.w	r8, r8, r0
 8004984:	e7e9      	b.n	800495a <__sflush_r+0xda>
 8004986:	bf00      	nop
 8004988:	20400001 	.word	0x20400001

0800498c <_fflush_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	4605      	mov	r5, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b913      	cbnz	r3, 800499c <_fflush_r+0x10>
 8004996:	2500      	movs	r5, #0
 8004998:	4628      	mov	r0, r5
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	b118      	cbz	r0, 80049a6 <_fflush_r+0x1a>
 800499e:	6983      	ldr	r3, [r0, #24]
 80049a0:	b90b      	cbnz	r3, 80049a6 <_fflush_r+0x1a>
 80049a2:	f000 f887 	bl	8004ab4 <__sinit>
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <_fflush_r+0x6c>)
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d11b      	bne.n	80049e4 <_fflush_r+0x58>
 80049ac:	686c      	ldr	r4, [r5, #4]
 80049ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ef      	beq.n	8004996 <_fflush_r+0xa>
 80049b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b8:	07d0      	lsls	r0, r2, #31
 80049ba:	d404      	bmi.n	80049c6 <_fflush_r+0x3a>
 80049bc:	0599      	lsls	r1, r3, #22
 80049be:	d402      	bmi.n	80049c6 <_fflush_r+0x3a>
 80049c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049c2:	f000 f915 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 80049c6:	4628      	mov	r0, r5
 80049c8:	4621      	mov	r1, r4
 80049ca:	f7ff ff59 	bl	8004880 <__sflush_r>
 80049ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d0:	07da      	lsls	r2, r3, #31
 80049d2:	4605      	mov	r5, r0
 80049d4:	d4e0      	bmi.n	8004998 <_fflush_r+0xc>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	059b      	lsls	r3, r3, #22
 80049da:	d4dd      	bmi.n	8004998 <_fflush_r+0xc>
 80049dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049de:	f000 f908 	bl	8004bf2 <__retarget_lock_release_recursive>
 80049e2:	e7d9      	b.n	8004998 <_fflush_r+0xc>
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <_fflush_r+0x70>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	d101      	bne.n	80049ee <_fflush_r+0x62>
 80049ea:	68ac      	ldr	r4, [r5, #8]
 80049ec:	e7df      	b.n	80049ae <_fflush_r+0x22>
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <_fflush_r+0x74>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	bf08      	it	eq
 80049f4:	68ec      	ldreq	r4, [r5, #12]
 80049f6:	e7da      	b.n	80049ae <_fflush_r+0x22>
 80049f8:	080052a4 	.word	0x080052a4
 80049fc:	080052c4 	.word	0x080052c4
 8004a00:	08005284 	.word	0x08005284

08004a04 <std>:
 8004a04:	2300      	movs	r3, #0
 8004a06:	b510      	push	{r4, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a12:	6083      	str	r3, [r0, #8]
 8004a14:	8181      	strh	r1, [r0, #12]
 8004a16:	6643      	str	r3, [r0, #100]	; 0x64
 8004a18:	81c2      	strh	r2, [r0, #14]
 8004a1a:	6183      	str	r3, [r0, #24]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	2208      	movs	r2, #8
 8004a20:	305c      	adds	r0, #92	; 0x5c
 8004a22:	f7fd fd1f 	bl	8002464 <memset>
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x38>)
 8004a28:	6263      	str	r3, [r4, #36]	; 0x24
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <std+0x3c>)
 8004a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x40>)
 8004a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <std+0x44>)
 8004a34:	6224      	str	r4, [r4, #32]
 8004a36:	6323      	str	r3, [r4, #48]	; 0x30
 8004a38:	bd10      	pop	{r4, pc}
 8004a3a:	bf00      	nop
 8004a3c:	08004d49 	.word	0x08004d49
 8004a40:	08004d6b 	.word	0x08004d6b
 8004a44:	08004da3 	.word	0x08004da3
 8004a48:	08004dc7 	.word	0x08004dc7

08004a4c <_cleanup_r>:
 8004a4c:	4901      	ldr	r1, [pc, #4]	; (8004a54 <_cleanup_r+0x8>)
 8004a4e:	f000 b8af 	b.w	8004bb0 <_fwalk_reent>
 8004a52:	bf00      	nop
 8004a54:	0800498d 	.word	0x0800498d

08004a58 <__sfmoreglue>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	2268      	movs	r2, #104	; 0x68
 8004a5c:	1e4d      	subs	r5, r1, #1
 8004a5e:	4355      	muls	r5, r2
 8004a60:	460e      	mov	r6, r1
 8004a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a66:	f7ff fc09 	bl	800427c <_malloc_r>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	b140      	cbz	r0, 8004a80 <__sfmoreglue+0x28>
 8004a6e:	2100      	movs	r1, #0
 8004a70:	e9c0 1600 	strd	r1, r6, [r0]
 8004a74:	300c      	adds	r0, #12
 8004a76:	60a0      	str	r0, [r4, #8]
 8004a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a7c:	f7fd fcf2 	bl	8002464 <memset>
 8004a80:	4620      	mov	r0, r4
 8004a82:	bd70      	pop	{r4, r5, r6, pc}

08004a84 <__sfp_lock_acquire>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__sfp_lock_acquire+0x8>)
 8004a86:	f000 b8b3 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	2000020d 	.word	0x2000020d

08004a90 <__sfp_lock_release>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__sfp_lock_release+0x8>)
 8004a92:	f000 b8ae 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	2000020d 	.word	0x2000020d

08004a9c <__sinit_lock_acquire>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sinit_lock_acquire+0x8>)
 8004a9e:	f000 b8a7 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	2000020e 	.word	0x2000020e

08004aa8 <__sinit_lock_release>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sinit_lock_release+0x8>)
 8004aaa:	f000 b8a2 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	2000020e 	.word	0x2000020e

08004ab4 <__sinit>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	f7ff fff0 	bl	8004a9c <__sinit_lock_acquire>
 8004abc:	69a3      	ldr	r3, [r4, #24]
 8004abe:	b11b      	cbz	r3, 8004ac8 <__sinit+0x14>
 8004ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac4:	f7ff bff0 	b.w	8004aa8 <__sinit_lock_release>
 8004ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004acc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <__sinit+0x68>)
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <__sinit+0x6c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	bf04      	itt	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	61a3      	streq	r3, [r4, #24]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f820 	bl	8004b24 <__sfp>
 8004ae4:	6060      	str	r0, [r4, #4]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f81c 	bl	8004b24 <__sfp>
 8004aec:	60a0      	str	r0, [r4, #8]
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f818 	bl	8004b24 <__sfp>
 8004af4:	2200      	movs	r2, #0
 8004af6:	60e0      	str	r0, [r4, #12]
 8004af8:	2104      	movs	r1, #4
 8004afa:	6860      	ldr	r0, [r4, #4]
 8004afc:	f7ff ff82 	bl	8004a04 <std>
 8004b00:	68a0      	ldr	r0, [r4, #8]
 8004b02:	2201      	movs	r2, #1
 8004b04:	2109      	movs	r1, #9
 8004b06:	f7ff ff7d 	bl	8004a04 <std>
 8004b0a:	68e0      	ldr	r0, [r4, #12]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	2112      	movs	r1, #18
 8004b10:	f7ff ff78 	bl	8004a04 <std>
 8004b14:	2301      	movs	r3, #1
 8004b16:	61a3      	str	r3, [r4, #24]
 8004b18:	e7d2      	b.n	8004ac0 <__sinit+0xc>
 8004b1a:	bf00      	nop
 8004b1c:	08004f0c 	.word	0x08004f0c
 8004b20:	08004a4d 	.word	0x08004a4d

08004b24 <__sfp>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	4607      	mov	r7, r0
 8004b28:	f7ff ffac 	bl	8004a84 <__sfp_lock_acquire>
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <__sfp+0x84>)
 8004b2e:	681e      	ldr	r6, [r3, #0]
 8004b30:	69b3      	ldr	r3, [r6, #24]
 8004b32:	b913      	cbnz	r3, 8004b3a <__sfp+0x16>
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff ffbd 	bl	8004ab4 <__sinit>
 8004b3a:	3648      	adds	r6, #72	; 0x48
 8004b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	d503      	bpl.n	8004b4c <__sfp+0x28>
 8004b44:	6833      	ldr	r3, [r6, #0]
 8004b46:	b30b      	cbz	r3, 8004b8c <__sfp+0x68>
 8004b48:	6836      	ldr	r6, [r6, #0]
 8004b4a:	e7f7      	b.n	8004b3c <__sfp+0x18>
 8004b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b50:	b9d5      	cbnz	r5, 8004b88 <__sfp+0x64>
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <__sfp+0x88>)
 8004b54:	60e3      	str	r3, [r4, #12]
 8004b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b5c:	f000 f847 	bl	8004bee <__retarget_lock_init_recursive>
 8004b60:	f7ff ff96 	bl	8004a90 <__sfp_lock_release>
 8004b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b6c:	6025      	str	r5, [r4, #0]
 8004b6e:	61a5      	str	r5, [r4, #24]
 8004b70:	2208      	movs	r2, #8
 8004b72:	4629      	mov	r1, r5
 8004b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b78:	f7fd fc74 	bl	8002464 <memset>
 8004b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b84:	4620      	mov	r0, r4
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b88:	3468      	adds	r4, #104	; 0x68
 8004b8a:	e7d9      	b.n	8004b40 <__sfp+0x1c>
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f7ff ff62 	bl	8004a58 <__sfmoreglue>
 8004b94:	4604      	mov	r4, r0
 8004b96:	6030      	str	r0, [r6, #0]
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d1d5      	bne.n	8004b48 <__sfp+0x24>
 8004b9c:	f7ff ff78 	bl	8004a90 <__sfp_lock_release>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	e7ee      	b.n	8004b84 <__sfp+0x60>
 8004ba6:	bf00      	nop
 8004ba8:	08004f0c 	.word	0x08004f0c
 8004bac:	ffff0001 	.word	0xffff0001

08004bb0 <_fwalk_reent>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bbc:	2700      	movs	r7, #0
 8004bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bc6:	d505      	bpl.n	8004bd4 <_fwalk_reent+0x24>
 8004bc8:	6824      	ldr	r4, [r4, #0]
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d1f7      	bne.n	8004bbe <_fwalk_reent+0xe>
 8004bce:	4638      	mov	r0, r7
 8004bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd4:	89ab      	ldrh	r3, [r5, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d907      	bls.n	8004bea <_fwalk_reent+0x3a>
 8004bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bde:	3301      	adds	r3, #1
 8004be0:	d003      	beq.n	8004bea <_fwalk_reent+0x3a>
 8004be2:	4629      	mov	r1, r5
 8004be4:	4630      	mov	r0, r6
 8004be6:	47c0      	blx	r8
 8004be8:	4307      	orrs	r7, r0
 8004bea:	3568      	adds	r5, #104	; 0x68
 8004bec:	e7e9      	b.n	8004bc2 <_fwalk_reent+0x12>

08004bee <__retarget_lock_init_recursive>:
 8004bee:	4770      	bx	lr

08004bf0 <__retarget_lock_acquire_recursive>:
 8004bf0:	4770      	bx	lr

08004bf2 <__retarget_lock_release_recursive>:
 8004bf2:	4770      	bx	lr

08004bf4 <__swhatbuf_r>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	b096      	sub	sp, #88	; 0x58
 8004c00:	4614      	mov	r4, r2
 8004c02:	461d      	mov	r5, r3
 8004c04:	da08      	bge.n	8004c18 <__swhatbuf_r+0x24>
 8004c06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	602a      	str	r2, [r5, #0]
 8004c0e:	061a      	lsls	r2, r3, #24
 8004c10:	d410      	bmi.n	8004c34 <__swhatbuf_r+0x40>
 8004c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c16:	e00e      	b.n	8004c36 <__swhatbuf_r+0x42>
 8004c18:	466a      	mov	r2, sp
 8004c1a:	f000 f8fb 	bl	8004e14 <_fstat_r>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	dbf1      	blt.n	8004c06 <__swhatbuf_r+0x12>
 8004c22:	9a01      	ldr	r2, [sp, #4]
 8004c24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c2c:	425a      	negs	r2, r3
 8004c2e:	415a      	adcs	r2, r3
 8004c30:	602a      	str	r2, [r5, #0]
 8004c32:	e7ee      	b.n	8004c12 <__swhatbuf_r+0x1e>
 8004c34:	2340      	movs	r3, #64	; 0x40
 8004c36:	2000      	movs	r0, #0
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	b016      	add	sp, #88	; 0x58
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c40 <__smakebuf_r>:
 8004c40:	898b      	ldrh	r3, [r1, #12]
 8004c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c44:	079d      	lsls	r5, r3, #30
 8004c46:	4606      	mov	r6, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	d507      	bpl.n	8004c5c <__smakebuf_r+0x1c>
 8004c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	2301      	movs	r3, #1
 8004c56:	6163      	str	r3, [r4, #20]
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	ab01      	add	r3, sp, #4
 8004c5e:	466a      	mov	r2, sp
 8004c60:	f7ff ffc8 	bl	8004bf4 <__swhatbuf_r>
 8004c64:	9900      	ldr	r1, [sp, #0]
 8004c66:	4605      	mov	r5, r0
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f7ff fb07 	bl	800427c <_malloc_r>
 8004c6e:	b948      	cbnz	r0, 8004c84 <__smakebuf_r+0x44>
 8004c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c74:	059a      	lsls	r2, r3, #22
 8004c76:	d4ef      	bmi.n	8004c58 <__smakebuf_r+0x18>
 8004c78:	f023 0303 	bic.w	r3, r3, #3
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	e7e3      	b.n	8004c4c <__smakebuf_r+0xc>
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <__smakebuf_r+0x7c>)
 8004c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	6020      	str	r0, [r4, #0]
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	9b00      	ldr	r3, [sp, #0]
 8004c94:	6163      	str	r3, [r4, #20]
 8004c96:	9b01      	ldr	r3, [sp, #4]
 8004c98:	6120      	str	r0, [r4, #16]
 8004c9a:	b15b      	cbz	r3, 8004cb4 <__smakebuf_r+0x74>
 8004c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f000 f8c9 	bl	8004e38 <_isatty_r>
 8004ca6:	b128      	cbz	r0, 8004cb4 <__smakebuf_r+0x74>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	89a0      	ldrh	r0, [r4, #12]
 8004cb6:	4305      	orrs	r5, r0
 8004cb8:	81a5      	strh	r5, [r4, #12]
 8004cba:	e7cd      	b.n	8004c58 <__smakebuf_r+0x18>
 8004cbc:	08004a4d 	.word	0x08004a4d

08004cc0 <_raise_r>:
 8004cc0:	291f      	cmp	r1, #31
 8004cc2:	b538      	push	{r3, r4, r5, lr}
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	d904      	bls.n	8004cd4 <_raise_r+0x14>
 8004cca:	2316      	movs	r3, #22
 8004ccc:	6003      	str	r3, [r0, #0]
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004cd6:	b112      	cbz	r2, 8004cde <_raise_r+0x1e>
 8004cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cdc:	b94b      	cbnz	r3, 8004cf2 <_raise_r+0x32>
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 f830 	bl	8004d44 <_getpid_r>
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	4620      	mov	r0, r4
 8004cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cee:	f000 b817 	b.w	8004d20 <_kill_r>
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d00a      	beq.n	8004d0c <_raise_r+0x4c>
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	d103      	bne.n	8004d02 <_raise_r+0x42>
 8004cfa:	2316      	movs	r3, #22
 8004cfc:	6003      	str	r3, [r0, #0]
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e7e7      	b.n	8004cd2 <_raise_r+0x12>
 8004d02:	2400      	movs	r4, #0
 8004d04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d08:	4628      	mov	r0, r5
 8004d0a:	4798      	blx	r3
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7e0      	b.n	8004cd2 <_raise_r+0x12>

08004d10 <raise>:
 8004d10:	4b02      	ldr	r3, [pc, #8]	; (8004d1c <raise+0xc>)
 8004d12:	4601      	mov	r1, r0
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	f7ff bfd3 	b.w	8004cc0 <_raise_r>
 8004d1a:	bf00      	nop
 8004d1c:	2000000c 	.word	0x2000000c

08004d20 <_kill_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d07      	ldr	r5, [pc, #28]	; (8004d40 <_kill_r+0x20>)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	602b      	str	r3, [r5, #0]
 8004d2e:	f7fc f91f 	bl	8000f70 <_kill>
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	d102      	bne.n	8004d3c <_kill_r+0x1c>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	b103      	cbz	r3, 8004d3c <_kill_r+0x1c>
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	bd38      	pop	{r3, r4, r5, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000208 	.word	0x20000208

08004d44 <_getpid_r>:
 8004d44:	f7fc b90c 	b.w	8000f60 <_getpid>

08004d48 <__sread>:
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d50:	f000 f894 	bl	8004e7c <_read_r>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	bfab      	itete	ge
 8004d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d5c:	181b      	addge	r3, r3, r0
 8004d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d62:	bfac      	ite	ge
 8004d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d66:	81a3      	strhlt	r3, [r4, #12]
 8004d68:	bd10      	pop	{r4, pc}

08004d6a <__swrite>:
 8004d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6e:	461f      	mov	r7, r3
 8004d70:	898b      	ldrh	r3, [r1, #12]
 8004d72:	05db      	lsls	r3, r3, #23
 8004d74:	4605      	mov	r5, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	4616      	mov	r6, r2
 8004d7a:	d505      	bpl.n	8004d88 <__swrite+0x1e>
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	2302      	movs	r3, #2
 8004d82:	2200      	movs	r2, #0
 8004d84:	f000 f868 	bl	8004e58 <_lseek_r>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	4632      	mov	r2, r6
 8004d96:	463b      	mov	r3, r7
 8004d98:	4628      	mov	r0, r5
 8004d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9e:	f000 b817 	b.w	8004dd0 <_write_r>

08004da2 <__sseek>:
 8004da2:	b510      	push	{r4, lr}
 8004da4:	460c      	mov	r4, r1
 8004da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004daa:	f000 f855 	bl	8004e58 <_lseek_r>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	bf15      	itete	ne
 8004db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dbe:	81a3      	strheq	r3, [r4, #12]
 8004dc0:	bf18      	it	ne
 8004dc2:	81a3      	strhne	r3, [r4, #12]
 8004dc4:	bd10      	pop	{r4, pc}

08004dc6 <__sclose>:
 8004dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dca:	f000 b813 	b.w	8004df4 <_close_r>
	...

08004dd0 <_write_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d07      	ldr	r5, [pc, #28]	; (8004df0 <_write_r+0x20>)
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	4611      	mov	r1, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	602a      	str	r2, [r5, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f7fc f84f 	bl	8000e82 <_write>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_write_r+0x1e>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_write_r+0x1e>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	20000208 	.word	0x20000208

08004df4 <_close_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4d06      	ldr	r5, [pc, #24]	; (8004e10 <_close_r+0x1c>)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	f7fc f8ed 	bl	8000fde <_close>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_close_r+0x1a>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_close_r+0x1a>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000208 	.word	0x20000208

08004e14 <_fstat_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	; (8004e34 <_fstat_r+0x20>)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	f7fc f8e8 	bl	8000ff6 <_fstat>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	d102      	bne.n	8004e30 <_fstat_r+0x1c>
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	b103      	cbz	r3, 8004e30 <_fstat_r+0x1c>
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	bd38      	pop	{r3, r4, r5, pc}
 8004e32:	bf00      	nop
 8004e34:	20000208 	.word	0x20000208

08004e38 <_isatty_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d06      	ldr	r5, [pc, #24]	; (8004e54 <_isatty_r+0x1c>)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4608      	mov	r0, r1
 8004e42:	602b      	str	r3, [r5, #0]
 8004e44:	f7fc f8e7 	bl	8001016 <_isatty>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d102      	bne.n	8004e52 <_isatty_r+0x1a>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b103      	cbz	r3, 8004e52 <_isatty_r+0x1a>
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	20000208 	.word	0x20000208

08004e58 <_lseek_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d07      	ldr	r5, [pc, #28]	; (8004e78 <_lseek_r+0x20>)
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	4608      	mov	r0, r1
 8004e60:	4611      	mov	r1, r2
 8004e62:	2200      	movs	r2, #0
 8004e64:	602a      	str	r2, [r5, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f7fc f8e0 	bl	800102c <_lseek>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_lseek_r+0x1e>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_lseek_r+0x1e>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20000208 	.word	0x20000208

08004e7c <_read_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4d07      	ldr	r5, [pc, #28]	; (8004e9c <_read_r+0x20>)
 8004e80:	4604      	mov	r4, r0
 8004e82:	4608      	mov	r0, r1
 8004e84:	4611      	mov	r1, r2
 8004e86:	2200      	movs	r2, #0
 8004e88:	602a      	str	r2, [r5, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f7fc f88a 	bl	8000fa4 <_read>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_read_r+0x1e>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_read_r+0x1e>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	20000208 	.word	0x20000208

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
