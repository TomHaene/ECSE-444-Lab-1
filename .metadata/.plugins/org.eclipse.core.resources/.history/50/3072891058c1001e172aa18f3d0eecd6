/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdlib.h>
#include <stdio.h>


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct{
	float q;
	float r;
	float x;
	float p;
	float k;

}kalman_state;


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

uint8_t count = 0;
float diffArray[5];
float output[5];
float average;
float stdDev;



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
extern int kalmanfilter_single_asm(int *ptr, float measurement); //The ASM subroutine
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int kalmanfilter_ASM(float* inputArray, float* outputArray, kalman_state* myState, int size){

	for (uint32_t i = 0; i < size ; i++){
		  	kalmanfilter_single_asm(&myState, inputArray[i]);  // Kalman algorithm in assembly
		  	outputArray[i] = myState->x;
	      }

	return 0;
}

void calculateDifference(float* inputArray, float* outputArray, float* differenceArray, int size){
	for (int i = 0; i < size; ++i) {
	        differenceArray[i] = inputArray[i] - outputArray[i];
	    }

}

void calculateStats(const float* differenceArray, int size, float *average, float *stdDev) {
    float sum = 0.0, variance = 0.0;

    // Calculate average
    for (int i = 0; i < size; ++i) {
    	sum += differenceArray[i];
    }
    *average = sum / size;

    // Calculate variance
    for (int i = 0; i < size; ++i) {
        variance += (differenceArray[i] - *average) * (differenceArray[i] - *average);
    }
    variance /= size;

    // Calculate standard deviation
    *stdDev = sqrt(variance);
}


float calculateCorrelation(const float* x, const float* y, int size) {
    float sumX = 0.0, sumY = 0.0, sumXY = 0.0;
    float squareSumX = 0.0, squareSumY = 0.0;

    for (int i = 0; i < size; ++i) {
        // Sum of elements of array X.
        sumX = sumX + x[i];

        // Sum of elements of array Y.
        sumY = sumY + y[i];

        // Sum of X[i] * Y[i].
        sumXY = sumXY + x[i] * y[i];

        // Sum of square of array elements.
        squareSumX = squareSumX + x[i] * x[i];
        squareSumY = squareSumY + y[i] * y[i];
    }

    // Use correlation formula
    float corr = (size * sumXY - sumX * sumY) /
                 (sqrt((size * squareSumX - sumX * sumX) * (size * squareSumY - sumY * sumY)));
    return corr;
}


void convolution(const float* x, int N, const float* h, int M, float result[]) {
    int totalLength = N + M - 1; // Length of the convolution result

    // Initialize result array
    for (int i = 0; i < totalLength; ++i) {
        result[i] = 0;
    }

    // Compute the convolution
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            result[i + j] += x[i] * h[j];
        }
    }
}




/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	kalman_state myState;

	myState.q = 0.1;
	myState.r = 0.1;
	myState.p = 0.1;
	myState.x = 5.0;
	myState.k = 0.0;

	float input[5] = {0,1,2,3,4};



	kalmanfilter_ASM(input, output, &myState, 5);





  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */






  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {




    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */






  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 {
	ITM_SendChar(*ptr++);

 }
 return len;
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
